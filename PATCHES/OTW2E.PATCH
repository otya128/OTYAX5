diff -u OTW.TXT OTW2E
--- OTW.TXT
+++ OTW2E
@@ -78,6 +78,8 @@
 DIM WIN_CURX   [0]
 DIM WIN_CURY   [0]
 DIM WIN_IM     [0]
+
+DIM WIN_TIMER  [0]
 VAR WIN_FREE
 VAR WIN_WIDCNT
 VAR WIN_MSGARGSIZE
@@ -116,6 +118,7 @@
 VAR WIN_STYLE_HIDE
 VAR WIN_STYLE_OWNERDRAW
 VAR WIN_STYLE_MINMAX
+VAR WIN_STYLE_TOOL
 VAR WIN_ACTIVENUWID
 'DOUBLE CLICK
 'まえ CLICK した WINDOW
@@ -133,6 +136,7 @@
 VAR WIN_SHELL$
 VAR WIN_IM$
 
+VAR WIN_STYLE_NARROW
 DEF OTW_WIN_INITARRAY
  PrintConsoleln "Init window..."
  VAR FM=FREEMEM
@@ -144,6 +148,8 @@
  WIN_STYLE_HIDE=8
  WIN_STYLE_OWNERDRAW=16
  WIN_STYLE_MINMAX=32
+ WIN_STYLE_TOOL=64
+ WIN_STYLE_NARROW=128
 'WIN_FWIDTH1=0
 'WIN_FHEIGHT1=10
 'WIN_FWIDTH2=0
@@ -204,7 +210,9 @@
  WIN_MSGS      =NewArray(WIN_MAX)
  WIN_MSGE      =NewArray(WIN_MAX)
  WIN_MSGBUF    =NewArray3(WIN_MAX,WIN_MSGMAX,WIN_MSGARGSIZE)
- WIN_MSGCNT    =NewArray2(WIN_MAX,16)
+ OTW_TIMER_INIT
+ WIN_TIMER     =NewArray(WIN_MAX)
+ 'WIN_MSGCNT    =NewArray2(WIN_MAX,CTL_HANDLER_MAX)
  WIN_FREE=1
  OTW_INITLIST WIN_NEXT
  OTW_MENU_INITARRAY
@@ -459,6 +467,7 @@
  CTL_STYLE_NCFOCUS=1
  CTL_MAX=64
  CTL_HANDLER_MAX=21
+ WIN_MSGCNT    =NewArray2(WIN_MAX,CTL_HANDLER_MAX)
  CTL_NAME$     =NewArray$(CTL_MAX)
  CTL_DAT       =NewArray(CTL_MAX)
  CTL_FW1       =NewArray(CTL_MAX)
@@ -480,7 +489,7 @@
  NewControl "VSCRBAR" OUT CTL_VSCRBARCTL,E
  NewControl "HSCRBAR" OUT CTL_HSCRBARCTL,E
  CTL_PAINTHANDLER=0
-' CTL_NDHNDLR[CTL_PAINTHANDLER]=TRUE
+ 'CTL_NDHNDLR[CTL_PAINTHANDLER]=TRUE
  CTL_LBTNDWNHANDLER=1
  CTL_LBTNUPHANDLER=2
  CTL_RBTNUPHANDLER=3
@@ -560,6 +569,7 @@
  E=SetControlLMouseDownHandler(CTL_DRPDWNCTL,"DropDownListLMD")
  E=SetControlLMouseUpHandler(CTL_DRPDWNCTL,"DropDownListLMU")
  E=SetControlNotifHandler(CTL_DRPDWNCTL,"DropDownListNotif")
+ E=SetControlDeleteHandler(CTL_DRPDWNCTL,"DropDownListDelete")
 
  ExtendControl "DROPDOWNLISTBOX",GetListBoxControl() OUT CTL_DRPDWNBOXCTL,E
  E=SetControlChFocusHandler(CTL_DRPDWNBOXCTL,"DropDownListBoxChFocus")
@@ -719,16 +729,135 @@
 VAR WIN_NODRAW
 VAR CTL_NOALLOC
 VAR CTL_INVALIDID
+VAR TIMER_INVALIDID
 DEF OTW_INIT_ERR
- WIN_NOALLOC=1
- WIN_INVALIDID=2
- WIN_EVENTERR=3
- WIN_NODRAW=3
- CTL_NOALLOC=201
- CTL_INVALIDID=202
- IM_NOALLOC=301
- IM_INVALIDID=302
+ WIN_NOALLOC=&H1
+ WIN_INVALIDID=&H2
+ WIN_EVENTERR=&H3
+ WIN_NODRAW=&H4
+ CTL_NOALLOC=&H2001
+ CTL_INVALIDID=&H2002
+ IM_NOALLOC=&H3001
+ IM_INVALIDID=&H3002
+ TIMER_INVALIDID=&H4001
 END
+'======
+'TIMER
+'======
+DIM TIMER_WND[0]
+DIM TIMER_TIMEOUT[0]
+DIM TIMER_ARG[0]
+DIM TIMER_FUNC$[0]
+DIM TIMER_NEXT[0]
+DIM TIMER_PREV[0]
+DIM TIMER_ID[0]
+DIM TIMER_TM[0]
+VAR TIMER_MAX
+VAR TIMER_FREE
+VAR TIMER_IDCNT
+DEF OTW_TIMER_INIT
+ TIMER_MAX=16
+ TIMER_WND=NewArray(TIMER_MAX)
+ TIMER_TIMEOUT=NewArray(TIMER_MAX)
+ TIMER_ARG=NewArray(TIMER_MAX)
+ TIMER_FUNC$=NewArray$(TIMER_MAX)
+ TIMER_NEXT=NewArray(TIMER_MAX)
+ TIMER_PREV=NewArray(TIMER_MAX)
+ TIMER_ID=NewArray(TIMER_MAX)
+ TIMER_TM=NewArray(TIMER_MAX)
+ TIMER_IDCNT=1
+ TIMER_FREE=1
+ OTW_INITLIST TIMER_NEXT
+END
+COMMON DEF SetTimer WND,TIMEOUT,ARG,FUNC$ OUT TIMER,ERR
+ IF!CheckWindow(WND)THEN
+  ERR=WIN_INVALIDID
+  TIMER=0
+ ENDIF
+ ERR=0
+ VAR NUWID=WND AND NUWIDMASK
+ VAR OT=WIN_TIMER[NUWID] AND NUWIDMASK
+ TIMER=ToTimer(NewTimer(WND,TIMEOUT,OT,0,ARG,FUNC$))
+ WIN_TIMER[NUWID]=TIMER
+END
+COMMON DEF CheckTimer(T)
+ RETURN TIMER_ID[T AND NUWIDMASK]==T>>WIDSHIFT
+END
+DEF DeleteWindowTimers(WND)
+ IF!CheckWindow(WND)THEN
+  RETURN WIN_INVALIDID
+ ENDIF
+ VAR NUWID=WND AND NUWIDMASK
+ VAR TIMER=WIN_TIMER[NUWID]
+ VAR T=TIMER AND NUWIDMASK
+ WHILE T
+  VOID DeleteTimer(ToTimer(T))
+  TIMER=WIN_TIMER[NUWID]
+  T=TIMER AND NUWIDMASK
+ WEND
+ RETURN 0
+END
+COMMON DEF DeleteTimer(TIMER)
+ IF!CheckTimer(TIMER)THEN
+  RETURN TIMER_INVALIDID
+ ENDIF
+ VAR T=TIMER AND NUWIDMASK
+ IF!CheckWindow(TIMER_WND[T])THEN
+  RETURN WIN_INVALIDID
+ ENDIF
+ IF TIMER_PREV[T]THEN
+  TIMER_NEXT[TIMER_PREV[T]]=TIMER_NEXT[T]
+ ENDIF
+ IF TIMER_NEXT[T]THEN
+  TIMER_PREV[TIMER_NEXT[T]]=TIMER_PREV[T]
+ ENDIF
+ 
+ VAR NW=TIMER_WND[T]AND NUWIDMASK
+ IF (WIN_TIMER[NW]AND NUWIDMASK)==T THEN
+  WIN_TIMER[NW]=ToTimer(TIMER_NEXT[T])
+ ENDIF
+ TIMER_NEXT[T]=TIMER_FREE
+ TIMER_FREE=T
+END
+DEF ToTimer(T)
+ RETURN TIMER_ID[T]<<WIDSHIFT OR T
+END
+DEF NewTimer(WND,TIMEOUT,NXT,PREV,ARG,FUNC$)
+ IF!TIMER_FREE THEN
+  TIMER_FREE=LEN(TIMER_WND)
+  PUSH TIMER_WND,0
+  PUSH TIMER_TIMEOUT,0
+  PUSH TIMER_ARG,0
+  PUSH TIMER_FUNC$,FUNC$
+  PUSH TIMER_NEXT,0
+  PUSH TIMER_PREV,0
+  PUSH TIMER_NEXT,0
+  PUSH TIMER_ID,0
+  PUSH TIMER_TM,0
+ ENDIF
+ TIMER_WND[TIMER_FREE]=WND
+ TIMER_TIMEOUT[TIMER_FREE]=TIMEOUT
+ TIMER_PREV[TIMER_FREE]=PREV
+ TIMER_ARG[TIMER_FREE]=ARG
+ TIMER_FUNC$[TIMER_FREE]=FUNC$
+ TIMER_ID[TIMER_FREE]=TIMER_IDCNT
+ IF NXT THEN
+  TIMER_PREV[NXT]=TIMER_FREE
+ ENDIF
+ IF PREV THEN
+  TIMER_NEXT[PREV]=TIMER_FREE
+ ENDIF
+ VAR R=TIMER_FREE
+ TIMER_FREE=TIMER_NEXT[TIMER_FREE]
+ TIMER_NEXT[R]=NXT
+ TIMER_IDCNT=TIMER_IDCNT+1
+ TIMER_TM[R]=MILLISEC
+ RETURN R
+END
+'======
+'END TIMER
+'======
+
 COMMON DEF GetWindowControl()
  RETURN CTL_WINDOWCTL
 END
@@ -822,6 +951,8 @@
  NEXT
 END
 COMMON DEF IsControlExtend(CTL,PARENT)
+ IF!CheckControl(CTL) THEN RETURN 0
+ IF!CheckControl(PARENT) THEN RETURN 0
  VAR N=CTL AND 4095
  VAR P=PARENT AND 4095
  WHILE N
@@ -830,6 +961,10 @@
  WEND
  RETURN 0
 END
+COMMON DEF GetControlName$(CTL)
+ IF!CheckControl(CTL) THEN RETURN""
+ RETURN CTL_NAME$[CTL AND 4095]
+END
 COMMON DEF SetControlPainter(CTL,HANDLER$)
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
  CTL_HANDLER$[CTL AND 4095,CTL_PAINTHANDLER]=HANDLER$
@@ -1605,6 +1740,9 @@
 COMMON DEF WindowOwnerDrawFlag()
  RETURN 8
 END
+COMMON DEF WindowToolFlag()
+ RETURN 16
+END
 DEF WindowOnCreate WND,CTL,ARG1,ARG2
  VAR NUCID=CTL AND 4095
  IF LEN(CTL_HANDLER$[NUCID,CTL_CREATEHANDLER])THEN
@@ -1726,6 +1864,9 @@
  IF (FLG AND 8)==8THEN
   WIN_STYLE[NUWID]=WIN_STYLE[NUWID] OR WIN_STYLE_OWNERDRAW
  ENDIF
+ IF (FLG AND WindowToolFlag())THEN
+  WIN_STYLE[NUWID]=WIN_STYLE[NUWID] OR WIN_STYLE_TOOL
+ ENDIF
  IF (FLG AND 512)!=512THEN
   WindowOnCreate WND,CTL,0,0
  ENDIF
@@ -1795,6 +1936,9 @@
 COMMON DEF WindowMinMaxStyle()
  RETURN WIN_STYLE_MINMAX
 END
+COMMON DEF WindowNarrowStyle()
+ RETURN WIN_STYLE_NARROW
+END
 VAR WIN_TopLevelX2
 DEF IncTopLevelPos NUCID
  INC WIN_TopLevelX,CTL_FH1[NUCID]-1
@@ -1827,6 +1971,9 @@
   INC CTL_FH2[NUCID],1
   INC CTL_FW2[NUCID],1
  ENDIF
+ IF STYLE AND WIN_STYLE_NARROW THEN
+  DEC CTL_FH1[NUCID],6
+ ENDIF
  NewWindow CTL,NAME$,X,Y,WIDTH,HEIGHT,PARENT,FLG OR 512 OUT WND,ERR
  VAR MW=32
  IF MW>WIDTH THEN MW=WIDTH
@@ -1834,6 +1981,9 @@
  SetWindowMinSize WND,CTL_FW1[NUCID]+MW,WIN_FH2[NUWID]
  CTL_FH1[NUCID]=_H
  IF ERR THEN RETURN
+ IF STYLE AND WIN_STYLE_NARROW THEN
+  INC CTL_FH1[NUCID],6
+ ENDIF
  'MENU
  IF STYLE AND 1THEN
   NewMenu OUT WIN_MENU[NUWID],ERR
@@ -1841,18 +1991,18 @@
  ENDIF
  'RESIZABLE
  IF STYLE AND 2THEN
-  WIN_STYLE[NUWID]=WIN_STYLE_RESIZ
+  WIN_STYLE[NUWID]=WIN_STYLE[NUWID]OR WIN_STYLE_RESIZ
   DEC CTL_FW1[NUCID],1
   DEC CTL_FH2[NUCID],1
   DEC CTL_FW2[NUCID],1
  ENDIF
  'TRANS
  IF STYLE AND 4THEN
-  WIN_STYLE[NUWID]=WIN_STYLE_TRANS
+  WIN_STYLE[NUWID]=WIN_STYLE[NUWID]OR WIN_STYLE_TRANS
   NOIMPL "TRANS
   NewImage WIDTH,HEIGHT,WIN_IMAGE[NUWID]
  ENDIF
- WIN_STYLE[NUWID]=STYLE
+ WIN_STYLE[NUWID]=WIN_STYLE[NUWID]OR STYLE
  IF STYLE AND WIN_STYLE_HIDE THEN
   WIN_HIDE[NUWID]=1
   IF WIN_SP[NUWID]THEN SPHIDE WIN_SP[NUWID]AND 511
@@ -2026,30 +2176,35 @@
  WindowOnCreate WND,CTL
  VOID ActiveWindow(WND)
 END
-COMMON DEF NewDialogBoxWithArg(CTL,NAME$,WIDTH,HEIGHT,OWNER,FLAG,A1,A2)
+COMMON DEF NewDialogBoxWithArg CTL,NAME$,WIDTH,HEIGHT,OWNER,FLAG,A1,A2 OUT WND,E
  IF!CheckControl(CTL)THEN
-  RETURN CTL_INVALIDID
+  WND=0
+  E=CTL_INVALIDID
+  RETURN
  ENDIF
  IF!WIN_FREE THEN
-  RETURN WIN_NOALLOC
+  WND=0
+  E=WIN_NOALLOC
+  RETURN
  ENDIF
  VAR O=OWNER AND NUWIDMASK
  VAR AX=WIN_AX[O]+(WIN_WIDTH[O]-WIDTH)/2
  VAR AY=WIN_AY[O]+(WIN_HEIGHT[O]-HEIGHT)/2
- VAR WND,E
  IF AX<0THEN AX=0
  IF AY<0THEN AY=0
  NewWindow CTL,NAME$,AX,AY,WIDTH,HEIGHT,GetRootWindow(),WindowFrontFlag()OR 512 OUT WND,E
  IF FLAG THEN
   WIN_STYLE[WND AND NUWIDMASK]=WIN_STYLE_MODAL
  ENDIF
- IF E THEN RETURN E
+ IF E THEN RETURN
  InitWindow WND,A1,A2
  E=JoinWindowGroup(OWNER,WND)
- RETURN E
+ RETURN
 END
 COMMON DEF NewDialogBox(CTL,NAME$,WIDTH,HEIGHT,OWNER,FLAG)
- RETURN NewDialogBoxWithArg(CTL,NAME$,WIDTH,HEIGHT,OWNER,FLAG,0,0)
+ VAR E
+ NewDialogBoxWithArg CTL,NAME$,WIDTH,HEIGHT,OWNER,FLAG,0,0 OUT ,E
+ RETURN E
 END
 COMMON DEF NewModalDialogBox(CTL,NAME$,WIDTH,HEIGHT,OWNER)
  RETURN NewDialogBox(CTL,NAME$,WIDTH,HEIGHT,OWNER,1)
@@ -2129,7 +2284,8 @@
  INC W,16'MARGIN
  INC H,16'MARGIN
  VAR TEXT=AllocString(TEXT$)
- VAR RET=NewDialogBoxWithArg(CTL_MSGBOXCTL,TITLE$,W,H,WND,TRUE,FLAG,TEXT)
+ VAR RET
+ NewDialogBoxWithArg CTL_MSGBOXCTL,TITLE$,W,H,WND,TRUE,FLAG,TEXT OUT ,RET
  FreeString TEXT
  RETURN RET
 END
@@ -2209,17 +2365,18 @@
   WIN_GPARENT[NUWID]=0
   WIN_GPREV[NUWID]=0
   WIN_GNEXT[NUWID]=0
-  IF WIN_GROUP[NUWID]THEN
-   VAR G=WIN_GROUP[NUWID]
-   WHILE G
-    VAR ERR=DeleteWindow(NUWIDToWND(G))
-    IF ERR THEN RETURN ERR
-    G=WIN_GNEXT[G]
-   WEND
-    WIN_GROUP[NUWID]=0
-  ENDIF
-  
  ENDIF
+ IF WIN_GROUP[NUWID]THEN
+  VAR G=WIN_GROUP[NUWID]
+  WHILE G
+   VAR GN=WIN_GNEXT[G]
+   VAR ERR=DeleteWindow(NUWIDToWND(G))
+'   IF ERR THEN RETURN ERR
+   G=GN
+  WEND
+  WIN_GROUP[NUWID]=0
+ ENDIF
+ VOID DeleteWindowTimers(NUWIDToWND(NUWID))
  RETURN 0
 END
 
@@ -2264,13 +2421,30 @@
  WIN_ACTIVENUWID=NUWID
  RETURN 0
 END
+COMMON DEF IsFrontWindow(WND,WND2)
+ IF!CheckWindow(WND)THEN RETURN FALSE
+ IF!CheckWindow(WND2)THEN RETURN FALSE
+ IF GetParentWindow(WND)!=GetParentWindow(WND2)THEN RETURN FALSE
+ RETURN _IsFrontWindow(WND AND NUWIDMASK,WND2 AND NUWIDMASK)
+END
+DEF _IsFrontWindow(N1,N2)
+ WHILE N1
+  IF N1==N2 THEN
+   RETURN TRUE
+  ENDIF
+  N1=WIN_NEXT[N1]
+ WEND
+ RETURN FALSE
+END
 COMMON DEF FrontWindow(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
  VAR N,C=WIN_NEXT[NUWID]
  IF C THEN
+  VAR MOVEF=FALSE
   WHILE 1
    IF!WIN_NEXT[C]THEN 
+    IF WIN_NEXT[C]==NUWID THEN BREAK
     VAR NUP=WIN_PREV[NUWID]
     VAR NUN=WIN_NEXT[NUWID]
     IF NUP THEN
@@ -2282,6 +2456,7 @@
      IF NUP THEN WIN_NEXT[NUP]=NUN
      WIN_PREV[NUN]=NUP
     ENDIF
+    MOVEF=TRUE
     WIN_NEXT[C]=NUWID
     WIN_PREV[NUWID]=C
     WIN_NEXT[NUWID]=0
@@ -2292,11 +2467,21 @@
   IF WIN_SP[NUWID] THEN
    OTW_SPSORT
   ENDIF
-  RepaintAllWindow WND,0,0,0,0
+  IF MOVEF THEN RepaintAllWindow WND,0,0,0,0
+  
  ENDIF
  VAR G=WIN_GROUP[NUWID],E
  VAR HASMODAL
  WHILE G
+  IF WIN_STYLE[G]AND WIN_STYLE_TOOL THEN
+   IF!_IsFrontWindow(NUWID,G)THEN
+    E=FrontWindow(NUWIDToWND(G))
+   ENDIF
+  ENDIF
+  G=WIN_GNEXT[G]
+ WEND
+ G=WIN_GROUP[NUWID]
+ WHILE G
   IF WIN_STYLE[G]AND WIN_STYLE_MODAL THEN
    BEEP 
    IF WIN_SP[NUWID]THEN
@@ -2618,11 +2803,13 @@
   IF WIN_SP[NUWID]THEN
    WIN_SP[NUWID]=WIN_SP[NUWID] OR 512
   ENDIF
+  IF 0THEN
   GPAGE OTW_SP,OTW_GP
   GCOPY OTW_DP,WIN_AX[NUWID]-MX,WIN_AY[NUWID]-MY,WIN_AX[NUWID]-MX+WIN_WIDTH[NUWID],WIN_AY[NUWID]-MY+WIN_HEIGHT[NUWID],WIN_AX[NUWID],WIN_AY[NUWID],0
   GPAGE OTW_SP,OTW_DP
   GFILL WIN_AX[NUWID]-MX,WIN_AY[NUWID]-MY,WIN_AX[NUWID]-MX+WIN_WIDTH[NUWID],WIN_AY[NUWID]-MY+WIN_HEIGHT[NUWID],WIN_BKGND
   GCOPY OTW_GP,WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],WIN_AX[NUWID],WIN_AY[NUWID],0
+  ENDIF
   OTW_SPCHR NUWID
  ENDIF
  OTW_DrawMap WIN_PARENT[NUWID]
@@ -2773,6 +2960,22 @@
  IF!LEN(CTL_HANDLER$[WIN_CTL[NUWID]AND 4095,TYPE])THEN RETURN 0
  IF CTL_NDHNDLR[TYPE]THEN
   IF WIN_MSGCNT[NUWID,TYPE]THEN RETURN 0
+  'INC WIN_MSGCNT[NUWID,TYPE]
+ ENDIF
+ IF TYPE==CTL_PAINTHANDLER||TYPE==CTL_FRMPAINTHANDLER THEN
+  IF WIN_MSGCNT[NUWID,TYPE]THEN
+   VAR I=WIN_MSGE[NUWID]
+   WHILE WIN_MSGS[NUWID]!=I
+    IF WIN_MSGBUF[NUWID,I,0]==TYPE THEN
+     WIN_MSGBUF[NUWID,I,0]=-1
+    ENDIF
+    I=I+1
+    IF I>=WIN_MSGMAX THEN I=0
+   WEND
+   WIN_MSGCNT[NUWID,TYPE]=0
+   A1=0
+   A2=0
+  ENDIF
   INC WIN_MSGCNT[NUWID,TYPE]
  ENDIF
  WIN_MSGBUF[NUWID,WIN_MSGS[NUWID],0]=TYPE
@@ -2812,6 +3015,16 @@
 COMMON DEF SendStrNotifWindow(WND,A1,STR$)
  RETURN SendWindowEvent(WND,CTL_STRNOTIFHANDLER,A1,AllocString(STR$))
 END
+COMMON DEF GetWindowMouseX(WND)
+ IF!CheckWindow(WND)THEN RETURN 0
+ VAR NUWID=WND AND NUWIDMASK
+ RETURN OTW_MOUSEX-WIN_AX[NUWID]-WIN_FW1[NUWID]
+END
+COMMON DEF GetWindowMouseY(WND)
+ IF!CheckWindow(WND)THEN RETURN 0
+ VAR NUWID=WND AND NUWIDMASK
+ RETURN OTW_MOUSEY-WIN_AY[NUWID]-WIN_FH1[NUWID]
+END
 DEF MouseMoveWindow(NUWID)
  RETURN SendWindowEvent(NUWIDToWND(NUWID),CTL_MOUSEMVHANDLER,OTW_MOUSEX-WIN_AX[NUWID]-WIN_FW1[NUWID],OTW_MOUSEY-WIN_AY[NUWID]-WIN_FH1[NUWID])
 END
@@ -2916,6 +3129,8 @@
    G=WIN_GNEXT[G]
   WEND
  ENDIF
+ 'TIMER
+ IF WIN_TIMER[NUWID]THEN UpdateTimer WND
  IF WIN_MSGS[NUWID]==WIN_MSGE[NUWID]THEN RETURN 0
  VAR NUCID=WIN_CTL[NUWID] AND 4095
  WHILE WIN_MSGS[NUWID]!=WIN_MSGE[NUWID]
@@ -2924,6 +3139,7 @@
 
  INC WIN_MSGE[NUWID]
  IF WIN_MSGE[NUWID]>=WIN_MSGMAX THEN WIN_MSGE[NUWID]=0
+ IF TYPE==-1THEN CONTINUE
  IF TYPE==13THEN
   'CTL_STRNOTIFHANDLER
   CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],GetString$(WIN_MSGBUF[NUWID,S,2])
@@ -2932,15 +3148,32 @@
   CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],WIN_MSGBUF[NUWID,S,2]
  ENDIF
  IF WIN_WID[NUWID]<=0THEN RETURN WIN_INVALIDID
+ DEC WIN_MSGCNT[NUWID,TYPE]
  IF WIN_BEGIN[NUWID]THEN VOID GEndWindow(WND)
- IF CTL_NDHNDLR[TYPE]THEN
-  DEC WIN_MSGCNT[NUWID,TYPE]
- ENDIF
- IF S2!=WIN_MSGS[NUWID]THEN BREAK
+' IF CTL_NDHNDLR[TYPE]THEN
+'  DEC WIN_MSGCNT[NUWID,TYPE]
+' ENDIF
+ 'IF S2!=WIN_MSGS[NUWID]THEN BREAK
 'BREAK
  WEND
  RETURN 0
 END
+DEF UpdateTimer WND
+ VAR NUWID=WND AND NUWIDMASK
+ VAR T=WIN_TIMER[NUWID]AND NUWIDMASK
+ VAR M=MILLISEC
+ 
+ WHILE T
+  VAR NT=TIMER_NEXT[T]
+  IF TIMER_TM[T]+TIMER_TIMEOUT[T]<=M THEN
+   VAR TMR=ToTimer(T)
+   CALL TIMER_FUNC$[T],WND,TMR,TIMER_ARG[T]
+   VOID DeleteTimer(TMR)
+   BREAK
+  ENDIF
+  T=NT
+ WEND
+END
 COMMON DEF UpdateWindow(WND)
  VAR E=UpdateWindowOnly(WND)
  VAR NUWID=WND AND NUWIDMASK
@@ -3197,11 +3430,21 @@
  WING_SY=Y+WIN_FY[NUWID]
 END
 COMMON DEF GBeginDirect(WND)
- IF!CheckWindow(WND)THEN RETURN
+ IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  GPAGE OTW_SP,OTW_DDRAWPAGE
  GCLIP 1
  RETURN 0
 END
+COMMON DEF GetDirectGPAGE WND OUT PAGE1,PAGE2,ERR
+ IF!CheckWindow(WND)THEN
+  PAGE1=0
+  PAGE2=0
+  ERR=WIN_INVALIDID
+ ENDIF
+ ERR=0
+ PAGE1=OTW_SP
+ PAGE2=OTW_DDRAWPAGE
+END
 COMMON DEF GEndDirect(WND)
  IF!CheckWindow(WND)THEN RETURN
  VAR NUWID=WND AND NUWIDMASK
@@ -3648,6 +3891,10 @@
  VAR W=GetWindowFrameWidth(WND)
  VAR H2=WIN_HEIGHT[NUWID]-H
  VAR SH=FH-12'CTL_FH1[NUCID]
+ VAR NARROW=WIN_STYLE[NUWID]AND WIN_STYLE_NARROW
+ IF NARROW THEN
+  SH=FH-6
+ ENDIF
  VAR SW=WIN_FW2[NUWID]-2'CTL_FW1[NUCID]-CTL_FW2[NUCID]
  IF WIN_MENU[NUWID]THEN DEC SH,10'TODO:MENU_HEIGHT
  VAR C=WIN_BKGND
@@ -3656,13 +3903,20 @@
  'GCLSWindow WND,WIN_BACKGND[NUWID]
  VAR FRAMEBKGND=RGB(0,0,255)
  GFILLWindow WND,0,-H+1,W-2,-1,FRAMEBKGND
- GPRINTWindowCC WND,1,-H+2,GetWindowName$(WND),15
- GFILLWindow WND,W-09-1,-H+1,W-1,-H+10,RGB(224,0,0)
+ IF!NARROW THEN
+  GPRINTWindowCC WND,1,-H+2,GetWindowName$(WND),15
+  GFILLWindow WND,W-09-1,-H+1,W-1,-H+10,RGB(224,0,0)
+  GLINEWindow WND,W-08-1,-H+3,W-2-1,-H+9,C
+  GLINEWindow WND,W-7-1,-H+3,W-1-1,-H+9,C
+  GLINEWindow WND,W-2-1,-H+3,W-8-1,-H+9,C
+  GLINEWindow WND,W-1-1,-H+3,W-7-1,-H+9,C
+
+ ELSE
+  GFILLWindow WND,W-5-1,-H+1,W-1,-H+5,RGB(224,0,0)
+  GLINEWindow WND,W-4-1,-H+2,W-3,-H+4,C
+  GLINEWindow WND,W-4-1,-H+4,W-3,-H+2,C
+ ENDIF
  GLINEWindow WND,-1,-1,W-2,-1,RGB(0,0,0)
- GLINEWindow WND,W-08-1,-H+3,W-2-1,-H+9,C
- GLINEWindow WND,W-7-1,-H+3,W-1-1,-H+9,C
- GLINEWindow WND,W-2-1,-H+3,W-8-1,-H+9,C
- GLINEWindow WND,W-1-1,-H+3,W-7-1,-H+9,C
  GBOXWindow WND,-1,-H,W-1,H2,RGB(0,0,0)
  
  IF FW>1 THEN
@@ -4414,7 +4668,12 @@
 END
 COMMON DEF AddListBoxItem WND,ITEM$
  VAR L=GetWindowVar(WND,2)'
- IF!LISTSTR_FREE THEN RETURN
+ IF!LISTSTR_FREE THEN
+  LISTSTR_FREE=LEN(LISTSTR$)
+  PUSH LISTSTR$,ITEM$
+  PUSH LISTSTRNEXT,0
+  PUSH LISTSTRPREV,0
+ ENDIF
  IF L THEN LISTSTRNEXT[L]=LISTSTR_FREE
  SetWindowVar WND,2,LISTSTR_FREE
  IF!L THEN
@@ -4438,6 +4697,21 @@
  VAR SCR=GetWindowVar(WND,4)
  SetScrollBarSize SCR,LEN-1
 END
+COMMON DEF SelectListBoxItem WND,INDEX
+ VAR V=GetWindowVar(WND,1)
+ WHILE V
+  IF INDEX==0THEN
+   SetWindowVar WND,7,V
+   BREAK
+  ENDIF
+  V=LISTSTRNEXT[V]
+  DEC INDEX
+ WEND
+ VOID RepaintWindow(WND)
+ IF GetWindowVar(WND,6)THEN
+  VOID SendNotifWindow(GetOwnerWindow(WND),WND,1)
+ ENDIF
+END
 DEF ListBoxLMD WND,CT,T,X,Y
  VAR W=GetWindowWidth(WND)-1
  VAR H=GetWindowHeight(WND)
@@ -4683,11 +4957,15 @@
  DropDownListBtn WND,FALSE
  IF GENDWINDOW(WND)THEN RETURN
 END
+COMMON DEF GetDropDownListHeight()
+ RETURN 11
+END
 COMMON DEF GetDropDownListBox(WND)
  VAR LSTBOX=GetWindowVar(WND,0)
  IF!LSTBOX THEN
   VAR E
   NewWindow CTL_DRPDWNBOXCTL,"",0,0,0,0,GetRootWindow(),0 OUT LSTBOX,E
+  VOID SetWindowProperty(LSTBOX,"SHADOW",FALSE)
   IF E THEN @ERR
   SetWindowVar WND,0,LSTBOX
   IF JoinWindowGroup(WND,LSTBOX) THEN @ERR
@@ -4698,11 +4976,16 @@
 END
 DEF ShowDropDownListBox WND
  VAR LSTBOX=GetDropDownListBox(WND)
+ VAR PARENT=GetParentWindow(LSTBOX)
+ VAR PH=GetWindowHeight(PARENT)
  VAR X=GetWindowAX(WND)
  VAR Y=GetWindowAY(WND)
  VAR W=GetWindowWidth(WND)
  VAR H=64
  INC Y,GetWindowHeight(WND)
+ IF Y+H>=PH THEN
+  Y=GetWindowAY(WND)-H
+ ENDIF
  IF MoveResizeWindow(LSTBOX,X,Y,W,H)||FrontWindow(LSTBOX)||ShowWindow(LSTBOX)||FocusWindow(LSTBOX)THEN @ERR
  RETURN
  @ERR
@@ -4715,28 +4998,31 @@
   VOID SendNotifWindow(GetOwnerWindow(WND),A1,A2)
  ENDIF
 END
+COMMON DEF DropDownListDelete WND,CT,T,F,A2
+' VOID DeleteWindow(GetWindowVar(WND,0))
+END
 COMMON DEF DropDownListBoxChFocus WND,CT,T,F,A2
- IF!F&&!IsActiveWindow(WND) THEN
+ IF!IsActiveWindow(WND) THEN
   IF HideWindow(WND)THEN RETURN
   VOID RepaintWindow(GetWindowGroupOwner(WND))
  ENDIF
 END
-DEF NewHScrollBar PARENT,SIZ OUT WND,E
+COMMON DEF NewHScrollBar PARENT,SIZ OUT WND,E
  VAR W=GetWindowWidth(PARENT)
  VAR H=GetWindowHeight(PARENT)
- NewWindow GetHScrollBarControl(),"",0,H-8,W,8,PARENT,0 OUT WND,E
+ NewWindow GetHScrollBarControl(),"",0,H-GetScrollBarHeight(),W,GetScrollBarHeight(),PARENT,0 OUT WND,E
  SetWindowVar WND,1,SIZ
  SetScrollBarAutoResizeMode WND,1
 END
-DEF NewHVScrollBar PARENT,SIZH,SIZV OUT WNDH,WNDV,E
+COMMON DEF NewHVScrollBar PARENT,SIZH,SIZV OUT WNDH,WNDV,E
  VAR W=GetWindowWidth(PARENT)
  VAR H=GetWindowHeight(PARENT)
- NewWindow GetHScrollBarControl(),"",0,H-8,W-8,8,PARENT,0 OUT WNDH,E
+ NewWindow GetHScrollBarControl(),"",0,H-GetScrollBarHeight(),W-GetScrollBarWidth(),GetScrollBarHeight(),PARENT,0 OUT WNDH,E
  IF E THEN RETURN
  SetWindowVar WNDH,1,SIZH
  SetScrollBarAutoResizeMode WNDH,2
 
- NewWindow GetVScrollBarControl(),"",W-8,0,8,H-8,PARENT,0 OUT WNDV,E
+ NewWindow GetVScrollBarControl(),"",W-GetScrollBarWidth(),0,GetScrollBarWidth(),H-GetScrollBarHeight(),PARENT,0 OUT WNDV,E
  IF E THEN
   VOID DeleteWindow(WNDH)
   WNDV=0
@@ -4745,14 +5031,21 @@
  SetScrollBarAutoResizeMode WNDV,2
  SetWindowVar WNDV,1,SIZV
 END
-DEF NewVScrollBar PARENT,SIZ OUT WND,E
+COMMON DEF NewVScrollBar PARENT,SIZ OUT WND,E
  VAR W=GetWindowWidth(PARENT)
  VAR H=GetWindowHeight(PARENT)
- NewWindow GetVScrollBarControl(),"",W-8,0,8,H,PARENT,0 OUT WND,E
+ NewWindow GetVScrollBarControl(),"",W-GetScrollBarWidth(),0,GetScrollBarWidth(),H,PARENT,0 OUT WND,E
  SetWindowVar WND,1,SIZ
  SetScrollBarAutoResizeMode WND,1
 END
+COMMON DEF GetScrollBarHeight()
+ RETURN 8
+END
+COMMON DEF GetScrollBarWidth()
+ RETURN 8
+END
 COMMON DEF SetScrollBarSize W,SIZ
+ IF GetWindowVar(W,1)==SIZ THEN RETURN
  SetWindowVar W,1,SIZ
  VOID RepaintWindow(W)
  VAR POS=GetWindowVar(W,2)
@@ -4769,6 +5062,7 @@
  VOID RepaintWindow(W)
 END
 COMMON DEF SetScrollBarPosition W,POS
+ IF POS<0||POS>=GetScrollBarSize(W)THEN RETURN
  SetWindowVar W,2,POS
  VOID RepaintWindow(W)
 END
@@ -4868,6 +5162,9 @@
  VOID ReleaseCapture(W)
  HSCRBARPainter W,C,0,0,0
 END
+DEF HSCRBARTimer WND,TIMER,ARG
+ HSCRBARLMouseDown WND,0,-1,GetWindowMouseX(WND),GetWindowMouseY(WND)
+END
 DEF HSCRBARLMouseDown W,C,T,Y,_
  VAR ID=GetWindowVar(W,3)
  IF ID<8THEN
@@ -4882,7 +5179,7 @@
    SetWindowVar W,3,ID
   ENDIF
   VOID SetCapture(W)
-  VOID LMouseDownWindow(W)
+  SetTimer W,16,0,"HSCRBARTimer" OUT ,'LMouseDownWindow(W)
  ELSE
   SetWindowVar W,3,0
   RETURN
@@ -4922,8 +5219,8 @@
   VAR PW=GetParentWindow(W)
   VAR WIDTH=GetWindowWidth(PW)
   VAR HEIGHT=GetWindowHeight(PW)
-  IF MODE==2THEN WIDTH=WIDTH-8
-  VOID MoveResizeWindow(W,0,HEIGHT-8,WIDTH,8)
+  IF MODE==2THEN WIDTH=WIDTH-GetScrollBarWidth()
+  VOID MoveResizeWindow(W,0,HEIGHT-GetScrollBarHeight(),WIDTH,GetScrollBarHeight())
  ENDIF
 END
 DEF VSCRBARPARENT W,C,T,TYP,A
@@ -4934,8 +5231,8 @@
   VAR PW=GetParentWindow(W)
   VAR WIDTH=GetWindowWidth(PW)
   VAR HEIGHT=GetWindowHeight(PW)
-  IF MODE==2THEN HEIGHT=HEIGHT-8
-  VOID MoveResizeWindow(W,WIDTH-8,0,8,HEIGHT)
+  IF MODE==2THEN HEIGHT=HEIGHT-GetScrollBarHeight()
+  VOID MoveResizeWindow(W,WIDTH-GetScrollBarWidth(),0,GetScrollBarWidth(),HEIGHT)
  ENDIF
 END
 
@@ -5017,6 +5314,9 @@
  VOID ReleaseCapture(W)
  VSCRBARPainter W,C,0,0,0
 END
+DEF VSCRBARTimer WND,TIMER,ARG
+ VSCRBARLMouseDown WND,0,-1,GetWindowMouseX(WND),GetWindowMouseY(WND)
+END
 DEF VSCRBARLMouseDown W,C,T,X,Y
  VAR ID=GetWindowVar(W,3)
  IF ID<8THEN
@@ -5031,7 +5331,7 @@
    SetWindowVar W,3,ID
   ENDIF
   VOID SetCapture(W)
-  VOID LMouseDownWindow(W)
+  SetTimer W,16,0,"VSCRBARTimer" OUT ,'LMouseDownWindow(W)
  ELSE
   SetWindowVar W,3,0
   RETURN
@@ -5062,6 +5362,14 @@
   VOID SendNotifWindow(GetParentWindow(W),W,Y)
  ENDIF
 END
+COMMON DEF GSPOITWindow(WND,X,Y)
+ IF!CheckWindow(WND)THEN RETURN 0
+ INC X,WIN_FX[WND AND NUWIDMASK]
+ INC Y,WIN_FY[WND AND NUWIDMASK]
+ VAR NUWID=RGBToShort(GSPOIT(OTW_MOUSEX,OTW_MOUSEY+240))
+ IF NUWID!=(WND AND NUWIDMASK)THEN RETURN 0
+ RETURN GSPOIT(X,Y)
+END
 VAR OTW_MOUSESIZE
 VAR OTW_MOUSE_HOMEX
 VAR OTW_MOUSE_HOMEY
@@ -5322,85 +5630,15 @@
   OTW_DDRAWPAGE=2
   PrintConsoleln "Init screen..."
   MouseClipDef
-  GPAGE OTW_SP,OTW_SP
-  GPRIO 1023
-  GCLS
-  GCLS RGB(0,192,0)
-  GCLS 
-  VAR I,J
-' FOR J=0TO 2
-'  FOR I=0TO 240/4
-'  GLINE 0,I+60*J,400,I+60*J,&HFF000000 OR(I*8<<J*8)XOR &HFFFFFF'RGB(0,I*4,0)
-'    GLINE 0,I+60*J,400,I+60*J,RGB(0,I*4,I*4) '
- ' NEXT
-' NEXT
-  GCLS RGB(0,192,0)
-  GCLS RGB(0,224,224)
-  GCLS RGB(0,128,128)
-
-
-
-  GCLS #BLUE
-  FOR I=-400TO 400 STEP 2
-   GLINE I,0,I+400,400,RGB(0,0,255)'RGB(255,255,255)
-  NEXT
-  'GCLS RGB(191,191,191)
-  GPUTCHR 0,2,"otya window system 5.0",2,4
-  FOR I=-400TO 400 STEP 2
-   GLINE I,0,I+400,400,RGB(0,0,255)'RGB(255,255,255)
-  NEXT
-  GPUTCHR 2,0,"otya window system 5.0",2,4
-  GPUTCHR 0,240-8,"One moment please...",1,1
-  GPUTCHR 1,240-8,"One moment please...",1,1
+  BACKCOLOR RGB(0,128,128)
+  VISIBLE 1,0,0,1
   GPAGE OTW_SP,OTW_DP
   GPRIO 1023
- ' GCLS RGB(0,192,128)
-' GCLS RGB(0,0,255)
-'GCLS 
-  GPRIO 1023
-  GOTO @_
-  XSCREEN 2,512,2
-  DISPLAY 1
-  CLS
-  VISIBLE 1,0,1,0
-  LOCATE 0,25
-  ?":LEFT CLICK"
-  ?":RIGHT CLICK(UNUSED)"
-  ?"TOUCH:CURSOR
-  BGSCREEN 0,25,15
-  BGSCALE 0,19.5/25,19.5/25'1
-  GCLS 'RGB(255,0,0)
-  BACKCOLOR RGB(0,192,128)
-  VAR X,Y
-  I=0
-  FOR Y=0TO 14
-   FOR X=0TO 24
-    BGPUT 0,X,Y,I
-    INC I
-   NEXT
-  I=I+7
-  NEXT
-  BGPAGE OTW_DP
-  VAR K$="KEYBOARD"
-  OTW_KX=39*8
-  OTW_KY=0
-  OTW_KX2=40*8
-  OTW_KY2=LEN(K$)*8
-  ATTR 1
-  FOR I=0TO LEN(K$)-1
-   COLOR 15,8
-   LOCATE 39,I
-   ?K$[I];
-  NEXT
-  COLOR 15,0
-  ATTR 0
-  DISPLAY 0
-  @_
   OTW_INIT=TRUE
   VAR E
-  NewControl "DESKTOP" OUT WIN_ROOTCTL,E
+  NewControl "ROOT" OUT WIN_ROOTCTL,E
 ' E=SetControlPainter(WIN_ROOTCTL,"DesktopPainter")
-  NewTopLevelWindow WIN_ROOTCTL,"DESKTOP",400-1,240-1 OUT WIN_ROOTWND,E
+  NewTopLevelWindow WIN_ROOTCTL,"ROOT",400-1,240-1 OUT WIN_ROOTWND,E
   ExtendControl "HELLO",GetWindowControl() OUT TSTCTL,E
 ' NewTopLevelWindow TSTCTL,"HELLO",164,164 OUT TSTWND,E
 ' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND2,E
@@ -5428,7 +5666,7 @@
   OTW_SHADOWSP=1
   SPSET OTW_SHADOWSP,0
   OTW_MOUSE=-1
-  OTW_INITSP 0
+  OTW_INITSP 5
   OTW_MOVWINSP=2
   SPSET OTW_MOVWINSP,0
   SPHIDE OTW_MOVWINSP
@@ -6060,6 +6298,17 @@
 VAR OTW_MOUSEOLDX,OTW_MOUSEOLDY
 VAR OTW_MOUSEOLDST
 VAR OTW_OLDSTICKMCNT
+COMMON DEF MoveMouse X,Y
+ OTW_MOUSEX=X
+ OTW_MOUSEY=Y
+ IF OTW_MOUSEX<OTW_MOUSECLIPX THEN OTW_MOUSEX=OTW_MOUSECLIPX
+ IF OTW_MOUSEY<OTW_MOUSECLIPY THEN OTW_MOUSEY=OTW_MOUSECLIPY
+ IF OTW_MOUSEX>=OTW_MOUSECLIPX2 THEN OTW_MOUSEX=OTW_MOUSECLIPX2
+ IF OTW_MOUSEY>=OTW_MOUSECLIPY2 THEN OTW_MOUSEY=OTW_MOUSECLIPY2
+ SPOFS OTW_MOUSESP,OTW_MOUSEX,OTW_MOUSEY
+ OTW_MOUSEX#=OTW_MOUSEX
+ OTW_MOUSEY#=OTW_MOUSEY
+END
 COMMON DEF UpdateMouse
  VAR S,X,Y
  TOUCH OUT S,X,Y
@@ -10658,7 +10907,7 @@
  NewWindow OTYDOCLCRBTN_CTL,"",X,0,11,11,WND,WindowOwnerDrawFlag() OUT BTNR,E
  INC X,12
  VAR DRP
- NewWindow GetDropDownListControl(),"",X,0,56,11,WND,0 OUT DRP,E
+ NewWindow GetDropDownListControl(),"",X,0,56,GetDropDownListHeight(),WND,0 OUT DRP,E
  VAR LST=GetDropDownListBox(DRP)
  AddListBoxItem LST,"H1"
  AddListBoxItem LST,"H2"
@@ -11059,7 +11308,8 @@
  void(repaintWindow(WND))
 END
 DEF OTYFIL_NEWFOL WND,FLG
- VAR E=NewDialogBoxWithArg(OTYFILNEWFOLCTL,"",40+15*8+4,40,WND,TRUE,FLG,0)
+ VAR E
+ NewDialogBoxWithArg OTYFILNEWFOLCTL,"",40+15*8+4,40,WND,TRUE,FLG,0OUT ,E
 END
 COMMON DEF OTYFILNOTIF WND,CTL,T,ID,POS
  IF ID==MenuNotifID() THEN
@@ -11381,14 +11631,23 @@
  ClearListBox L
  FOR I=0TO LEN(F$)-1
   IF F$[I][0]==" "&&T==1THEN CONTINUE
-  IF F$[I][1]=="*"&&T==2THEN CONTINUE
+  IF F$[I][0]=="*"&&T==2THEN CONTINUE
   AddListBoxItem L,F$[I]
  NEXT
 END
-COMMON DEF FileDialogCreate WND,C,T,ID,__
+COMMON DEF FileDialogCreate WND,C,T,ID,LIST
  VAR E,L
  NewWindow GetListBoxControl(),"L",0,0,116,64,WND,0 OUT L,E
+
  SetWindowVar WND,0,L
+ IF LIST THEN
+  IF 0THEN DIM LIST$[0]
+  NewWindow GetDropDownListControl(),"L",0,65,116,GetDropDownListHeight(),WND,0 OUT L,E
+  VAR LB=GetDropDownListBox(L)
+  LIST$=GetSBArray(LIST)
+  AddArrayListBoxItem LB,LIST$
+  SelectListBoxItem LB,0
+ ENDIF
  INITFILEDIALOGLISTBOX WND
  VAR F=LEFT$(GetWindowName$(WND),4)=="Save"
  SetWindowVar WND,1,F
@@ -11407,7 +11666,8 @@
  ENDIF
  IF TYPE$!="TXT"&&TYPE$!="DAT"THEN TYPE$=""
  VAR TITLE$=TYPE$
- VAR E=NewDialogBoxWithArg(CTL_FILDIA,"Save "+TYPE$,170,74,OWNER,TRUE,ID,0)
+ VAR E
+ NewDialogBoxWithArg CTL_FILDIA,"Save "+TYPE$,170,74,OWNER,TRUE,ID,0OUT ,E
  RETURN E
 END
 COMMON DEF OpenFileDialog(OWNER,TYPE$,ID)
@@ -11416,9 +11676,42 @@
  ENDIF
  IF TYPE$!="TXT"&&TYPE$!="DAT"THEN TYPE$=""
  VAR TITLE$=TYPE$
- VAR E=NewDialogBoxWithArg(CTL_FILDIA,"Open "+TYPE$,170,64,OWNER,TRUE,ID,0)
+ VAR E
+ NewDialogBoxWithArg CTL_FILDIA,"Open "+TYPE$,170,64+10,OWNER,TRUE,ID,0OUT ,E
  RETURN E
 END
+'[0]="All:*"
+'[1]="GRP:*.GRP"
+'[2]="GRPF:*.GRPF"
+COMMON DEF OpenFileDialogEx OWNER,TYPE$,ID,LIST$[] OUT E
+ IF!CTL_FILDIA THEN
+  OTW_FileDialog
+ ENDIF
+ IF TYPE$!="TXT"&&TYPE$!="DAT"THEN TYPE$=""
+ VAR TITLE$=TYPE$
+ VAR WND
+ VAR ARY=AllocSBArray()
+ SetSBArray ARY,LIST$
+ NewDialogBoxWithArg CTL_FILDIA,"Open "+TYPE$,170,64+GetDropDownListHeight()+1,OWNER,TRUE,ID,ARY OUT WND,E
+ FreeSBArray ARY
+ 'GetWindowVar 
+END
+COMMON DEF FindWindowByControl(WND,CTL,EXTEND)
+ WND=GetChildWindow(WND)
+ WHILE WND
+  IF EXTEND THEN
+   IF IsControlExtend(GetControl(WND),CTL) THEN
+    RETURN WND
+   ENDIF
+  ELSE
+   IF GetControl(WND)==CTL THEN
+    RETURN WND
+   ENDIF
+  ENDIF
+  WND=GetNextWindow(WND)
+ WEND
+ RETURN 0
+END
 
 '=========
 DEF OTW_LOADFONT
@@ -13588,6 +13881,11 @@
  ODE_PAINTER WND,CTL,TYP,0,0
 END
 COMMON DEF ODE_PAINTER WND,CTL,TYP,XY,WH
+ 'delete loading window
+ VAR WGM=GetWindowGroupMember(WND)
+ IF WGM THEN
+  VOID DeleteWindow(WGM)
+ ENDIF
  VAR X,Y,W,H
  VAR SW,SH
  SW=GetWindowWidth(WND)
@@ -13687,6 +13985,13 @@
  ARY=GetWindowVar(WND,ODE_WV_ICONS)
  SetSBArray ARY,ICONS
 END
+VAR ODELD_CTL
+COMMON DEF ODELD_PAINTER WND,CTL,TYP,A1,A2
+ VOID CallBaseControlHandler(WND,CTL,TYP,A1,A2)
+ VOID GBeginWindow(WND)
+ GPRINTWindow WND,0,0,"Starting...",#BLACK
+ VOID GEndWindow(WND)
+END
 COMMON DEF I_ODE
  IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
   PrintConsole "Require window system"+LF$()
@@ -13695,21 +14000,23 @@
  ENDIF
  VAR WND,E
  IF!ODE_CTL THEN
- IF 0THEN
- VAR I
- ODEPAL=NewArray(65536)
- FOR I=0TO 65535
-  VAR R=((I>>11AND 31)<<3)*0
-  VAR G=((I>>6AND 31)<<3)*0
-  VAR B=((I>>1AND 31)<<3)*1
-  VAR A=(I AND 1)*255
-  ODEPAL[I]=RGB(A,R,G,B)'R>>3<<11OR G>>3<<6OR B>>3<<1OR !!A
- NEXT
- ENDIF
+  IF 0THEN
+   VAR I
+   ODEPAL=NewArray(65536)
+   FOR I=0TO 65535
+    VAR R=((I>>11AND 31)<<3)*0
+    VAR G=((I>>6AND 31)<<3)*0
+    VAR B=((I>>1AND 31)<<3)*1
+    VAR A=(I AND 1)*255
+    ODEPAL[I]=RGB(A,R,G,B)'R>>3<<11OR G>>3<<6OR B>>3<<1OR !!A
+   NEXT
+  ENDIF
   RC_OTYFIL
   NewImage OTYFILICOTXT,16,16 OUT ODE_IMAGE_TXT,E
   NewImage OTYFILICODAT,16,16 OUT ODE_IMAGE_DAT,E
   NewImage OTYFILICODIR,16,16 OUT ODE_IMAGE_DIR,E
+  ExtendControl "otya desktop environment:LOADING",GetWindowControl() OUT ODELD_CTL,E
+  E=SetControlPainter(ODELD_CTL,"ODELD_PAINTER")
   NewControl "otya desktop environment" OUT ODE_CTL,E
   E=SetControlPainter(ODE_CTL,"ODE_PAINTER")
   E=SetControlLMouseDownHandler(ODE_CTL,"ODE_LMD")
@@ -13724,7 +14031,12 @@
   ODE_IY=8
  ENDIF
  VAR RWND=GetRootWindow()
+ VAR LDWND
+ NewWindow ODELD_CTL,"desktop",(GetWindowWidth(RWND)-100)DIV 2,(GetWindowHeight(RWND)-32)DIV 2,100,32,RWND,WindowFrontFlag() OUT LDWND,E
+ IF UpdateWindow(LDWND)THEN ENDIF
  NewWindow ODE_CTL,"",0,0,GetWindowWidth(RWND),GetWindowHeight(RWND),RWND,WindowBackFlag() OUT WND,E
+ JoinWindowGroup WND,LDWND OUT E
+
  SetWindowVar WND,ODE_WV_FILES,AllocSBArray()
  SetWindowVar WND,ODE_WV_CURRENT,-1
  SetWindowVar WND,ODE_WV_ICONS,AllocSBArray()
@@ -13890,8 +14202,18 @@
 VAR PAINT_SCRV
 VAR PAINT_CMOUSEX
 VAR PAINT_CMOUSEY
+VAR PAINT_CMOUSEX2
+VAR PAINT_CMOUSEY2
 VAR PAINT_TOOL
 VAR PAINT_ZOOM
+VAR PAINT_COLOR
+VAR PAINT_BACK
+VAR PAINT_PAL_RLNK
+VAR PAINT_PAL_GLNK
+VAR PAINT_PAL_BLNK
+VAR PAINT_PAL_RSCR
+VAR PAINT_PAL_GSCR
+VAR PAINT_PAL_BSCR
 VAR PAINT_
 VAR PAINT_SIZE
 
@@ -13906,8 +14228,18 @@
  PAINT_SCRV=I:INC I
  PAINT_CMOUSEX=I:INC I
  PAINT_CMOUSEY=I:INC I
+ PAINT_CMOUSEX2=I:INC I
+ PAINT_CMOUSEY2=I:INC I
  PAINT_TOOL=I:INC I
  PAINT_ZOOM=I:INC I
+ PAINT_COLOR=I:INC I
+ PAINT_BACK=I:INC I
+ PAINT_PAL_RLNK=I:INC I
+ PAINT_PAL_GLNK=I:INC I
+ PAINT_PAL_BLNK=I:INC I
+ PAINT_PAL_RSCR=I:INC I
+ PAINT_PAL_GSCR=I:INC I
+ PAINT_PAL_BSCR=I:INC I
  
  PAINT_SIZE=I:INC I
  SetSBArray P,NewArray(PAINT_SIZE)
@@ -13968,50 +14300,79 @@
   H=SH
  ENDIF
  VAR Z=A[PAINT_ZOOM]
+ VAR Z#=(Z/PAINT_ZOOM_BASE)
  VAR HIMG=A[PAINT_IMAGE]
  VAR IW=GetImageWidth(HIMG)
  VAR IH=GetImageHeight(HIMG)
+ SetScrollBarSize A[PAINT_SCRH],MAX(0,(IW-(SW-GetScrollBarWidth()) DIV Z#))
+ SetScrollBarSize A[PAINT_SCRV],MAX(0,IH-(SH-GetScrollBarHeight()) DIV Z#)
+ VAR PT=A[PAINT_TOOL]
  IF Z!=PAINT_ZOOM_BASE THEN
   IF 0THEN DIM IMG[0]
 
   GetImageArray(HIMG) OUT IMG,
   IF GBeginDirect(WND)THEN @ERR
   GCLIP 1,X,Y,X+W,Y+H
-  GCLS -1
+  VAR R,G,B
+  RGBREAD A[PAINT_BACK] OUT R,G,B
+  R=R XOR 255
+  G=G XOR 255
+  B=B XOR 255
+  GCLS A[PAINT_BACK]'-1
   VAR IX,IY
   VAR Z2=Z DIV PAINT_ZOOM_BASE
   VAR IX2=SX+SW DIV Z2
   VAR IY2=SY+SH DIV Z2
   VAR DX
   VAR DY
-  VAR GRC=RGB(0,0,0)
+  VAR GRC=RGB(R,G,B)
+  VAR GRC2=RGB(128,128,128)
 
   IX2=MIN(IX2,IW-1)
   IY2=MIN(IY2,IH-1)
-  FOR IX=SX TO IX2
-   GLINE DX,Y,DX,Y+H,GRC
-   DX=DX+Z2
-  NEXT
+  GCLIP 1,MAX(0,-SX*Z#),MAX(0,-SY*Z#),MAX(0,MIN(511,(IW-SX-1)*Z#)),MAX(0,MIN(511,(IH-SY-1)*Z#))
+  VAR GRX=8
+  VAR GRY=8
   FOR IY=SY TO IY2
-   DX=0
-   GLINE X,DY,X+W,DY,GRC
    FOR IX=SX TO IX2
     VAR C=IMG[IX+IY*IW]
     IF C AND 1THEN
-     GFILL DX,DY,DX+Z2-1,DY+Z2-1,RGB(C>>11AND 31<<3,C>>6AND 31<<3,C>>1AND 31<<3)
+     GFILL DX,DY,DX+Z2-1,DY+Z2-1,RGB((C>>11AND 31)<<3,(C>>6AND 31)<<3,(C>>1AND 31)<<3)
     ENDIF
     DX=DX+Z2
    NEXT
+   IF !(IY MOD GRY) THEN
+    GLINE X,DY,X+W,DY,GRC2
+   ELSE
+    GLINE X,DY,X+W,DY,GRC
+   ENDIF
    UpdateMouse
    DY=DY+Z2
+   DX=0
   NEXT
+  
+  FOR IX=SX TO IX2
+   IF !(IX MOD GRX) THEN
+    GLINE DX,Y,DX,Y+H,GRC2
+   ELSE
+    GLINE DX,Y,DX,Y+H,GRC
+   ENDIF
+   DX=DX+Z2
+  NEXT
   IF GCopyDirect(WND,X,Y,X+W,Y+H,X,Y,0)THEN @ERR
  ELSE
   IF GBeginWindow(WND)THEN @ERR
-  GCLSWindow WND,GetWindowBackColor(WND)
-  GFILLWindow WND,-SX,-SY,IW-SX-1,IH-SY-1,-1
+  GCLSWindow WND,A[PAINT_BACK]'GetWindowBackColor(WND)
+'  GFILLWindow WND,-SX,-SY,IW-SX-1,IH-SY-1,A[PAINT_BACK]
   GLOADImageWindow WND,-SX,-SY,A[PAINT_IMAGE],0
  ENDIF
+ VAR CW=GetCapture()
+ 'tool preview
+ IF CW==WND THEN
+  IF PT==PAINT_MENU_LINE THEN
+   GLINEWindow WND,A[PAINT_CMOUSEX]-SX*Z#,A[PAINT_CMOUSEY]-SY*Z#,A[PAINT_CMOUSEX2]-SX*Z#,A[PAINT_CMOUSEY2]-SY*Z#,A[PAINT_COLOR]
+  ENDIF
+ ENDIF
  IF GEndWindow(WND)THEN @ERR
  RETURN
  @ERR
@@ -14023,21 +14384,30 @@
  CX=26
  CY=0
  CW=W-CX-0
- CH=H-16
+ CH=H'16
 END
-COMMON DEF PAINTCANVASLMD WND,CTL,TYP,X,Y
+COMMON DEF PAINTCANVASLMD WND,CTL,TYP,MX,MY
  IF 0THEN DIM A[0]
  PAINT_GET WND OUT A
+
  VAR Z#=(A[PAINT_ZOOM]/PAINT_ZOOM_BASE)
  VAR SY=GetScrollBarPosition(A[PAINT_SCRV])*Z#
  VAR SX=GetScrollBarPosition(A[PAINT_SCRH])*Z#
- X=X+SX
- Y=Y+SY
+ VAR X=MX+SX
+ VAR Y=MY+SY
  VAR PT=A[PAINT_TOOL]
- IF PT==PAINT_MENU_PEN||PT==PAINT_MENU_ERASER THEN
+ IF PT==PAINT_MENU_PEN||PT==PAINT_MENU_ERASER||PT==PAINT_MENU_LINE THEN
   A[PAINT_CMOUSEX]=X
   A[PAINT_CMOUSEY]=Y
   VOID SetCapture(WND)
+  PAINTCANVASMMOVE WND,CTL,TYP,MX,MY
+ ELSEIF PT==PAINT_MENU_HAND THEN
+  A[PAINT_CMOUSEX]=MX DIV Z#
+  A[PAINT_CMOUSEY]=MY DIV Z#
+  VOID SetCapture(WND)
+ ELSEIF PT==PAINT_MENU_ZOOMOUT THEN
+  A[PAINT_ZOOM]=MAX(A[PAINT_ZOOM]-PAINT_ZOOM_BASE*4,PAINT_ZOOM_BASE)
+  VOID RepaintWindow(WND)
  ELSEIF PT==PAINT_MENU_ZOOMIN THEN
   INC A[PAINT_ZOOM],PAINT_ZOOM_BASE*4
   VOID RepaintWindow(WND)
@@ -14045,9 +14415,30 @@
 END
 COMMON DEF PAINTCANVASLMU WND,CTL,TYP,X,Y
  VOID ReleaseCapture(WND)
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ VAR Z#=(A[PAINT_ZOOM]/PAINT_ZOOM_BASE)
+ VAR SY=GetScrollBarPosition(A[PAINT_SCRV])*Z#
+ VAR SX=GetScrollBarPosition(A[PAINT_SCRH])*Z#
+ VAR W=GetWindowWidth(WND)
+ VAR H=GetWindowHeight(WND)
+ X=X+SX
+ Y=Y+SY
+ VAR PT=A[PAINT_TOOL]
+ IF PT==PAINT_MENU_LINE THEN
+  IF 0THEN DIM I[0]
+
+  GetImageArray(A[PAINT_IMAGE]) OUT I,
+  VAR IW=GetImageWidth(A[PAINT_IMAGE])
+  VAR IH=GetImageHeight(A[PAINT_IMAGE])
+ 
+  VAR C=A[PAINT_COLOR]
+  GLINEArray I,IW,IH,A[PAINT_CMOUSEX] DIV Z#,A[PAINT_CMOUSEY] DIV Z#,X DIV Z#,Y DIV Z#,C
+  PAINTCANVASPAINT WND,CTL,TYP,0,0
+ ENDIF
 END
 
-COMMON DEF PAINTCANVASMMOVE WND,CTL,TYP,X,Y
+COMMON DEF PAINTCANVASMMOVE WND,CTL,TYP,OX,OY
  IF GetCapture()!=WND THEN
   RETURN
  ENDIF
@@ -14058,30 +14449,43 @@
  VAR SX=GetScrollBarPosition(A[PAINT_SCRH])*Z#
  VAR W=GetWindowWidth(WND)
  VAR H=GetWindowHeight(WND)
- X=X+SX
- Y=Y+SY
+ VAR X=OX+SX
+ VAR Y=OY+SY
  VAR X1=MIN(A[PAINT_CMOUSEX],X)
  VAR Y1=MIN(A[PAINT_CMOUSEY],Y)
  VAR X2=MAX(A[PAINT_CMOUSEX],X)
  VAR Y2=MAX(A[PAINT_CMOUSEY],Y)
- IF 0THEN DIM I[0]
+ VAR PT=A[PAINT_TOOL]
+ IF PT==PAINT_MENU_HAND THEN
+  SetScrollBarPosition A[PAINT_SCRH],GetScrollBarPosition(A[PAINT_SCRH])+A[PAINT_CMOUSEX]-OX DIV Z#
+  SetScrollBarPosition A[PAINT_SCRV],GetScrollBarPosition(A[PAINT_SCRV])+A[PAINT_CMOUSEY]-OY DIV Z#
+  PAINTCANVASPAINT WND,CTL,TYP,0,0
+  A[PAINT_CMOUSEX]=OX DIV Z#
+  A[PAINT_CMOUSEY]=OY DIV Z#
+ ELSEIF PT==PAINT_MENU_LINE THEN
+  A[PAINT_CMOUSEX2]=X
+  A[PAINT_CMOUSEY2]=Y
+  PAINTCANVASPAINT WND,CTL,TYP,0,0
+ ELSEIF PT==PAINT_MENU_PEN||PT==PAINT_MENU_ERASER THEN
+  IF 0THEN DIM I[0]
 
- GetImageArray(A[PAINT_IMAGE]) OUT I,
- VAR IW=GetImageWidth(A[PAINT_IMAGE])
- VAR IH=GetImageHeight(A[PAINT_IMAGE])
+  GetImageArray(A[PAINT_IMAGE]) OUT I,
+  VAR IW=GetImageWidth(A[PAINT_IMAGE])
+  VAR IH=GetImageHeight(A[PAINT_IMAGE])
  
- VAR C=RGB(0,0,0)
- IF A[PAINT_TOOL]==PAINT_MENU_ERASER THEN C=0
- GLINEArray I,IW,IH,A[PAINT_CMOUSEX] DIV Z#,A[PAINT_CMOUSEY] DIV Z#,X DIV Z#,Y DIV Z#,C
-' IF GBeginDirect(WND)THEN RETURN
-'GCLIP 1,X1,Y1,X2,Y2
-' GLOADImage 0,0,A[PAINT_IMAGE],1
-' GLINE A[PAINT_CMOUSEX],A[PAINT_CMOUSEY],X,Y
-' GSAVEImage 0,0,A[PAINT_IMAGE]
- PAINTCANVASPAINT WND,CTL,TYP,0,0
+  VAR C=A[PAINT_COLOR]
+  IF A[PAINT_TOOL]==PAINT_MENU_ERASER THEN C=0
+  GLINEArray I,IW,IH,A[PAINT_CMOUSEX] DIV Z#,A[PAINT_CMOUSEY] DIV Z#,X DIV Z#,Y DIV Z#,C
+ ' IF GBeginDirect(WND)THEN RETURN
+ 'GCLIP 1,X1,Y1,X2,Y2
+ ' GLOADImage 0,0,A[PAINT_IMAGE],1
+ ' GLINE A[PAINT_CMOUSEX],A[PAINT_CMOUSEY],X,Y
+ ' GSAVEImage 0,0,A[PAINT_IMAGE]
+  PAINTCANVASPAINT WND,CTL,TYP,0,0
 
- A[PAINT_CMOUSEX]=X
- A[PAINT_CMOUSEY]=Y
+  A[PAINT_CMOUSEX]=X
+  A[PAINT_CMOUSEY]=Y
+ ENDIF
 END
 
 COMMON DEF PAINTRESIZE WND,CTL,TYP,A1,A2
@@ -14092,6 +14496,53 @@
  VOID ResizeWindow(A[PAINT_CANVAS],CW,CH)
 END
 VAR PAINTNEWDLGCTL
+VAR PAINTOFDID
+DEF PAINT_LOADGRP WND,F$
+ VAR ERR,PAGE1,PAGE2
+ GetSBFile F$ OUT F$,ERR
+ IF ERR THEN RETURN
+ IF MID$(F$,0,4)!="DAT:"THEN RETURN
+ IF GBeginDirect(WND)THEN @ERR
+ GetDirectGPAGE WND OUT PAGE1,PAGE2,ERR
+ IF ERR THEN @ERR
+ VAR C=RGB(0,RND(16)*8,RND(32)*8,RND(32)*8)
+ GCLS C
+ 
+ F$="GRP"+STR$(PAGE2)+MID$(F$,3,&H7FFFFFFF)
+ LOAD F$,0
+ VAR WIDTH
+ FOR WIDTH=0TO 511
+  IF GSPOIT(WIDTH,0)==C THEN
+   BREAK
+  ENDIF
+ NEXT
+ VAR HEIGHT
+ FOR HEIGHT=0TO 511
+  IF GSPOIT(0,HEIGHT)==C THEN
+   BREAK
+  ENDIF
+ NEXT
+ PAINT_NEW WND,WIDTH,HEIGHT
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ IF 0THEN DIM IMG[0]
+
+ GetImageArray A[PAINT_IMAGE] OUT IMG,
+ GSAVE PAGE2,0,0,WIDTH,HEIGHT,IMG,1
+ @ERR
+END
+COMMON DEF PAINTSTRNOTIF WND,C,T,A1,A2$
+ IF A1==PAINTOFDID THEN
+  VAR EXT$=GetFileExtension$(A2$)
+  ToUpper EXT$
+  IF EXT$=="GRP"||EXT$=="GRPF"THEN
+   'GRP
+   PAINT_LOADGRP WND,A2$
+  ELSE
+   NewDialogBoxWithArg PAINTNEWDLGCTL,"New",170,35,WND,TRUE,GetWindowVar(WND,0),0 OUT ,
+  ENDIF
+ ENDIF
+END
 COMMON DEF PAINTNOTIF WND,C,T,A1,A2
  IF A1==MenuNotifID()THEN
   PAINT_MENU WND,A2
@@ -14104,8 +14555,15 @@
  @ERR
  RETURN
  @NEW
- VOID NewDialogBoxWithArg(PAINTNEWDLGCTL,"New",170,35,WND,TRUE,GetWindowVar(WND,0),0) RETURN
+ NewDialogBoxWithArg PAINTNEWDLGCTL,"New",170,35,WND,TRUE,GetWindowVar(WND,0),0 OUT ,
+ RETURN
  @OPEN
+  PAINTOFDID=1
+  DIM LIST$[0]
+  PUSH LIST$,"Auto"
+  PUSH LIST$,"GRP"
+  PUSH LIST$,"Raw image"
+  VOID OpenFileDialogEx(WND,"DAT",PAINTOFDID,LIST$)
  RETURN
  @SAVE
  RETURN
@@ -14184,6 +14642,244 @@
  SetScrollBarSize A[PAINT_SCRV],H
  VOID RepaintWindow(A[PAINT_CANVAS])
 END
+COMMON DEF PAINTCANVASBUTTON WND,CTL,TYP,A1,A2
+ IF 0THEN DIM A[0]
+ A=PAINT_GET(WND)
+ VAR Z=A[PAINT_ZOOM]DIV PAINT_ZOOM_BASE
+ IF A1 AND #LEFT THEN
+  MoveMouse GetMouseX()-Z,GetMouseY()
+ ENDIF
+ IF A1 AND #RIGHT THEN
+  MoveMouse GetMouseX()+Z,GetMouseY()
+ ENDIF
+ IF A1 AND #UP THEN
+  MoveMouse GetMouseX(),GetMouseY()-Z
+ ENDIF
+ IF A1 AND #DOWN THEN
+  MoveMouse GetMouseX(),GetMouseY()+Z
+ ENDIF
+END
+VAR PAINTCOLORCTL
+COMMON DEF PAINTCOLORNOTIF WND,CTL,TYP,A1,A2
+ VAR N$=GetWindowName$(A1)
+ 
+ IF IsControlExtend(GetControl(A1),GetHScrollBarControl())&&(N$=="R"||N$=="G"||N$=="B")THEN
+  IF 0THEN DIM PAL[0]
+  PAL=GetSBArray(GetWindowVar(WND,5))
+  VAR SELC=GetWindowVar(WND,4)
+  VAR OLDR,OLDG,OLDB
+  RGBREAD PAL[SELC]OUT OLDR,OLDG,OLDB
+  VAR R=GetScrollBarPosition(GetWindowVar(WND,1))
+  VAR G=GetScrollBarPosition(GetWindowVar(WND,2))
+  VAR B=GetScrollBarPosition(GetWindowVar(WND,3))
+
+  IF 0THEN DIM A[0]
+  A=PAINT_GET(WND)
+  VAR RLNK=IsCheckedButton(A[PAINT_PAL_RLNK])
+  VAR GLNK=IsCheckedButton(A[PAINT_PAL_GLNK])
+  VAR BLNK=IsCheckedButton(A[PAINT_PAL_BLNK])
+  IF N$=="R"&&!RLNK THEN
+   GLNK=FALSE
+   BLNK=FALSE
+  ELSEIF N$=="G"&&!GLNK THEN
+   RLNK=FALSE
+   BLNK=FALSE
+  ELSEIF N$=="B"&&!BLNK THEN
+   RLNK=FALSE
+   GLNK=FALSE
+  ENDIF
+  VAR DIFF
+  IF N$=="R"THEN RLNK=FALSE:DIFF=R-OLDR DIV 8
+  IF N$=="G"THEN GLNK=FALSE:DIFF=G-OLDG DIV 8
+  IF N$=="B"THEN BLNK=FALSE:DIFF=B-OLDB DIV 8
+  IF RLNK THEN
+   R=R+DIFF
+  ENDIF
+  IF GLNK THEN
+   G=G+DIFF
+  ENDIF
+  IF BLNK THEN
+   B=B+DIFF
+  ENDIF
+  PAL[SELC]=RGB(R*8,G*8,B*8)
+  PAINTPAL_SELECT WND,SELC
+  IF SELC==0THEN
+   A[PAINT_BACK]=PAL[0]
+   VOID RepaintWindow(PAINT_GET(WND)[PAINT_CANVAS])
+  ENDIF
+  VOID RepaintWindow(WND)
+ ENDIF
+END
+COMMON DEF PAINTCOLORCREATE WND,CTL,TYP,A1,A2
+'--- low color palette
+@PALDATA
+DATA 255,255,255
+DATA  63, 63, 63
+DATA 255, 31,  0
+DATA 255, 95,192
+DATA   0, 63,240
+DATA 127, 63,255
+DATA   0,191,255
+DATA 151, 94, 46
+'
+DATA 255,160,  0
+DATA 255,203,167
+DATA   0,127,  0
+DATA   0,240, 31
+DATA 255,224,  0
+DATA 191,191,191
+DATA   0,  0,  0
+DATA 255,255,255
+ VAR Y=(65 DIV 6)*6+8
+ VAR X=10
+ DIM PAL[66]
+ FILL PAL,#BLACK
+ VAR I
+ RESTORE @PALDATA
+ FOR I=0TO 15
+  VAR R,G,B
+  READ R,G,B
+  PAL[I]=RGB(R,G,B)
+ NEXT
+ VAR A=AllocSBArray()
+ SetSBArray A,PAL
+ SetWindowVar WND,5,A
+ SetWindowVar WND,0,A1
+ VAR W=GetWindowWidth(WND)
+ VAR H=GetWindowHeight(WND)
+ IF 0THEN DIM P[0]
+ P=PAINT_GET(WND)
+ P[PAINT_BACK]=PAL[0]
+ VAR BW,E
+ NewWindow GetToggleButtonControl(),"R",0,Y,X-1,8,WND,0 OUT BW,E
+ P[PAINT_PAL_RLNK]=BW
+ VAR CW
+ NewWindow GetHScrollBarControl(),"R",X,Y,W-X,GetScrollBarHeight(),WND,0 OUT CW,E
+ SetWindowVar WND,1,CW
+ P[PAINT_PAL_RSCR]=CW
+ Y=Y+10
+ SetScrollBarSize CW,31
+ NewWindow GetHScrollBarControl(),"G",X,Y,W-X,GetScrollBarHeight(),WND,0 OUT CW,E
+ NewWindow GetToggleButtonControl(),"G",0,Y,X-1,8,WND,0 OUT BW,E
+ P[PAINT_PAL_GLNK]=BW
+ SetWindowVar WND,2,CW
+ P[PAINT_PAL_GSCR]=CW
+ Y=Y+10
+ SetScrollBarSize CW,31
+ NewWindow GetHScrollBarControl(),"B",X,Y,W-X,GetScrollBarHeight(),WND,0 OUT CW,E
+ NewWindow GetToggleButtonControl(),"B",0,Y,X-1,8,WND,0 OUT BW,E
+ P[PAINT_PAL_BLNK]=BW
+ P[PAINT_PAL_BSCR]=CW
+ SetWindowVar WND,3,CW
+ SetScrollBarSize CW,31
+
+ PAINTPAL_SELECT WND,14
+END
+DEF PAINTPAL_SELECT WND,SELC
+ IF 0THEN DIM PAL[0]
+ PAL=GetSBArray(GetWindowVar(WND,5))
+ VAR R,G,B
+ RGBREAD PAL[SELC]OUT R,G,B
+ SetScrollBarPosition GetWindowVar(WND,1),R DIV 8
+ SetScrollBarPosition GetWindowVar(WND,2),G DIV 8
+ SetScrollBarPosition GetWindowVar(WND,3),B DIV 8
+ SetWindowVar WND,4,SELC
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ IF SELC THEN
+  A[PAINT_COLOR]=PAL[SELC]
+ ELSE
+  A[PAINT_COLOR]=RGB(0,0,0,0)
+ ENDIF
+END
+COMMON DEF PAINTCOLORLMD WND,CTL,TYP,X,Y
+ VOID SetCapture(WND)
+ 'RGB
+ 'YATTSUKE HANTEI
+ 
+ PAINTCOLORMM WND,CTL,TYP,X,Y
+END
+COMMON DEF PAINTCOLORMM WND,CTL,TYP,X,Y
+ IF GetCapture()!=WND THEN RETURN
+ VAR SELC=GetWindowVar(WND,4)
+ VAR W=GetWindowWidth(WND)
+ VAR IX=X DIV 10
+ VAR IY=Y DIV 6
+ VAR I=IX+IY*(W DIV 10)
+ IF 0>I||I>=66THEN RETURN
+ IF SELC==I THEN RETURN
+ IF 0THEN DIM PAL[0]
+ PAL=GetSBArray(GetWindowVar(WND,5))
+ PAINTPAL_SELECT WND,I
+ VOID RepaintWindow(WND)
+END
+COMMON DEF PAINTCOLORPAINTER WND,CTL,TYP,XY,WH
+ IF CallBaseControlHandler(WND,CTL,TYP,XY,WH)THEN @ERR
+ VAR X,Y,W,H
+ VAR SW,SH
+ SW=GetWindowWidth(WND)
+ SH=GetWindowHeight(WND)
+ IF WH THEN
+  SplitInt WH OUT W,H
+  SplitInt XY OUT X,Y
+ ELSE
+  W=SW
+  H=SH
+ ENDIF
+X=0Y=0
+  W=SW
+  H=SH
+ IF GBeginDirect(WND)THEN @ERR
+ VAR I
+ GCLIP 1,X,Y,X+W,Y+H
+ GCLS GetWindowBackColor(WND)
+ VAR SELC=GetWindowVar(WND,4)
+ IF 0THEN DIM PAL[0]
+ PAL=GetSBArray(GetWindowVar(WND,5))
+ VAR R,G,B
+ RGBREAD PAL[SELC]OUT R,G,B
+ FOR I=0TO 65
+  VAR IX=I MOD 6
+  VAR IY=I DIV 6
+  GFILL IX*10+1,IY*6+1,IX*10+9,IY*6+5,PAL[I]
+  IF I==0THEN
+   VAR SR,SG,SB
+   RGBREAD PAL[I]OUT SR,SG,SB
+   SR=SR XOR 255
+   SG=SG XOR 255
+   SB=SB XOR 255
+   GLINE IX*10+1,IY*6+1,IX*10+9,IY*6+5,RGB(SR,SG,SB)
+  ENDIF
+  IF I==SELC THEN
+   RGBREAD PAL[I]OUT SR,SG,SB
+   SR=SR XOR 255
+   SG=SG XOR 255
+   SB=SB XOR 255
+   GBOX IX*10+1,IY*6+1,IX*10+9,IY*6+5,RGB(SR,SG,SB)
+'   GBOX  IX*10,IY*6,IX*10+10,IY*6+6,#BLACK
+  ENDIF
+ NEXT
+ IY=IY*6+8
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ IY=IY+10
+ IY=IY+10
+ IY=IY+10
+ GFILL W-2,IY+1,W-31,IY+20,RGB(R,G,B)
+ GBOX W-2+1,IY+1-1,W-31-1,IY+20+1,RGB(0,0,0)
+ VAR S$=STR$(R)
+ GPUTCHR 8*3-LEN(S$)*8,IY,S$,#RED
+ IY=IY+8
+ S$=STR$(G)
+ GPUTCHR 8*3-LEN(S$)*8,IY,S$,#GREEN
+ IY=IY+8
+ S$=STR$(B)
+ GPUTCHR 8*3-LEN(S$)*8,IY,S$,#BLUE
+ IY=IY+8
+ IF GCopyDirect(WND,X,Y,X+W,Y+H,X,Y,0)THEN @ERR
+ IF GEndWindow(WND)THEN @ERR
+ @ERR
+END
 COMMON DEF I_PAINT
  IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
   PrintConsole "Require window system"+LF$()
@@ -14198,19 +14894,29 @@
   IF E THEN @ERR_CTL
   ExtendControl"PAINTNEWDLGCTL",GetWindowControl() OUT PAINTNEWDLGCTL,E
   IF E THEN @ERR_CTL
+  ExtendControl"PAINTCOLORCTL",GetWindowControl() OUT PAINTCOLORCTL,E
+  IF E THEN @ERR_CTL
   IF SetControlDeleteHandler(PAINTCTL,"PAINTDELETE")THEN @ERR_CTL
   IF SetControlResizeHandler(PAINTCTL,"PAINTRESIZE")THEN @ERR_CTL
   IF SetControlNotifHandler(PAINTCTL,"PAINTNOTIF")THEN @ERR_CTL
+  IF SetControlStrNotifHandler(PAINTCTL,"PAINTSTRNOTIF")THEN @ERR_CTL
   IF SetControlCreateHandler(PAINTCANVASCTL,"PAINTCANVASCREATE")THEN @ERR_CTL
   IF SetControlPainter(PAINTCANVASCTL,"PAINTCANVASPAINT")THEN @ERR_CTL
   IF SetControlMouseMoveHandler(PAINTCANVASCTL,"PAINTCANVASMMOVE")THEN @ERR_CTL
   IF SetControlLMouseDownHandler(PAINTCANVASCTL,"PAINTCANVASLMD")THEN @ERR_CTL
   IF SetControlLMouseUpHandler(PAINTCANVASCTL,"PAINTCANVASLMU")THEN @ERR_CTL
   IF SetControlNotifHandler(PAINTCANVASCTL,"PAINTCANVASNOTIF")THEN @ERR_CTL
+  IF SetControlButtonHandler(PAINTCANVASCTL,"PAINTCANVASBUTTON")THEN @ERR_CTL
   IF SetControlCreateHandler(PAINTNEWDLGCTL,"PAINTNEWDLGCREATE")THEN @ERR_CTL
   IF SetControlNotifHandler(PAINTNEWDLGCTL,"PAINTNEWDLGNOTIF")THEN @ERR_CTL
+  IF SetControlPainter(PAINTCOLORCTL,"PAINTCOLORPAINTER")THEN @ERR_CTL
+  IF SetControlCreateHandler(PAINTCOLORCTL,"PAINTCOLORCREATE")THEN @ERR_CTL
+  IF SetControlNotifHandler(PAINTCOLORCTL,"PAINTCOLORNOTIF")THEN @ERR_CTL
+  IF SetControlLMouseDownHandler(PAINTCOLORCTL,"PAINTCOLORLMD")THEN @ERR_CTL
+  IF SetControlMouseMoveHandler(PAINTCOLORCTL,"PAINTCOLORMM")THEN @ERR_CTL
  ENDIF
- NewTopLevelStyleWindow PAINTCTL,"PAINT",128,64,WINDOWRESIZABLESTYLE()OR WINDOWMENUSTYLE()OR WindowMinMaxStyle() OUT WND,E
+ VAR COLORWND
+ NewStyleWindow PAINTCTL,"PAINT",0,0,300,128,GetRootWindow(),WindowFrontFlag(),WINDOWRESIZABLESTYLE()OR WINDOWMENUSTYLE()OR WindowMinMaxStyle() OUT WND,E
  IF E THEN @ERR
  VAR CX,CY,CW,CH
  VAR CWND
@@ -14218,7 +14924,6 @@
  NewWindow PAINTCANVASCTL,"",CX,CY,CW,CH,WND,WindowBackFlag() OUT CWND,E
  IF E THEN @ERR
  SetProcessVar WND
- 
  VAR P
  PAINT_ALLOC OUT P
  SetWindowVar WND,0,P
@@ -14229,6 +14934,12 @@
  A[PAINT_CANVAS]=CWND
  PAINT_ZOOM_BASE=100
  A[PAINT_ZOOM]=PAINT_ZOOM_BASE
+ A[PAINT_COLOR]=RGB(0,0,0)
+ NewStyleWindowArg PAINTCOLORCTL,"COLOR",GetWindowWidth(GetRootWindow())-80,GetWindowY(WND),60,120,GetRootWindow(),WindowToolFlag(),WindowNarrowStyle(),P,0 OUT COLORWND,E
+ 'NewWindow PAINTCOLORCTL,"COLOR",GetWindowWidth(GetRootWindow())-80,GetWindowY(WND),60,120,GetRootWindow(),WindowToolFlag() OUT COLORWND,E
+ IF E THEN @ERR
+ JoinWindowGroup WND,COLORWND OUT E
+ IF E THEN @ERR
  VAR WIDTH=400
  VAR HEIGHT=240
  VAR IMG
@@ -14282,6 +14993,7 @@
   RETURN
  @ERR
   VOID DeleteControl(WND)
+  VOID DeleteControl(COLORWND)
   VOID DeleteControl(CWND)
   ExitProcess 1
 END
