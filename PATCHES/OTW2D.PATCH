diff -u OTW.TXT OTW2D
--- OTW.TXT
+++ OTW2D
@@ -222,8 +222,10 @@
 VAR IMAGE_IDCNT
 VAR IMAGE_FREE
 VAR IMAGE_NOALLOC
+VAR IMAGE_INVALIDID
 DEF OTW_IMAGE_INITARRAY
  IMAGE_NOALLOC=1
+ IMAGE_INVALIDID=2
  IMAGE_MAX=256
  IMAGE_IDCNT=1
  IMAGE_FREE=1
@@ -259,6 +261,7 @@
 'Select
 DIM MENU_SEL[0]
 DIM MENU_ID[0]
+DIM MENU_CHECKROW[0]
 VAR MENU_MAX
 VAR MENU_IDCNT
 VAR MENU_FREE
@@ -266,8 +269,13 @@
 VAR MENU_STYLE_SEPARATOR
 VAR MENU_SEPARATOR_HEIGHT
 VAR MENU_STYLE_CHILD
+VAR MENU_STYLE_RADIO
+VAR MENU_STYLE_CHECK
+VAR MENU_STYLE_CHECKED
 VAR MENU_CHILD_MARK_W
 VAR MENU_CHILD_MARK_H
+VAR MENU_CHECK_W
+VAR MENU_RADIO_W
 VAR MENU_NOTIFID
 DEF OTW_MENU_INITARRAY
  PrintConsoleln "Init menu..."
@@ -281,6 +289,9 @@
  MENU_STYLE_SEPARATOR=1
  MENU_SEPARATOR_HEIGHT=4
  MENU_STYLE_CHILD=2
+ MENU_STYLE_RADIO=4
+ MENU_STYLE_CHECK=8
+ MENU_STYLE_CHECKED=16
  MENU_CHILD_MARK_W=4
  MENU_CHILD_MARK_H=4
  MENU_IVAR=NewArray(MENU_ITEMMAX)
@@ -295,11 +306,14 @@
  MENU_LAST=NewArray(MENU_MAX)
  MENU_SEL=NewArray(MENU_MAX)
  MENU_SHOW=NewArray(MENU_MAX)
+ MENU_CHECKROW=NewArray(MENU_MAX)
  MENU_IDCNT=0
  MENU_ID=NewArray(MENU_MAX)
  MENU_NEXT=MENU_ITEM
  OTW_INITLIST MENU_NEXT
  MENU_FREE=1
+ MENU_CHECK_W=8
+ MENU_RADIO_W=8
  MENU_NOTIFID=&HDEADFEED
  VAR E
 END
@@ -415,6 +429,7 @@
 VAR CTL_RESIZEHANDLER
 VAR CTL_FRMPAINTHANDLER
 VAR CTL_CHLDWNDHANDLER
+VAR CTL_PRNTWNDHANDLER
 VAR CTL_LBTNFLG
 VAR CTL_RBTNFLG
 VAR CTL_BTNDWNFLG
@@ -437,11 +452,13 @@
 
 VAR CTL_MSGBOXCTL
 
+VAR CTL_HSCRBARCTL
+
 DEF OTW_CTL_INITARRAY
  PrintConsoleln "Init control..."
  CTL_STYLE_NCFOCUS=1
  CTL_MAX=64
- CTL_HANDLER_MAX=20
+ CTL_HANDLER_MAX=21
  CTL_NAME$     =NewArray$(CTL_MAX)
  CTL_DAT       =NewArray(CTL_MAX)
  CTL_FW1       =NewArray(CTL_MAX)
@@ -461,6 +478,7 @@
  NewControl "TXTBOX" OUT CTL_TXTBOXCTL,E
  NewControl "LABEL" OUT CTL_LABELCTL,E
  NewControl "VSCRBAR" OUT CTL_VSCRBARCTL,E
+ NewControl "HSCRBAR" OUT CTL_HSCRBARCTL,E
  CTL_PAINTHANDLER=0
 ' CTL_NDHNDLR[CTL_PAINTHANDLER]=TRUE
  CTL_LBTNDWNHANDLER=1
@@ -483,6 +501,7 @@
  CTL_RESIZEHANDLER=17
  CTL_FRMPAINTHANDLER=18
  CTL_CHLDWNDHANDLER=19
+ CTL_PRNTWNDHANDLER=20
  'A1=,A2=bit16~31Y,Xbit0~15
  CTL_LBTNFLG=4
  CTL_RBTNFLG=8
@@ -512,6 +531,7 @@
  E=SetControlPainter(CTL_VSCRBARCTL,"VSCRBARPainter")
  E=SetControlLMouseUpHandler(CTL_VSCRBARCTL,"VSCRBARLMouseUP")
  E=SetControlLMouseDownHandler(CTL_VSCRBARCTL,"VSCRBARLMouseDown")
+ E=SetControlParentWindowHandler(CTL_VSCRBARCTL,"VSCRBARPARENT")
 
 
  ExtendControl "ToggleButton",CTL_BUTTONCTL OUT CTL_TGLBTNCTL,E
@@ -548,6 +568,12 @@
  ExtendControl "MESSAGEBOX",GetWindowControl() OUT CTL_MSGBOXCTL,E
  E=SetControlCreateHandler(CTL_MSGBOXCTL,"MessageBoxOnCreate")
  E=SetControlNotifHandler(CTL_MSGBOXCTL,"MessageBoxOnNotif")
+
+ E=SetControlPainter(CTL_HSCRBARCTL,"HSCRBARPainter")
+ E=SetControlLMouseUpHandler(CTL_HSCRBARCTL,"HSCRBARLMouseUP")
+ E=SetControlLMouseDownHandler(CTL_HSCRBARCTL,"HSCRBARLMouseDown")
+ E=SetControlParentWindowHandler(CTL_HSCRBARCTL,"HSCRBARPARENT")
+
  PrintConsoleln "Init textbox..."
  INIT_TXTBOXEX
  CTL_CID[0]=&Hdeadbeef
@@ -730,6 +756,9 @@
 COMMON DEF GetDropDownListControl()
  RETURN CTL_DRPDWNCTL
 END
+COMMON DEF GetHScrollBarControl()
+ RETURN CTL_HSCRBARCTL
+END
 'CONTROL
 COMMON DEF FindControl(NAME$)
  VAR I
@@ -906,6 +935,11 @@
  CTL_HANDLER$[CTL AND 4095,CTL_CHLDWNDHANDLER]=HANDLER$
  RETURN 0
 END
+COMMON DEF SetControlParentWindowHandler(CTL,HANDLER$)
+ IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
+ CTL_HANDLER$[CTL AND 4095,CTL_PRNTWNDHANDLER]=HANDLER$
+ RETURN 0
+END
 DEF SetControlFrameSize(CTL,W1,H1,W2,H2)
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
  VAR C=CTL AND 4095
@@ -1017,8 +1051,8 @@
  IF PTR==-1 THEN IMG=0:E=IMAGE_NOALLOC:RETURN
  INC IMAGE_IDCNT
  IMAGE_ID[IMAGE_FREE]=IMAGE_IDCNT
- IMAGE_HEIGHT[IMAGE_FREE]=WIDTH
- IMAGE_WIDTH[IMAGE_FREE]=HEIGHT
+ IMAGE_WIDTH[IMAGE_FREE]=WIDTH
+ IMAGE_HEIGHT[IMAGE_FREE]=HEIGHT
  IMAGE_PTR[IMAGE_FREE]=PTR
  IMG=IMAGE_FREE OR IMAGE_IDCNT<<12
  IMAGE_FREE=IMAGE_NEXT[IMAGE_FREE]
@@ -1042,6 +1076,40 @@
  VAR I=IMG AND 4095
  GLOAD X,Y,IMAGE_WIDTH[I],IMAGE_HEIGHT[I],GetSBArray(IMAGE_PTR[I]),1,TF
 END
+COMMON DEF GLOADImagePalette X,Y,IMG,PAL,TF
+ IF!CheckImage(IMG)THEN RETURN
+ VAR I=IMG AND 4095
+ GLOAD X,Y,IMAGE_WIDTH[I],IMAGE_HEIGHT[I],GetSBArray(IMAGE_PTR[I]),PAL,TF
+END
+COMMON DEF GSAVEImage X,Y,IMG
+ IF!CheckImage(IMG)THEN RETURN
+ VAR I=IMG AND 4095
+ GSAVE X,Y,IMAGE_WIDTH[I],IMAGE_HEIGHT[I],GetSBArray(IMAGE_PTR[I]),1
+END
+COMMON DEF GetImageWidth(IMG)
+ IF!CheckImage(IMG)THEN
+  RETURN 0
+ ENDIF
+ VAR I=IMG AND 4095
+ RETURN IMAGE_WIDTH[I]
+END
+COMMON DEF GetImageHeight(IMG)
+ IF!CheckImage(IMG)THEN
+  RETURN 0
+ ENDIF
+ VAR I=IMG AND 4095
+ RETURN IMAGE_HEIGHT[I]
+END
+COMMON DEF GetImageArray IMG OUT ARY,ERR
+ IF!CheckImage(IMG)THEN
+  ERR=IMAGE_INVALIDID
+  ARY=NewArray(0)
+  RETURN
+ ENDIF
+ VAR I=IMG AND 4095
+ ARY=GetSBArray(IMAGE_PTR[I])
+ ERR=0
+END
 VAR MENU_NOALLOC
 COMMON DEF NewMenu OUT MENU,E
  IF !MENU_FREE THEN MENU=0:E=MENU_NOALLOC:RETURN
@@ -1050,6 +1118,7 @@
  MENU_ID[MENU_FREE]=MENU_IDCNT
  MENU_HEIGHT[MENU_FREE]=4
  MENU_WIDTH[MENU_FREE]=0
+ MENU_CHECKROW[MENU_FREE]=FALSE
  VAR M=MENU_FREE
  MENU=MENU_FREE OR MENU_IDCNT<<12
  MENU_FREE=MENU_NEXT[MENU_FREE]
@@ -1171,6 +1240,15 @@
  IF STYLE AND MENU_STYLE_CHILD THEN
   W=W+MENU_CHILD_MARK_W
  ENDIF
+ IF STYLE AND MENU_STYLE_RADIO THEN
+  IF !MENU_CHECKROW[N]THEN INC MENU_WIDTH[N],MENU_CHECK_W
+  MENU_CHECKROW[N]=TRUE
+ ELSEIF STYLE AND MENU_STYLE_CHECK THEN
+  IF !MENU_CHECKROW[N]THEN INC MENU_WIDTH[N],MENU_CHECK_W
+  MENU_CHECKROW[N]=TRUE
+ ENDIF
+  IF MENU_CHECKROW[N]THEN INC W,MENU_CHECK_W
+
  IF MENU_WIDTH[N]<W THEN
   MENU_WIDTH[N]=W
  ENDIF
@@ -1184,13 +1262,103 @@
  IF!MENU_LAST[N]THEN RETURN
  MENU_ICHILD[MENU_LAST[N]]=SUBMENU' AND 4095
 END
+COMMON DEF AddRadioMenuItem MENU,STR$,IVAR,CHECKED
+ VAR S=MENU_STYLE_RADIO
+ IF CHECKED THEN S=S OR MENU_STYLE_CHECKED
+ AddMenuItemStyle MENU,STR$,IVAR,S
+ VAR N=MENU AND 4095
+ IF!MENU_LAST[N]THEN RETURN
+END
+COMMON DEF IsCheckedMenuItem(MENU,IVAR)
+ VAR N=MENU AND 4095
+ VAR I=MENU_ITEM[N]
+ WHILE I
+  IF MENU_IVAR[I]==IVAR THEN
+   IF MENU_ISTYLE[I]AND MENU_STYLE_CHECKED THEN
+    RETURN TRUE
+   ENDIF
+   RETURN FALSE
+  ENDIF
+  I=MENU_INEXT[I]
+ WEND
+ RETURN FALSE
+END
+COMMON DEF GetCheckedRadioMenuItem MENU,IVAR OUT IVAR2
+ IF!CheckMenu(MENU)THEN RETURN
+ VAR N=MENU AND 4095
+ VAR I=MENU_ITEM[N]
+ IVAR2=0
+ WHILE I
+  IF MENU_IVAR[I]==IVAR&&MENU_ISTYLE[I]AND MENU_STYLE_RADIO THEN
+   BREAK
+  ENDIF
+  I=MENU_INEXT[I]
+ WEND
+ IF!I THEN RETURN
+ WHILE I
+  IF!(MENU_ISTYLE[I]AND MENU_STYLE_RADIO)THEN
+   I=MENU_INEXT[I]
+   BREAK
+  ENDIF
+  I=MENU_IPREV[I]
+ WEND
+
+ WHILE MENU_ISTYLE[I]AND MENU_STYLE_RADIO
+  IF MENU_ISTYLE[I]AND MENU_STYLE_CHECKED THEN
+   IVAR2=I
+   RETURN
+  ENDIF
+  I=MENU_INEXT[I]
+ WEND
+ RETURN
+END
+COMMON DEF AddCheckMenuItem MENU,STR$,IVAR,CHECKED
+ VAR S=MENU_STYLE_CHECK
+ IF CHECKED THEN S=S OR MENU_STYLE_CHECKED
+ AddMenuItemStyle MENU,STR$,IVAR,S
+ VAR N=MENU AND 4095
+ IF!MENU_LAST[N]THEN RETURN
+END
 COMMON DEF CheckMenu(MENU)
  RETURN MENU_ID[MENU AND 4095]==MENU>>12
 END
+
+DEF MENU_RADIO_UNCHECK S
+ VAR I=S
+ WHILE 1
+  I=MENU_IPREV[I]
+  IF!I THEN BREAK
+  IF!(MENU_ISTYLE[I]AND MENU_STYLE_RADIO)THEN
+   BREAK
+  ENDIF
+  MENU_ISTYLE[I]=MENU_ISTYLE[I] AND NOT MENU_STYLE_CHECKED
+ WEND
+ I=S
+ WHILE 1
+  I=MENU_INEXT[I]
+  IF!I THEN BREAK
+  IF!(MENU_ISTYLE[I]AND MENU_STYLE_RADIO)THEN
+   BREAK
+  ENDIF
+  MENU_ISTYLE[I]=MENU_ISTYLE[I] AND NOT MENU_STYLE_CHECKED
+ WEND
+ 
+END
 DEF MenuLMouseUp WND,C,T,X,Y
  VAR M=GetWindowVar(WND,0)
  IF X>0&&Y>0&&X<MENU_WIDTH[M]&&Y<MENU_HEIGHT[M]THEN
-  VOID SendNotifWindow(GetWindowGroupOwner(WND),MENU_NOTIFID,MENU_IVAR[MENU_SEL[M]])
+  VAR S=MENU_SEL[M]
+  IF!(MENU_ISTYLE[S] AND MENU_STYLE_CHILD)THEN
+   IF MENU_ISTYLE[S] AND MENU_STYLE_CHECK THEN
+    VAR SF=!(MENU_ISTYLE[S] AND MENU_STYLE_CHECKED)*MENU_STYLE_CHECKED
+    MENU_ISTYLE[S]=(MENU_ISTYLE[S]AND NOT MENU_STYLE_CHECKED) OR SF
+   ELSEIF MENU_ISTYLE[S] AND MENU_STYLE_RADIO THEN
+    MENU_RADIO_UNCHECK S
+    MENU_ISTYLE[S]=MENU_ISTYLE[S]OR MENU_STYLE_CHECKED
+   
+   ENDIF
+   VOID SendNotifWindow(GetWindowGroupOwner(WND),MENU_NOTIFID,MENU_IVAR[S])
+  ENDIF
  ENDIF
  VOID DeleteWindow(WND)
  VOID ActiveWindow(MENU_SHOW[M])
@@ -1233,9 +1401,47 @@
  VAR BEG,G,SELF=0'SELECT FLAG
  VAR W=GetWindowWidth(WND)
 
+ VAR IC
  WHILE I
   IF MENU_ISTYLE[I]AND MENU_STYLE_SEPARATOR THEN
    INC Y2,MENU_SEPARATOR_HEIGHT
+   GOTO @SKIP2
+  ENDIF
+  INC Y2,8
+  IF Y1<=Y&&Y2>Y THEN
+   SELF=1
+   IF OS!=I&&!G THEN 
+   MENU_SEL[M]=I
+   IF MENU_ICHILD[I]THEN
+    IC=MENU_ICHILD[I]
+    IF CheckMenu(IC)THEN
+     ShowSubMenu M,IC,Y1
+    ENDIF
+   G=0
+   ENDIF
+   IF!OS THEN BREAK
+   ENDIF
+  ELSE
+   IF I==OS THEN
+    IF MENU_ICHILD[OS]THEN
+     IC=MENU_ICHILD[OS]
+     IF CheckMenu(IC)THEN
+      VOID DeleteWindow(NUWIDToWND(MENU_NUWID[IC AND 4095]))
+     ENDIF
+    ENDIF
+    OS=0
+    IF BEG THEN BREAK
+    BEG=1
+   ENDIF
+  ENDIF
+'  ENDIF
+  @SKIP2
+  Y1=Y2
+  I=MENU_INEXT[I]
+ WEND
+ WHILE 0&&I
+  IF MENU_ISTYLE[I]AND MENU_STYLE_SEPARATOR THEN
+   INC Y2,MENU_SEPARATOR_HEIGHT
    GOTO @SKIP
   ENDIF
   INC Y2,8
@@ -1249,7 +1455,7 @@
    GPRINTWindow WND,SX,Y1,MENU_INAME$[I],GetSelectionTextColor()
    IF MENU_ICHILD[I]THEN
     GTRIWindow WND,W-SX-2,Y1+2,W-SX-2,Y1+6,W-SX,Y1+4,GetSelectionTextColor()
-    VAR IC=MENU_ICHILD[I]
+    IC=MENU_ICHILD[I]
     IF CheckMenu(IC)THEN
      ShowSubMenu M,IC,Y1
     ENDIF
@@ -1268,9 +1474,9 @@
     IF!BEG&&GBeginWindow(WND)THEN :'BREAK
     GFILLWindow WND,SX,Y1,MENU_WIDTH[M]-SX,Y2-1,WIN_BKGND
     GPRINTWindow WND,SX,Y1,MENU_INAME$[I],&HFF000000
-   IF MENU_ICHILD[I]THEN
-    GTRIWindow WND,W-SX-2,Y1+2,W-SX-2,Y1+6,W-SX,Y1+4,#BLACK
-   ENDIF
+    IF MENU_ICHILD[I]THEN
+     GTRIWindow WND,W-SX-2,Y1+2,W-SX-2,Y1+6,W-SX,Y1+4,#BLACK
+    ENDIF
     OS=0
     IF BEG THEN BREAK
     BEG=1
@@ -1284,11 +1490,13 @@
   MENU_SEL[M]=0
  ENDIF
  IF BEG THEN BEG=GEndWindow(WND)
+ VOID RepaintWindow(WND)
 END
 DEF MenuPainter WND,C,T,XY,WH
  IF GBeginWindow(WND)THEN RETURN
  GCLSWindow WND,WIN_BKGND
- VAR SX=2
+ VAR SX1=2
+ VAR SX=SX1
  VAR W=GetWindowWidth(WND)
  VAR H=GetWindowHeight(WND)
  GBOXWindow WND,0,0,W,H,&HFF000000
@@ -1302,22 +1510,30 @@
  VAR M=GetWindowVar(WND,0)
  VAR I=MENU_ITEM[M],Y=2
  VAR SEL=MENU_SEL[M]
+ IF MENU_CHECKROW[M]THEN
+  SX=SX+MENU_CHECK_W
+ ENDIF
  WHILE I
   IF MENU_ISTYLE[I]AND MENU_STYLE_SEPARATOR THEN
-   GLINEWindow WND,SX+1,Y+1,W-SX-1,Y+1,RGB(128,128,128)
-   GLINEWindow WND,SX+1,Y+2,W-SX-1,Y+2,-1
+   GLINEWindow WND,SX1+1,Y+1,W-SX1-1,Y+1,RGB(128,128,128)
+   GLINEWindow WND,SX1+1,Y+2,W-SX1-1,Y+2,-1
    INC Y,MENU_SEPARATOR_HEIGHT
   ELSE
    VAR TC
    IF SEL==I  THEN
-    GFILLWindow WND,SX,Y,MENU_WIDTH[M]-SX,Y+7,GetSelectionColor()
+    GFILLWindow WND,SX1,Y,MENU_WIDTH[M]-SX1,Y+7,GetSelectionColor()
     TC=GetSelectionTextColor()
    ELSE
     TC=#BLACK
    ENDIF
    IF MENU_ICHILD[I]THEN
-    GTRIWindow WND,W-SX-2,Y+2,W-SX-2,Y+6,W-SX,Y+4,TC
+    GTRIWindow WND,W-SX1-2,Y+2,W-SX1-2,Y+6,W-SX1,Y+4,TC
    ENDIF
+   IF MENU_ISTYLE[I]AND MENU_STYLE_CHECKED THEN
+    GLINEWindow WND,SX1+1,Y+4,SX1+1,Y+5,TC
+    GLINEWindow WND,SX1+6,Y+1,SX1+2,Y+5,TC
+    GLINEWindow WND,SX1+6,Y+2,SX1+2,Y+6,TC
+   ENDIF
    GPRINTWindow WND,SX,Y,MENU_INAME$[I],TC
    INC Y,8
   ENDIF
@@ -1844,6 +2060,9 @@
 COMMON DEF MessageBoxOK()
  RETURN 1
 END
+COMMON DEF MessageBoxError()
+ RETURN 2
+END
 COMMON DEF CalcTextSize TEXT$ OUT W,H
  VAR I,J
  W=0H=0
@@ -1876,7 +2095,7 @@
  CalcTextSize TEXT$ OUT TW,TH
  VAR LWND,E
  NewWindow GetLabelControl(),TEXT$,MSGBOX_MARGIN_LEFT,MSGBOX_MARGIN_TOP,TW,TH,WND,0 OUT LWND,E
- IF FLAG==MessageBoxOK()THEN
+ IF FLAG AND MessageBoxOK()THEN
   CalcTextSize "OK" OUT BW,BH
   'Button margin
   INC BW,4
@@ -2650,12 +2869,22 @@
 END
 DEF FireResizeWindow(WND,W,H)
  VAR NUWID=WND AND NUWIDMASK
+ VAR CW=WIN_CHILD[NUWID],TYPE=ParentWindowResizeEvent()
+ 
+ WHILE CW
+  VAR _=SendParentWindowEvent(NUWIDToWND(CW),TYPE,WND)
+  CW=WIN_NEXT[CW]
+ WEND
  RETURN SendWindowEvent(WND,CTL_RESIZEHANDLER,0,JoinInt(W,H))
 END
 DEF SendChildWindowEvent(WND,TYPE,CWND)
  VAR NUWID=WND AND NUWIDMASK
  RETURN SendWindowEvent(WND,CTL_CHLDWNDHANDLER,TYPE,CWND)
 END
+DEF SendParentWindowEvent(WND,TYPE,PWND)
+ VAR NUWID=WND AND NUWIDMASK
+ RETURN SendWindowEvent(WND,CTL_PRNTWNDHANDLER,TYPE,PWND)
+END
 COMMON DEF CallBaseControlHandler(WND,CTL,TYPE,A1,A2)
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
  CTL=CTL_PARENTCTL[CTL AND 4095]
@@ -3242,8 +3471,11 @@
 COMMON DEF GLOADImageWindow WND,X,Y,IMG,F
  GLOADImage X+WING_SX,Y+WING_SY,IMG,F
 END
+COMMON DEF GLOADImagePaletteWindow WND,X,Y,IMG,PAL,F
+ GLOADImagePalette X+WING_SX,Y+WING_SY,IMG,PAL,F
+END
 
-COMMON DEF GSAVEImage IMG,WND,X,Y,W,H,IX,IY
+COMMON DEF _GSAVEImage IMG,WND,X,Y,W,H,IX,IY
  IF (WND AND NUWIDMASK)==GB_WND THEN RETURN
  IF!CheckImage(IMG)THEN RETURN
  VAR PTR=IMAGE_PTR[IMG AND 4095]+IX*IY
@@ -3262,7 +3494,7 @@
 END
 COMMON DEF GLINEArrayMemory PTR,W,H,X,Y,X2,Y2,COL
  COL=RGBToShort(COL)
- DIM M[0]
+ IF 0THEN DIM M[0]
  M=GetRawMemory()
  VAR I
  VAR DX=ABS(X2-X)
@@ -3286,6 +3518,30 @@
   ENDIF
  WEND
 END
+COMMON DEF GLINEArray M,W,H,X,Y,X2,Y2,COL
+ COL=RGBToShort(COL)
+ VAR I
+ VAR DX=ABS(X2-X)
+ VAR DY=ABS(Y2-Y)
+ VAR SX,SY
+ IF X<X2 THEN SX=1 ELSE SX=-1
+ IF Y<Y2 THEN SY=1 ELSE SY=-1
+ VAR ERR=DX-DY
+ VAR E2
+ WHILE 1
+  IF X<W&&Y<H&&X>=0&&Y>=0THEN M[X+Y*W]=COL
+  IF X==X2&&Y==Y2 THEN RETURN
+  E2=2*ERR
+  IF E2>-DY THEN
+   DEC ERR,DY
+   INC X,SX
+  ENDIF
+  IF E2<DX THEN
+   INC ERR,DX
+   INC Y,SY
+  ENDIF
+ WEND
+END
 COMMON DEF GPRINTWindow WND,X,Y,STR$,COL
  INC X,WING_SX'WIN_FX[WND AND NUWIDMASK]
  INC Y,WING_SY'WIN_FY[WND AND NUWIDMASK]
@@ -3734,6 +3990,10 @@
 COMMON DEF WindowActiveEvent()
  RETURN 3
 END
+
+COMMON DEF ParentWindowResizeEvent()
+ RETURN 1
+END
 COMMON DEF GetWindowFrameSize WND OUT W1,H1,W2,H2,ERR
  IF!CheckWindow(WND)THEN
   ERR=WIN_INVALIDID
@@ -4361,7 +4621,7 @@
  IF W<0||H<0THEN RETURN
  VAR CW=GetChildWindow(WND)
  LISTBOX_ADJUSTSCRBAR WND
- VOID MoveResizeWindow(CW,W-GetWindowWidth(CW),0,GetWindowWidth(CW),H)
+ 'VOID MoveResizeWindow(CW,W-GetWindowWidth(CW),0,GetWindowWidth(CW),H)
 END
 COMMON DEF GetListBoxSelectedText$(WND)
  VAR S=GetWindowVar(WND,7)
@@ -4461,11 +4721,36 @@
   VOID RepaintWindow(GetWindowGroupOwner(WND))
  ENDIF
 END
+DEF NewHScrollBar PARENT,SIZ OUT WND,E
+ VAR W=GetWindowWidth(PARENT)
+ VAR H=GetWindowHeight(PARENT)
+ NewWindow GetHScrollBarControl(),"",0,H-8,W,8,PARENT,0 OUT WND,E
+ SetWindowVar WND,1,SIZ
+ SetScrollBarAutoResizeMode WND,1
+END
+DEF NewHVScrollBar PARENT,SIZH,SIZV OUT WNDH,WNDV,E
+ VAR W=GetWindowWidth(PARENT)
+ VAR H=GetWindowHeight(PARENT)
+ NewWindow GetHScrollBarControl(),"",0,H-8,W-8,8,PARENT,0 OUT WNDH,E
+ IF E THEN RETURN
+ SetWindowVar WNDH,1,SIZH
+ SetScrollBarAutoResizeMode WNDH,2
+
+ NewWindow GetVScrollBarControl(),"",W-8,0,8,H-8,PARENT,0 OUT WNDV,E
+ IF E THEN
+  VOID DeleteWindow(WNDH)
+  WNDV=0
+  RETURN
+ ENDIF
+ SetScrollBarAutoResizeMode WNDV,2
+ SetWindowVar WNDV,1,SIZV
+END
 DEF NewVScrollBar PARENT,SIZ OUT WND,E
  VAR W=GetWindowWidth(PARENT)
  VAR H=GetWindowHeight(PARENT)
  NewWindow GetVScrollBarControl(),"",W-8,0,8,H,PARENT,0 OUT WND,E
  SetWindowVar WND,1,SIZ
+ SetScrollBarAutoResizeMode WND,1
 END
 COMMON DEF SetScrollBarSize W,SIZ
  SetWindowVar W,1,SIZ
@@ -4490,6 +4775,170 @@
 COMMON DEF GetScrollBarPosition(W)
  RETURN GetWindowVar(W,2)
 END
+COMMON DEF SetScrollBarAutoResizeMode WND,MODE
+ SetWindowVar WND,4,MODE
+END
+DEF HSCRBARPainter W,_,T,XY,WH
+ IF GBEGINWindow(W)THEN RETURN
+ GCLSWindow W,WIN_BKGND
+ 
+ VAR _W=GetWindowWidth(W)
+ VAR _H=GetWindowHeight(W)
+ VAR BTNSIZ=8
+ GBOXWindow W,0,0,_W,_H,RGB(0,0,0)
+ VAR ID=GetWindowVar(W,3)
+ '====
+ 'BOX
+ VAR C=RGB(0,0,0)
+ IF ID==2THEN
+  VAR P=1
+  '
+  GFILLWindow W,3+P,5+P,6+P,3+P,C
+  GFILLWindow W,4+P,6+P,4+P,2+P,C
+  GPSETWindow W,2+P,4+P,C
+  
+  GLINEWindow W,0,0,0,7,C
+  GLINEWindow W,0,0,7,0,C
+  GLINEWindow W,8,0,8,8,-1
+  GLINEWindow W,0,8,8,8,-1
+ ELSE
+  GLINEWindow W,0,0,0,7,-1
+  GLINEWindow W,0,0,7,0,-1
+
+  GLINEWindow W,8,0,8,8,C
+  '
+  GFILLWindow W,3,5,6,3,C
+  GFILLWindow W,4,6,4,2,C
+  GPSETWindow W,2,4,C
+ ENDIF
+ SetWindowDrawPos W,_W-BTNSIZ,0
+ '====
+ IF ID==3THEN
+  'BOX
+  GLINEWindow W,0,_H-1,0,_H-8,C
+  GLINEWindow W,0,_H-8,7,_H-8,C
+  
+  GLINEWindow W,0,_H,8,_H,-1
+  GLINEWindow W,8,_H-8,8,_H,-1
+  '
+  P=1
+  GFILLWindow W,2+P,5+P,5+P,3+P,C
+  GFILLWindow W,4+P,6+P,4+P,2+P,C
+  GPSETWindow W,6+P,4+P,C
+ ELSE
+  'BOX
+  GLINEWindow W,0,_H-1,0,_H-8,-1
+  GLINEWindow W,0,_H-8,7,_H-8,-1
+  '
+  GFILLWindow W,2,5,5,3,C
+  GFILLWindow W,4,6,4,2,C
+  GPSETWindow W,6,4,C
+ ENDIF
+ SetWindowDrawPos W,1,1
+ 
+ 
+ '==BAR==
+ VAR AH=_W-18
+ VAR SIZ=GetWindowVar(W,1)
+ VAR POS=GetWindowVar(W,2)
+ 'Barのながさ
+ VAR BS=AH-SIZ
+ VAR S=8+POS
+ '10いか
+ IF BS<10THEN
+  BS=10
+  IF SIZ THEN S=(S-9)*((AH-10)/SIZ)+9
+ ENDIF
+ VAR C2=RGB(128,128,128)
+ '
+ VAR BH=BTNSIZ-2
+ GLINEWindow W,S+1,0,S+1,BH,-1
+ GLINEWindow W,S+1,0,S+BS,0,-1
+ '
+ GLINEWindow W,BS+S-1,0,BS+S-1,BH,C2
+ GLINEWindow W,S+1,BH,S+BS-1,BH,C2
+ '   
+ GLINEWindow W,S,0,S,BH,C
+ GLINEWindow W,S+BS,0,S+BS,BH,C
+ 
+ IF GENDWindow(W)THEN RETURN
+END
+DEF HSCRBARLMouseUP W,C,T,X,Y
+ IF GetWindowVar(W,3)THEN SetWindowVar W,3,8
+ VOID ReleaseCapture(W)
+ HSCRBARPainter W,C,0,0,0
+END
+DEF HSCRBARLMouseDown W,C,T,Y,_
+ VAR ID=GetWindowVar(W,3)
+ IF ID<8THEN
+  IF!ID THEN
+   ID=1
+   IF Y<9THEN
+    ID=2
+   ENDIF
+   IF Y>GetWindowWidth(W)-9THEN
+    ID=3
+   ENDIF
+   SetWindowVar W,3,ID
+  ENDIF
+  VOID SetCapture(W)
+  VOID LMouseDownWindow(W)
+ ELSE
+  SetWindowVar W,3,0
+  RETURN
+ ENDIF
+ VAR SIZ=GetWindowVar(W,1)
+ VAR POS=GetWindowVar(W,2)
+ IF ID==2&&POS>0 THEN
+  SetWindowVar W,2,POS-1
+  HSCRBARPainter W,C,0,0,0
+  VOID SendNotifWindow(GetParentWindow(W),W,POS-1)
+ ENDIF
+ IF ID==3&&POS<SIZ THEN
+  SetWindowVar W,2,POS+1
+  HSCRBARPainter W,C,0,0,0
+  VOID SendNotifWindow(GetParentWindow(W),W,POS+1)
+ ENDIF
+ IF ID==1THEN
+  VAR _Y=POS'Y
+  IF!SIZ THEN RETURN
+  VAR __TEMP__#=((GetWindowWidth(W)-28)/SIZ)
+  IF!__TEMP__# THEN RETURN'?
+  Y=(Y-9)/__TEMP__#
+  IF Y<0THEN Y=0
+  IF Y>SIZ THEN Y=SIZ
+  IF Y==_Y THEN RETURN
+  SetWindowVar W,2,Y
+  HSCRBARPainter W,C,0,0,0
+  VOID SendNotifWindow(GetParentWindow(W),W,Y)
+ ENDIF
+END
+
+DEF HSCRBARPARENT W,C,T,TYP,A
+ VAR E=CallBaseControlHandler(W,C,T,TYP,A)
+ IF TYP==ParentWindowResizeEvent()THEN
+  VAR MODE=GetWindowVar(W,4)
+  IF!MODE THEN RETURN
+  VAR PW=GetParentWindow(W)
+  VAR WIDTH=GetWindowWidth(PW)
+  VAR HEIGHT=GetWindowHeight(PW)
+  IF MODE==2THEN WIDTH=WIDTH-8
+  VOID MoveResizeWindow(W,0,HEIGHT-8,WIDTH,8)
+ ENDIF
+END
+DEF VSCRBARPARENT W,C,T,TYP,A
+ VAR E=CallBaseControlHandler(W,C,T,TYP,A)
+ IF TYP==ParentWindowResizeEvent()THEN
+  VAR MODE=GetWindowVar(W,4)
+  IF!MODE THEN RETURN
+  VAR PW=GetParentWindow(W)
+  VAR WIDTH=GetWindowWidth(PW)
+  VAR HEIGHT=GetWindowHeight(PW)
+  IF MODE==2THEN HEIGHT=HEIGHT-8
+  VOID MoveResizeWindow(W,WIDTH-8,0,8,HEIGHT)
+ ENDIF
+END
+
 DEF VSCRBARPainter W,_,T,XY,WH
  IF GBEGINWindow(W)THEN RETURN
  GCLSWindow W,WIN_BKGND
@@ -4564,7 +5013,7 @@
  IF GENDWindow(W)THEN RETURN
 END
 DEF VSCRBARLMouseUP W,C,T,X,Y
- SetWindowVar W,3,8
+ IF GetWindowVar(W,3)THEN SetWindowVar W,3,8
  VOID ReleaseCapture(W)
  VSCRBARPainter W,C,0,0,0
 END
@@ -5683,7 +6132,7 @@
 'DEF OTW_LOADMOUSE
 ' 
 'END
-COMMON DEF I_CREATEOTW
+COMMON DEF CREATEOTW
  ?"OTW Develop Tool"
  VAR K$
  INC K$,"VAR _1CTL"+LF$()
@@ -5716,38 +6165,33 @@
  K$=ReplaceStr$(K$,"_H",STR$(_H))
  K$=ReplaceStr$(K$,"_Q",_Q$)
  VAR SLOT=3
- INPUT "InsertSlot";SLOT
- PRGEDIT SLOT
- PRGINS K$
- ExitProcess 0
+ CLIPBOARD K$
 END
-COMMON DEF L_CREATEOTW
-END
 
-VAR PAINTCTL
-COMMON DEF PaintRepaint WND,CTL,T,A1,A2
+VAR PAINT1CTL
+COMMON DEF Paint1Repaint WND,CTL,T,A1,A2
  IF CallBaseControlHandler(WND,CTL,T,A1,A2)THEN RETURN
  DIM A[64*64]
  ReadArray GetWindowVar(WND,2),A,0,LEN(A)
  GLOADWindow WND,0,0,64,64,A,1,0
  VAR E=GEndWindow(WND)
 END
-COMMON DEF PaintLDWN WND,CTL,T,X,Y
+COMMON DEF Paint1LDWN WND,CTL,T,X,Y
  VAR E=CallBaseControlHandler(WND,CTL,T,X,Y)
  SetWindowVar WND,3,1
  SetWindowVar WND,0,X
  SetWindowVar WND,1,Y
  VOID SetCapture(WND)
 END
-COMMON DEF PaintLUP WND,CTL,T,X,Y
+COMMON DEF Paint1LUP WND,CTL,T,X,Y
  SetWindowVar WND,3,0
 END
-COMMON DEF PaintCF WND,CTL,T,F,A2
+COMMON DEF Paint1CF WND,CTL,T,F,A2
 'IF CallBaseControlHandler(WND,CTL,T,F,A2)THEN 
  IF!F THEN SetWindowVar WND,3,0
 END
 
-COMMON DEF PaintMouseMove WND,CTL,T,X,Y
+COMMON DEF Paint1MouseMove WND,CTL,T,X,Y
  IF!GetWindowVar(WND,3)THEN RETURN
  VAR OX=GetWindowVar(WND,0)
  VAR OY=GetWindowVar(WND,1)
@@ -5758,7 +6202,7 @@
  SetWindowVar WND,0,X
  SetWindowVar WND,1,Y
 END
-COMMON DEF I_PAINT
+COMMON DEF I_PAINT1
  IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
   PrintConsole "Require window system"+LF$()
   ExitProcess 1
@@ -5767,19 +6211,19 @@
  VAR PTR=malloc(64*64)
  IF!PTR THEN BEEP:ExitProcess 1RETURN
  VAR WND,E
- IF!PAINTCTL THEN
-  ExtendControl "PAINT",GetWindowControl() OUT PAINTCTL,E
-  E=SetControlMouseMoveHandler(PAINTCTL,"PaintMouseMove")
-  E=SetControlPainter(PAINTCTL,"PaintRepaint")
-  E=SetControlLMouseDownHandler(PAINTCTL,"PaintLDWN")
-  E=SetControlLMouseUpHandler(PAINTCTL,"PaintLUP")
-  E=SetControlChFocusHandler(PAINTCTL,"PaintCF")
+ IF!PAINT1CTL THEN
+  ExtendControl "PAINT1",GetWindowControl() OUT PAINT1CTL,E
+  E=SetControlMouseMoveHandler(PAINT1CTL,"Paint1MouseMove")
+  E=SetControlPainter(PAINT1CTL,"Paint1Repaint")
+  E=SetControlLMouseDownHandler(PAINT1CTL,"Paint1LDWN")
+  E=SetControlLMouseUpHandler(PAINT1CTL,"Paint1LUP")
+  E=SetControlChFocusHandler(PAINT1CTL,"Paint1CF")
  ENDIF
- NewTopLevelWindow PAINTCTL,"PAINT",64,64 OUT WND,E  SetProcessVar WND
+ NewTopLevelWindow PAINT1CTL,"PAINT1",64,64 OUT WND,E  SetProcessVar WND
  SetWindowVar WND,2,PTR
 END
-COMMON DEF L_PAINT
-IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
+COMMON DEF L_PAINT1
+ IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
 END
 '===Text editor===
 VAR TXTEDCTL
@@ -6082,7 +6526,7 @@
  SplitInt WH OUT W,H
  IF W<0||H<0THEN RETURN
  VAR CW=GetChildWindow(WND)
- VOID MoveResizeWindow(CW,W-GetWindowWidth(CW),0,GetWindowWidth(CW),H)
+ 'VOID MoveResizeWindow(CW,W-GetWindowWidth(CW),0,GetWindowWidth(CW),H)
 END
 COMMON DEF TextBoxExPainter WND,CTL,T,_,__
  TextBoxExRepaint WND
@@ -7468,7 +7912,7 @@
  SplitInt WH OUT W,H
  IF W<0||H<0THEN RETURN
  VAR CW=GetChildWindow(WND)
- VOID MoveResizeWindow(CW,W-GetWindowWidth(CW),0,GetWindowWidth(CW),H)
+ 'VOID MoveResizeWindow(CW,W-GetWindowWidth(CW),0,GetWindowWidth(CW),H)
 'RESIZE TABLE
  VAR D=OTYDOC_GetData(WND)
  VAR LINE=OTYDOC_ShowLine[D]
@@ -10509,7 +10953,7 @@
  IF W<0||H<0THEN RETURN
  VAR CW=GetChildWindow(WND)
  SetScrollBarSize CW,OTYFILGETSCRBARLEN(WND)
- VOID MoveResizeWindow(CW,W-GetWindowWidth(CW),0,GetWindowWidth(CW),H)
+ 'VOID MoveResizeWindow(CW,W-GetWindowWidth(CW),0,GetWindowWidth(CW),H)
 END
 COMMON DEF OTYFILPAINT WND,CTL,T,A1,A2
  IF CallBaseControlHandler(WND,CTL,T,A1,A2)THEN RETURN
@@ -13106,6 +13550,7 @@
 VAR ODE_IH
 VAR ODE_IX
 VAR ODE_IY
+DIM ODEPAL[0]
 DEF ODE_GETITEM WND,X,Y OUT I,IX,IY
  X=X-ODE_IX
  Y=Y-ODE_IY
@@ -13250,6 +13695,17 @@
  ENDIF
  VAR WND,E
  IF!ODE_CTL THEN
+ IF 0THEN
+ VAR I
+ ODEPAL=NewArray(65536)
+ FOR I=0TO 65535
+  VAR R=((I>>11AND 31)<<3)*0
+  VAR G=((I>>6AND 31)<<3)*0
+  VAR B=((I>>1AND 31)<<3)*1
+  VAR A=(I AND 1)*255
+  ODEPAL[I]=RGB(A,R,G,B)'R>>3<<11OR G>>3<<6OR B>>3<<1OR !!A
+ NEXT
+ ENDIF
   RC_OTYFIL
   NewImage OTYFILICOTXT,16,16 OUT ODE_IMAGE_TXT,E
   NewImage OTYFILICODAT,16,16 OUT ODE_IMAGE_DAT,E
@@ -13425,3 +13881,411 @@
  ENDIF
 END
 
+VAR PAINTCTL
+VAR PAINTCANVASCTL
+VAR PAINT_IMAGE
+VAR PAINT_WND
+VAR PAINT_CANVAS
+VAR PAINT_SCRH
+VAR PAINT_SCRV
+VAR PAINT_CMOUSEX
+VAR PAINT_CMOUSEY
+VAR PAINT_TOOL
+VAR PAINT_ZOOM
+VAR PAINT_
+VAR PAINT_SIZE
+
+VAR PAINT_ZOOM_BASE
+DEF PAINT_ALLOC OUT P
+ P=AllocSBArray()
+ VAR I
+ PAINT_IMAGE=I:INC I
+ PAINT_WND=I:INC I
+ PAINT_CANVAS=I:INC I
+ PAINT_SCRH=I:INC I
+ PAINT_SCRV=I:INC I
+ PAINT_CMOUSEX=I:INC I
+ PAINT_CMOUSEY=I:INC I
+ PAINT_TOOL=I:INC I
+ PAINT_ZOOM=I:INC I
+ 
+ PAINT_SIZE=I:INC I
+ SetSBArray P,NewArray(PAINT_SIZE)
+END
+
+
+VAR PAINT_MENU_NEW
+VAR PAINT_MENU_OPEN
+VAR PAINT_MENU_SAVE
+VAR PAINT_MENU_SAVEAS
+VAR PAINT_MENU_PEN
+VAR PAINT_MENU_ERASER
+VAR PAINT_MENU_LINE
+VAR PAINT_MENU_BOX
+VAR PAINT_MENU_FILLEDBOX
+VAR PAINT_MENU_ZOOMIN
+VAR PAINT_MENU_ZOOMOUT
+VAR PAINT_MENU_HAND
+
+DEF PAINT_GET WND OUT A
+ GetSBArray GetWindowVar(WND,0) OUT A
+END
+COMMON DEF PAINTDELETE WND,CTL,TYP,A1,A2
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ 
+ VAR E
+ DeleteImage A[PAINT_IMAGE] OUT E
+ FreeSBArray GetWindowVar(WND,0)
+END
+COMMON DEF PAINTCANVASCREATE WND,CTL,TYP,A1,A2
+END
+COMMON DEF PAINTCANVASNOTIF WND,CTL,TYP,A1,A2
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ IF A1==A[PAINT_SCRV]THEN
+  VOID RepaintWindow(WND)
+ ENDIF
+ IF A1==A[PAINT_SCRH]THEN
+  VOID RepaintWindow(WND)
+ ENDIF
+END
+COMMON DEF PAINTCANVASPAINT WND,CTL,TYP,XY,WH
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ VAR E=CallBaseControlHandler(WND,CTL,TYP,XY,WH)
+ VAR SY=GetScrollBarPosition(A[PAINT_SCRV])
+ VAR SX=GetScrollBarPosition(A[PAINT_SCRH])
+ VAR X,Y,W,H
+ VAR SW,SH
+ SW=GetWindowWidth(WND)
+ SH=GetWindowHeight(WND)
+ IF WH THEN
+  SplitInt WH OUT W,H
+  SplitInt XY OUT X,Y
+ ELSE
+  W=SW
+  H=SH
+ ENDIF
+ VAR Z=A[PAINT_ZOOM]
+ VAR HIMG=A[PAINT_IMAGE]
+ VAR IW=GetImageWidth(HIMG)
+ VAR IH=GetImageHeight(HIMG)
+ IF Z!=PAINT_ZOOM_BASE THEN
+  IF 0THEN DIM IMG[0]
+
+  GetImageArray(HIMG) OUT IMG,
+  IF GBeginDirect(WND)THEN @ERR
+  GCLIP 1,X,Y,X+W,Y+H
+  GCLS -1
+  VAR IX,IY
+  VAR Z2=Z DIV PAINT_ZOOM_BASE
+  VAR IX2=SX+SW DIV Z2
+  VAR IY2=SY+SH DIV Z2
+  VAR DX
+  VAR DY
+  VAR GRC=RGB(0,0,0)
+
+  IX2=MIN(IX2,IW-1)
+  IY2=MIN(IY2,IH-1)
+  FOR IX=SX TO IX2
+   GLINE DX,Y,DX,Y+H,GRC
+   DX=DX+Z2
+  NEXT
+  FOR IY=SY TO IY2
+   DX=0
+   GLINE X,DY,X+W,DY,GRC
+   FOR IX=SX TO IX2
+    VAR C=IMG[IX+IY*IW]
+    IF C AND 1THEN
+     GFILL DX,DY,DX+Z2-1,DY+Z2-1,RGB(C>>11AND 31<<3,C>>6AND 31<<3,C>>1AND 31<<3)
+    ENDIF
+    DX=DX+Z2
+   NEXT
+   UpdateMouse
+   DY=DY+Z2
+  NEXT
+  IF GCopyDirect(WND,X,Y,X+W,Y+H,X,Y,0)THEN @ERR
+ ELSE
+  IF GBeginWindow(WND)THEN @ERR
+  GCLSWindow WND,GetWindowBackColor(WND)
+  GFILLWindow WND,-SX,-SY,IW-SX-1,IH-SY-1,-1
+  GLOADImageWindow WND,-SX,-SY,A[PAINT_IMAGE],0
+ ENDIF
+ IF GEndWindow(WND)THEN @ERR
+ RETURN
+ @ERR
+ RETURN
+END
+DEF PAINT_CALCCANVASPOS WND OUT CX,CY,CW,CH
+ VAR W=GetWindowWidth(WND)
+ VAR H=GetWindowHeight(WND)
+ CX=26
+ CY=0
+ CW=W-CX-0
+ CH=H-16
+END
+COMMON DEF PAINTCANVASLMD WND,CTL,TYP,X,Y
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ VAR Z#=(A[PAINT_ZOOM]/PAINT_ZOOM_BASE)
+ VAR SY=GetScrollBarPosition(A[PAINT_SCRV])*Z#
+ VAR SX=GetScrollBarPosition(A[PAINT_SCRH])*Z#
+ X=X+SX
+ Y=Y+SY
+ VAR PT=A[PAINT_TOOL]
+ IF PT==PAINT_MENU_PEN||PT==PAINT_MENU_ERASER THEN
+  A[PAINT_CMOUSEX]=X
+  A[PAINT_CMOUSEY]=Y
+  VOID SetCapture(WND)
+ ELSEIF PT==PAINT_MENU_ZOOMIN THEN
+  INC A[PAINT_ZOOM],PAINT_ZOOM_BASE*4
+  VOID RepaintWindow(WND)
+ ENDIF
+END
+COMMON DEF PAINTCANVASLMU WND,CTL,TYP,X,Y
+ VOID ReleaseCapture(WND)
+END
+
+COMMON DEF PAINTCANVASMMOVE WND,CTL,TYP,X,Y
+ IF GetCapture()!=WND THEN
+  RETURN
+ ENDIF
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ VAR Z#=(A[PAINT_ZOOM]/PAINT_ZOOM_BASE)
+ VAR SY=GetScrollBarPosition(A[PAINT_SCRV])*Z#
+ VAR SX=GetScrollBarPosition(A[PAINT_SCRH])*Z#
+ VAR W=GetWindowWidth(WND)
+ VAR H=GetWindowHeight(WND)
+ X=X+SX
+ Y=Y+SY
+ VAR X1=MIN(A[PAINT_CMOUSEX],X)
+ VAR Y1=MIN(A[PAINT_CMOUSEY],Y)
+ VAR X2=MAX(A[PAINT_CMOUSEX],X)
+ VAR Y2=MAX(A[PAINT_CMOUSEY],Y)
+ IF 0THEN DIM I[0]
+
+ GetImageArray(A[PAINT_IMAGE]) OUT I,
+ VAR IW=GetImageWidth(A[PAINT_IMAGE])
+ VAR IH=GetImageHeight(A[PAINT_IMAGE])
+ 
+ VAR C=RGB(0,0,0)
+ IF A[PAINT_TOOL]==PAINT_MENU_ERASER THEN C=0
+ GLINEArray I,IW,IH,A[PAINT_CMOUSEX] DIV Z#,A[PAINT_CMOUSEY] DIV Z#,X DIV Z#,Y DIV Z#,C
+' IF GBeginDirect(WND)THEN RETURN
+'GCLIP 1,X1,Y1,X2,Y2
+' GLOADImage 0,0,A[PAINT_IMAGE],1
+' GLINE A[PAINT_CMOUSEX],A[PAINT_CMOUSEY],X,Y
+' GSAVEImage 0,0,A[PAINT_IMAGE]
+ PAINTCANVASPAINT WND,CTL,TYP,0,0
+
+ A[PAINT_CMOUSEX]=X
+ A[PAINT_CMOUSEY]=Y
+END
+
+COMMON DEF PAINTRESIZE WND,CTL,TYP,A1,A2
+ VAR CX,CY,CW,CH
+ PAINT_CALCCANVASPOS WND OUT CX,CY,CW,CH
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ VOID ResizeWindow(A[PAINT_CANVAS],CW,CH)
+END
+VAR PAINTNEWDLGCTL
+COMMON DEF PAINTNOTIF WND,C,T,A1,A2
+ IF A1==MenuNotifID()THEN
+  PAINT_MENU WND,A2
+ ENDIF
+END
+DEF PAINT_MENU WND,A2
+ IF 0THEN DIM A[0]
+ PAINT_GET WND OUT A
+ ON A2 GOTO @ERR,@NEW,@OPEN,@SAVE,@SAVEAS,@PEN,@ERASER,@LINE,@BOX,@FILLEDBOX,@ZOOMIN,@ZOOMOUT,@HAND
+ @ERR
+ RETURN
+ @NEW
+ VOID NewDialogBoxWithArg(PAINTNEWDLGCTL,"New",170,35,WND,TRUE,GetWindowVar(WND,0),0) RETURN
+ @OPEN
+ RETURN
+ @SAVE
+ RETURN
+ @SAVEAS
+ RETURN
+ @PEN
+ A[PAINT_TOOL]=A2
+ RETURN
+ @ERASER
+ A[PAINT_TOOL]=A2
+ RETURN
+ @LINE
+ A[PAINT_TOOL]=A2
+ RETURN
+ @BOX
+ A[PAINT_TOOL]=A2
+ RETURN
+ @FILLEDBOX
+ A[PAINT_TOOL]=A2
+ RETURN
+ @ZOOMIN
+ A[PAINT_TOOL]=A2
+ RETURN
+ @ZOOMOUT
+ A[PAINT_TOOL]=A2
+ RETURN
+ @HAND
+ A[PAINT_TOOL]=A2
+ RETURN
+END
+COMMON DEF PAINTNEWDLGCREATE WND,CTL,TYP,A1,A2
+ SetWindowVar WND,0,A1
+ VAR LWND,E
+ 
+ VAR H=GetWindowHeight(WND)
+ VAR W=GetWindowWidth(WND)
+ VAR LABELW=64
+ NewWindow GetLabelControl(),"Width",0,0,LABELW-1,8,WND,0 OUT LWND,E
+ NewWindow GetLabelControl(),"Height",0,10,LABELW-1,8,WND,0 OUT LWND,E
+ NewWindow GetTextBoxControl(),"400",LABELW,0,W-LABELW,8,WND,0 OUT LWND,E
+ SetWindowVar WND,1,LWND
+ NewWindow GetTextBoxControl(),"240",LABELW,10,W-LABELW,8,WND,0 OUT LWND,E
+ SetWindowVar WND,2,LWND
+ NewWindow GetButtonControl(),"OK",0,H-12,20,12,WND,0 OUT LWND,E
+ SetWindowVar WND,3,LWND
+ NewWindow GetButtonControl(),"Cancel",24,H-12,52,12,WND,0 OUT LWND,E
+ SetWindowVar WND,4,LWND
+END
+COMMON DEF PAINTNEWDLGNOTIF WND,CTL,TYP,A1,A2
+ VAR CANCELBTN=GetWindowVar(WND,4)
+ VAR OKBTN=GetWindowVar(WND,3)
+ VAR HTXTBOX=GetWindowVar(WND,2)
+ VAR WTXTBOX=GetWindowVar(WND,1)
+ IF A1==OKBTN THEN
+  VAR H=VAL(GetWindowName$(HTXTBOX))
+  VAR W=VAL(GetWindowName$(WTXTBOX))
+  IF H&&W THEN
+   PAINT_NEW WND,W,H
+   VOID DeleteWindow(WND)
+  ELSE
+   VOID MessageBox(WND,"Paint","Invalid size",MessageBoxOK()OR MessageBoxError())
+  ENDIF
+ ENDIF
+ IF A1==CANCELBTN THEN
+  VOID DeleteWindow(WND)
+ ENDIF
+END
+DEF PAINT_NEW P,W,H
+ IF 0THEN DIM A[0]
+ PAINT_GET P OUT A
+ VOID DeleteImage(A[PAINT_IMAGE])
+ VAR IMG,E
+ NewImage NewArray(W*H),W,H OUT IMG,E
+ A[PAINT_IMAGE]=IMG
+ SetScrollBarSize A[PAINT_SCRH],W
+ SetScrollBarSize A[PAINT_SCRV],H
+ VOID RepaintWindow(A[PAINT_CANVAS])
+END
+COMMON DEF I_PAINT
+ IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
+  PrintConsole "Require window system"+LF$()
+  ExitProcess 1
+  RETURN
+ ENDIF
+ VAR WND,E
+ IF!PAINTCTL THEN
+  ExtendControl "PAINT",GetWindowControl() OUT PAINTCTL,E
+  IF E THEN @ERR_CTL
+  NewControl "PAINT_CANVAS" OUT PAINTCANVASCTL,E
+  IF E THEN @ERR_CTL
+  ExtendControl"PAINTNEWDLGCTL",GetWindowControl() OUT PAINTNEWDLGCTL,E
+  IF E THEN @ERR_CTL
+  IF SetControlDeleteHandler(PAINTCTL,"PAINTDELETE")THEN @ERR_CTL
+  IF SetControlResizeHandler(PAINTCTL,"PAINTRESIZE")THEN @ERR_CTL
+  IF SetControlNotifHandler(PAINTCTL,"PAINTNOTIF")THEN @ERR_CTL
+  IF SetControlCreateHandler(PAINTCANVASCTL,"PAINTCANVASCREATE")THEN @ERR_CTL
+  IF SetControlPainter(PAINTCANVASCTL,"PAINTCANVASPAINT")THEN @ERR_CTL
+  IF SetControlMouseMoveHandler(PAINTCANVASCTL,"PAINTCANVASMMOVE")THEN @ERR_CTL
+  IF SetControlLMouseDownHandler(PAINTCANVASCTL,"PAINTCANVASLMD")THEN @ERR_CTL
+  IF SetControlLMouseUpHandler(PAINTCANVASCTL,"PAINTCANVASLMU")THEN @ERR_CTL
+  IF SetControlNotifHandler(PAINTCANVASCTL,"PAINTCANVASNOTIF")THEN @ERR_CTL
+  IF SetControlCreateHandler(PAINTNEWDLGCTL,"PAINTNEWDLGCREATE")THEN @ERR_CTL
+  IF SetControlNotifHandler(PAINTNEWDLGCTL,"PAINTNEWDLGNOTIF")THEN @ERR_CTL
+ ENDIF
+ NewTopLevelStyleWindow PAINTCTL,"PAINT",128,64,WINDOWRESIZABLESTYLE()OR WINDOWMENUSTYLE()OR WindowMinMaxStyle() OUT WND,E
+ IF E THEN @ERR
+ VAR CX,CY,CW,CH
+ VAR CWND
+ PAINT_CALCCANVASPOS WND OUT CX,CY,CW,CH
+ NewWindow PAINTCANVASCTL,"",CX,CY,CW,CH,WND,WindowBackFlag() OUT CWND,E
+ IF E THEN @ERR
+ SetProcessVar WND
+ 
+ VAR P
+ PAINT_ALLOC OUT P
+ SetWindowVar WND,0,P
+ SetWindowVar CWND,0,P
+ IF 0THEN DIM A[0]
+ A=GetSBArray(P)
+ A[PAINT_WND]=WND
+ A[PAINT_CANVAS]=CWND
+ PAINT_ZOOM_BASE=100
+ A[PAINT_ZOOM]=PAINT_ZOOM_BASE
+ VAR WIDTH=400
+ VAR HEIGHT=240
+ VAR IMG
+ NewImage NewArray(WIDTH*HEIGHT),WIDTH,HEIGHT OUT IMG,E
+ A[PAINT_IMAGE]=IMG
+
+ VAR SCRV,SCRH
+ NewHVScrollBar CWND,WIDTH,HEIGHT OUT SCRH,SCRV,E
+ A[PAINT_SCRH]=SCRH
+ A[PAINT_SCRV]=SCRV
+ VAR MENU
+ VAR MI=1
+ NewMenu OUT MENU,E
+ PAINT_MENU_NEW=MI:INC MI
+ PAINT_MENU_OPEN=MI:INC MI
+ PAINT_MENU_SAVE=MI:INC MI
+ PAINT_MENU_SAVEAS=MI:INC MI
+ PAINT_MENU_PEN=MI:INC MI
+ PAINT_MENU_ERASER=MI:INC MI
+ PAINT_MENU_LINE=MI:INC MI
+ PAINT_MENU_BOX=MI:INC MI
+ PAINT_MENU_FILLEDBOX=MI:INC MI
+ PAINT_MENU_ZOOMIN=MI:INC MI
+ PAINT_MENU_ZOOMOUT=MI:INC MI
+ PAINT_MENU_HAND=MI:INC MI
+ A[PAINT_TOOL]=PAINT_MENU_PEN
+ AddMenuItem MENU,"New",PAINT_MENU_NEW
+ AddMenuItem MENU,"Open",PAINT_MENU_OPEN
+ AddMenuItem MENU,"Save",PAINT_MENU_SAVE
+ AddMenuItem MENU,"Save as",PAINT_MENU_SAVEAS
+ AddSubMenuItem GetWindowMenu(WND),"File",MENU
+ NewMenu OUT MENU,E
+ AddSubMenuItem GetWindowMenu(WND),"Tool",MENU
+ AddRadioMenuItem MENU,"Pen",PAINT_MENU_PEN,TRUE
+ AddRadioMenuItem MENU,"Eraser",PAINT_MENU_ERASER,FALSE
+ AddRadioMenuItem MENU,"Box",PAINT_MENU_BOX,FALSE
+ AddRadioMenuItem MENU,"Filled box",PAINT_MENU_FILLEDBOX,FALSE
+ AddRadioMenuItem MENU,"Line",PAINT_MENU_LINE,FALSE
+ AddRadioMenuItem MENU,"Zoom in",PAINT_MENU_ZOOMIN,FALSE
+ AddRadioMenuItem MENU,"Zoom out",PAINT_MENU_ZOOMOUT,FALSE
+ AddRadioMenuItem MENU,"Hand",PAINT_MENU_HAND,FALSE
+ AddMenuItemSeparator MENU
+ AddMenuItem MENU,"Pen",0
+
+ RETURN
+ 
+ @ERR_CTL
+  VOID DeleteControl(PAINTCTL)
+  VOID DeleteControl(PAINTCANVASCTL)
+  ExitProcess 1
+  RETURN
+ @ERR
+  VOID DeleteControl(WND)
+  VOID DeleteControl(CWND)
+  ExitProcess 1
+END
+COMMON DEF L_PAINT
+ IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
+END
+
