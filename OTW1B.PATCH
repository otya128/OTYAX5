diff -u OTW.TXT OTW1B
--- OTW.TXT
+++ OTW1B
@@ -8,6 +8,7 @@
 VAR OTW_MOUSEX
 VAR OTW_MOUSEY
 VAR OTW_MOUSEX#,OTW_MOUSEY#
+VAR OTW_LASTUPD
 VAR OTW_FNT[0,0]
 VAR OTW_FNTPAL[0]
 VAR OTW_FNTTBL[0]
@@ -55,6 +56,7 @@
 DIM WIN_GPREV  [0]
 DIM WIN_GPARENT[0]
 DIM WIN_STYLE  [0]
+DIM WIN_IMAGE  [0]
 'QUEUE
 DIM WIN_MSGS   [0]
 DIM WIN_MSGE   [0]
@@ -94,10 +96,15 @@
 '
 VAR WIN_STYLE_NONE
 VAR WIN_STYLE_MODAL
+VAR WIN_STYLE_RESIZ
+VAR WIN_STYLE_TRANS
 VAR WIN_ACTIVENUWID
 DEF OTW_WIN_INITARRAY
+ PrintConsoleln "Init window..."
  VAR FM=FREEMEM
  WIN_STYLE_MODAL=1
+ WIN_STYLE_RESIZ=2
+ WIN_STYLE_TRANS=4
 'WIN_FWIDTH1=0
 'WIN_FHEIGHT1=10
 'WIN_FWIDTH2=0
@@ -148,6 +155,7 @@
  WIN_GPREV     =NewArray(WIN_MAX)
  WIN_GPARENT   =NewArray(WIN_MAX)
  WIN_STYLE     =NewArray(WIN_MAX)
+ WIN_IMAGE     =NewArray(WIN_MAX)
  WIN_MSGS      =NewArray(WIN_MAX)
  WIN_MSGE      =NewArray(WIN_MAX)
  WIN_MSGBUF    =NewArray3(WIN_MAX,WIN_MSGMAX,WIN_MSGARGSIZE)
@@ -155,7 +163,29 @@
  WIN_FREE=1
  OTW_INITLIST WIN_NEXT
  OTW_MENU_INITARRAY
+ OTW_IMAGE_INITARRAY
 END
+DIM IMAGE_PTR[0]
+DIM IMAGE_HEIGHT[0]
+DIM IMAGE_WIDTH[0]
+DIM IMAGE_ID[0]
+DIM IMAGE_NEXT[0]
+VAR IMAGE_MAX
+VAR IMAGE_IDCNT
+VAR IMAGE_FREE
+VAR IMAGE_NOALLOC
+DEF OTW_IMAGE_INITARRAY
+ IMAGE_NOALLOC=1
+ IMAGE_MAX=256
+ IMAGE_IDCNT=1
+ IMAGE_FREE=1
+ IMAGE_PTR=NewArray(IMAGE_MAX)
+ IMAGE_WIDTH=NewArray(IMAGE_MAX)
+ IMAGE_HEIGHT=NewArray(IMAGE_MAX)
+ IMAGE_ID=NewArray(IMAGE_MAX)
+ IMAGE_NEXT=NewArray(IMAGE_MAX)
+ OTW_INITLIST IMAGE_NEXT
+END
 '=======================
 'MENU
 '=======================
@@ -186,6 +216,7 @@
 VAR MENU_FREE
 VAR MENUCTL
 DEF OTW_MENU_INITARRAY
+ PrintConsoleln "Init menu..."
  MENU_ITEMMAX=256
  MENU_INAME$=NewArray$(MENU_ITEMMAX)
  MENU_INEXT=NewArray(MENU_ITEMMAX)
@@ -267,7 +298,12 @@
 VAR CTL_VSCRBARCTL
 
 VAR CTL_LSTBOXCTL
+'CONTROL STYLE
+'クリックしてもFOCUSしない
+VAR CTL_STYLE_NCFOCUS
 DEF OTW_CTL_INITARRAY
+ PrintConsoleln "Init control..."
+ CTL_STYLE_NCFOCUS=1
  CTL_MAX=64
  CTL_HANDLER_MAX=16
  CTL_NAME$     =NewArray$(CTL_MAX)
@@ -336,14 +372,16 @@
  ExtendControl "ToggleButton",CTL_BUTTONCTL OUT CTL_TGLBTNCTL,E
  E=SetControlLMouseUpHandler(CTL_TGLBTNCTL,"ToggleButtonLMouseUP")
  E=SetControlLMouseDownHandler(CTL_TGLBTNCTL,"ToggleButtonLMouseDown")
- INIT_TXTBOXEX
 
  'MENU
  NewControl"POPUPMENU" OUT MENUCTL,E
  E=SetControlPainter(MENUCTL,"MenuPainter")
  E=SetControlMouseMoveHandler(MENUCTL,"MenuMouseMove")
  E=SetControlLMouseUpHandler(MENUCTL,"MenuLMouseUp")
+ E=SetControlChFocusHandler(MENUCTL,"MenuChFocus")
  OTW_CTL_LIST
+ PrintConsoleln "Init textbox..."
+ INIT_TXTBOXEX
 END
 DIM LISTSTR$[0]
 DIM LISTSTRNEXT[0]
@@ -409,6 +447,13 @@
  RETURN CTL_LSTBOXCTL
 END
 'CONTROL
+COMMON DEF FindControl(NAME$)
+ VAR I
+ FOR I=0TO CTL_MAX-1
+  IF CTL_NAME$[I]==NAME$THEN RETURN CTL_CID[I]<<12OR I
+ NEXT
+ RETURN 0
+END
 COMMON DEF NewControl NAME$ OUT CTL,ERR
  IF!CTL_FREE THEN
   ERR=CTL_NOALLOC
@@ -548,6 +593,31 @@
 DEF CIDNUCIDToCTL(CID,NUCID)
  RETURN CID<<12OR NUCID
 END
+COMMON DEF NewImage WIDTH,HEIGHT OUT IMG,E
+ IF !IMAGE_FREE THEN IMG=0:E=IMAGE_NOALLOC:RETURN
+ VAR PTR=malloc(WIDTH*HEIGHT)
+ IF!PTR THEN IMG=0:E=IMAGE_NOALLOC:RETURN
+ INC IMAGE_IDCNT
+ IMAGE_ID[IMAGE_FREE]=IMAGE_IDCNT
+ IMAGE_HEIGHT[IMAGE_FREE]=WIDTH
+ IMAGE_WIDTH[IMAGE_FREE]=HEIGHT
+ IMAGE_PTR[IMAGE_FREE]=PTR
+ IMG=IMAGE_FREE OR IMAGE_IDCNT<<12
+ IMAGE_FREE=IMAGE_NEXT[IMAGE_FREE]
+ E=0
+ RETURN
+END
+COMMON DEF CheckImage(IMG)
+ RETURN IMAGE_ID[IMG AND 4095]==IMG>>12
+END
+COMMON DEF DeleteImage(IMG)
+ IF!CheckImage(IMG)THEN RETURN IMAGE_NOALLOC
+ VAR I=IMG AND 4095
+ free IMAGE_PTR[I]
+ IMAGE_NEXT[I]=IMAGE_FREE
+ IMAGE_FREE=I
+ RETURN 0
+END
 VAR MENU_NOALLOC
 COMMON DEF NewMenu OUT MENU,E
  IF !MENU_FREE THEN MENU=0RETURN
@@ -618,12 +688,20 @@
 DEF MenuLMouseUp WND,C,T,X,Y
  VAR M=GetWindowVar(WND,0)
  IF X>0&&Y>0&&X<MENU_WIDTH[M]&&Y<MENU_HEIGHT[M]THEN
-  VOID SendNotifWindow(GetWindowGroupOwner(WND),MENU_IVAR[MENU_SEL[M]],0)
+  VOID SendNotifWindow(GetWindowGroupOwner(WND),0,MENU_IVAR[MENU_SEL[M]])
  ENDIF
  VOID DeleteWindow(WND)
  VOID ActiveWindow(MENU_SHOW[M])
  MENU_SHOW[M]=0
 END
+DEF MenuChFocus WND,C,T,F,_
+ IF!F THEN
+  VAR M=GetWindowVar(WND,0)
+  VOID DeleteWindow(WND)
+  VOID ActiveWindow(MENU_SHOW[M])
+  MENU_SHOW[M]=0
+ ENDIF
+END
 DEF MenuMouseMove WND,C,T,X,Y
  VAR M=GetWindowVar(WND,0)
  VAR I=MENU_ITEM[M],Y1=1,Y2=1
@@ -846,6 +924,9 @@
 COMMON DEF WindowResizableStyle()
  RETURN 2
 END
+COMMON DEF WindowTransStyle()
+ RETURN 4
+END
 COMMON DEF NewTopLevelStyleWindow CTL,NAME$,WIDTH,HEIGHT,STYLE OUT WND,ERR
  IF!CheckControl(CTL)THEN
   WND=0
@@ -853,10 +934,12 @@
   RETURN
  ENDIF
  VAR NUCID=CTL AND 4095
- INC OTW_TOPLEVELCNT
+' INC OTW_TOPLEVELCNT
  VAR _H=CTL_FH1[NUCID]
  'ごういん
- INC CTL_FH1[NUCID],10
+ IF STYLE AND 1THEN
+  INC CTL_FH1[NUCID],10
+ ENDIF
  NewWindow CTL,NAME$,WIN_TopLevelX,WIN_TopLevelY,WIDTH,HEIGHT,WIN_ROOTWND,WindowFrontFlag() OUT WND,ERR
  CTL_FH1[NUCID]=_H
  IF ERR THEN RETURN
@@ -868,8 +951,14 @@
  ENDIF
  'RESIZABLE
  IF STYLE AND 2THEN
-  
+  WIN_STYLE[NUWID]=WIN_STYLE_RESIZ
  ENDIF
+ 'TRANS
+ IF STYLE AND 4THEN
+  WIN_STYLE[NUWID]=WIN_STYLE_TRANS
+  NOIMPL "TRANS
+  NewImage WIDTH,HEIGHT,WIN_IMAGE[NUWID]
+ ENDIF
  INC WIN_TopLevelX,CTL_FH1[NUCID]-1
  INC WIN_TopLevelY,CTL_FH1[NUCID]-1
 END
@@ -885,7 +974,7 @@
   RETURN
  ENDIF
  ERR=0
- INC OTW_TOPLEVELCNT
+' INC OTW_TOPLEVELCNT
  INC WIN_WIDCNT
  VAR NUWID,WID
  NUWID=WIN_FREE
@@ -914,7 +1003,7 @@
  VOID RepaintWindow(WND)
  IF!WIN_ROOTWND THEN
   GFILL WIN_AX[NUWID],WIN_AY[NUWID]+240,WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID]+240,ShortToRGB(NUWID)
-  GCLIP 1,0,0,400,240
+  GCLIP 1,0,0,400,239
   WIN_AW[NUWID]=WIDTH
   WIN_AH[NUWID]=HEIGHT
   WIN_AFW[NUWID]=WIDTH
@@ -967,7 +1056,7 @@
  WIN_AH[NUWID]=WIN_HEIGHT[NUWID]
  OTW_CLIPWindow NUWID
  OTW_DrawMap NUWID
- GCLIP 1,0,0,400,240
+ GCLIP 1,0,0,400,239
 ' GFILL WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],RGB(255,255,255)
  SPAllocWindow WND
  WindowOnCreate WND,CTL
@@ -1080,7 +1169,7 @@
 
 DEF OTW_SPSORT
  VAR I,Z=0
- IF OTW_TOPLEVELCNT-1THEN Z=(1022+255)/(OTW_TOPLEVELCNT-1)
+ IF OTW_TOPLEVELCNT-1THEN Z=(1022+255)/(OTW_TOPLEVELCNT)
  VAR NUWID=WIN_CHILD[WIN_ROOTWND AND NUWIDMASK]
 'IF!WIN_NEXT[NUWID]THEN I=
  I=1022+255
@@ -1102,7 +1191,7 @@
 'IF WIN_HEIGHT[NUWID]!=WIN_AH[NUWID]THEN INC H,WIN_FH1[NUWID]
 'GFILL WIN_RFX[NUWID],WIN_RFY[NUWID]+240,WIN_RFX[NUWID]+W,WIN_RFY[NUWID]+240+H,ShortToRGB(NUWID)
  GFILL WIN_RFX[NUWID],WIN_RFY[NUWID]+240,WIN_RFX[NUWID]+WIN_AFW[NUWID],WIN_RFY[NUWID]+240+WIN_AFH[NUWID],ShortToRGB(NUWID)
- GCLIP 1,0,0,400,240
+ GCLIP 1,0,0,400,239
 END
 COMMON DEF ActiveWindow(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
@@ -1352,12 +1441,18 @@
  VAR NXT=WIN_CHILD[WIN_PARENT[NUWID]],B
  VOID RepaintWindow(WIN_PARENT[NUWID]OR(WIN_WID[WIN_PARENT[NUWID]]<<WIDSHIFT))
 
- IF!NXT THEN RETURN'WIN_
+ IF!NXT THEN RETURN 'WIN_
  B=NXT
  IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK) THEN
   IF WIN_SP[NUWID]THEN
    WIN_SP[NUWID]=WIN_SP[NUWID] OR 512
   ENDIF
+  GPAGE OTW_SP,OTW_GP
+  GCOPY OTW_DP,WIN_AX[NUWID]-MX,WIN_AY[NUWID]-MY,WIN_AX[NUWID]-MX+WIN_WIDTH[NUWID],WIN_AY[NUWID]-MY+WIN_HEIGHT[NUWID],WIN_AX[NUWID],WIN_AY[NUWID],0
+  GPAGE OTW_SP,OTW_DP
+  GFILL WIN_AX[NUWID]-MX,WIN_AY[NUWID]-MY,WIN_AX[NUWID]-MX+WIN_WIDTH[NUWID],WIN_AY[NUWID]-MY+WIN_HEIGHT[NUWID],RGB(224,224,224)
+  GCOPY OTW_GP,WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],WIN_AX[NUWID],WIN_AY[NUWID],0
+  OTW_SPCHR NUWID
  ENDIF
  OTW_DrawMap WIN_PARENT[NUWID]
  '   B=WIN_CHILD[NXT]
@@ -1553,8 +1648,12 @@
  ENDIF
  IF WIN_MSGS[NUWID]==WIN_MSGE[NUWID]THEN RETURN 0
  VAR NUCID=WIN_CTL[NUWID] AND 4095
- VAR S=WIN_MSGE[NUWID]
+ WHILE WIN_MSGS[NUWID]!=WIN_MSGE[NUWID]
+ VAR S=WIN_MSGE[NUWID],S2=WIN_MSGS[NUWID]
  VAR TYPE=WIN_MSGBUF[NUWID,S,0]
+
+ INC WIN_MSGE[NUWID]
+ IF WIN_MSGE[NUWID]>=WIN_MSGMAX THEN WIN_MSGE[NUWID]=0
  IF TYPE==13THEN
   'CTL_STRNOTIFHANDLER
   CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],GetString$(WIN_MSGBUF[NUWID,S,2])
@@ -1563,12 +1662,12 @@
   CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],WIN_MSGBUF[NUWID,S,2]
  ENDIF
  IF WIN_WID[NUWID]<=0THEN RETURN WIN_INVALIDID
- INC WIN_MSGE[NUWID]
- IF WIN_MSGE[NUWID]>=WIN_MSGMAX THEN WIN_MSGE[NUWID]=0
  IF WIN_BEGIN[NUWID]THEN VOID GEndWindow(WND)
  IF CTL_NDHNDLR[TYPE]THEN
   DEC WIN_MSGCNT[NUWID,TYPE]
  ENDIF
+ IF S2!=WIN_MSGS[NUWID]THEN BREAK
+ WEND
  RETURN 0
 END
 COMMON DEF UpdateWindow(WND)
@@ -1615,9 +1714,11 @@
  RETURN WIN_FH2[WND AND NUWIDMASK]'CTL_FH2[NUCID]
 END
 common def GetWindowName$(wnd)
+ if!checkwindow(wnd)then return ""
  return win_name$[wnd and nuwidmask]
 end
 common def SetWindowName wnd,name$
+ if!checkwindow(wnd)then return
  win_name$[wnd and nuwidmask]=name$
 end
 COMMON DEF GetWindowWidth(WND)
@@ -1723,6 +1824,7 @@
  RETURN NUWIDToWND(WIN_PREV[WND AND NUWIDMASK])
 END
 ''WINDOW GRAPHIC
+VAR GB_WND
 COMMON DEF GBeginWindow(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
@@ -1736,6 +1838,7 @@
  GCLIP 1,AX,AY,AX+W,AY+H
  IF WIN_BEGIN[NUWID]>=2THEN RETURN 0
  WIN_BEGIN[NUWID]=TRUE
+ GB_WND=NUWID
  GCLS
  RETURN 0
 END
@@ -1754,12 +1857,14 @@
  VAR AY=WIN_RY[NUWID]
  VAR W=WIN_WIDTH[NUWID]
  VAR H=WIN_HEIGHT[NUWID]
+ GB_WND=NUWID
  GPAGE OTW_SP,OTW_BP
  GCLIP 1,AX,AY,AX+W,AY+H
  GCLS' RGB(224,224,224)
  RETURN 0
 END
 COMMON DEF GEndWindow(WND)
+ GB_WND=0
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
  IF WIN_HIDE[NUWID]THEN RETURN WIN_NODRAW
@@ -1810,9 +1915,10 @@
   PNUWID=WIN_NEXT[PNUWID]
  WEND
  GPAGE OTW_SP,OTW_DP
- GCLIP 1,0,0,400,240
+ GCLIP 1,0,0,400,239
  GCOPY OTW_BP,AX,AY,AX+W,AY+H,AX,AY,0
  IF WIN_SP[NUWID]AND 512THEN OTW_SPCHR NUWID
+ IF MAINCNT-OTW_LASTUPD>5THEN UpdateMouse
  RETURN 0
 END
 DEF OTW_SPCHR NUWID
@@ -1853,11 +1959,22 @@
  VAR AY=WIN_FY[WND AND NUWIDMASK]
  GLOAD X+AX,Y+AY,W,H,IMG,FLG,MODE
 END
+COMMON DEF GSAVEImage IMG,WND,X,Y,W,H,IX,IY
+ IF (WND AND NUWIDMASK)==GB_WND THEN RETURN
+ IF!CheckImage(IMG)THEN RETURN
+ VAR PTR=IMAGE_PTR[IMG AND 4095]+IX*IY
+ DIM I[W*H]
+ ReadArray PTR,I,0,W*H
+ VAR AX=WIN_FX[WND AND NUWIDMASK]
+ VAR AY=WIN_FY[WND AND NUWIDMASK]
+ GSAVE AX+X,AY+Y,W,H,I,1
+ WriteArray PTR,I,0,W*H
+END
 COMMON DEF GPRINTWindowCC WND,X,Y,STR$,PAL
  GPRINTWindow WND,X,Y,STR$,OTW_CONSOLEPAL[PAL]
 END
 COMMON DEF GLINEArrayMemory PTR,W,H,X,Y,X2,Y2,COL
-'COL=RGBToShort(COL)
+ COL=RGBToShort(COL)
  DIM M[0]
  M=GetRawMemory()
  VAR I
@@ -1925,6 +2042,7 @@
 RETURN
  VAR E=GBEGINWindow(WND)
  IF E THEN RETURN
+ GCLSWindow WND,RGB(0,128,128)
  GFILLWindow WND,0,0,32,32,RGB(255,0,0)
  E=GENDWindow(WND)
 END
@@ -2088,8 +2206,8 @@
 END
 DEF WindowDragFrame WND,MX,MY,A1X,A2Y
  VAR NUWID=WND AND NUWIDMASK
- DEC MX,WIN_AX[WIN_PARENT[NUWID]]'WIN_Y[NUWID]WIN_FW1[WIN_PARENT[NUWID]]
- DEC MY,WIN_AY[WIN_PARENT[NUWID]]'WIN_FH1[WIN_PARENT[NUWID]]
+ DEC MX,WIN_RFX[WIN_PARENT[NUWID]]'WIN_Y[NUWID]WIN_FW1[WIN_PARENT[NUWID]]
+ DEC MY,WIN_RFY[WIN_PARENT[NUWID]]'WIN_FH1[WIN_PARENT[NUWID]]
  VAR X=MX+A1X
  VAR Y=MY+A2Y
  VAR E=MoveWindow(WND,X,Y)
@@ -2125,7 +2243,7 @@
  ButtonPainter W,C,T,0,0
 END
 DEF ToggleButtonLMouseUP W,C,T,X,Y
- VAR E=SendNotificationWindow(GetParentWindow(W),W,GetWindowVar(W,0))
+ VAR E=SendNotificationWindow(GetParentWindow(W),W,GetWindowVar(W,1))
 'SetWindowVar W,1,FALSE
  ButtonPainter W,C,T,0,0
 END
@@ -2505,11 +2623,25 @@
   PrintConsole "OTYA 3D WINDOW SYSTEM"+LF$()
   PrintConsole "====================="+LF$()
   PrintConsole "Ver 5.0-B"+LF$()
-  BEEP 94,-1000
+' BEEP 94,-1000
+  VAR M1$,M2$,M3$,M4$,M5$,M6$
+  M1$=":1T140<<C8 C8&C2."
+  M2$=":2T140<G8 G8&G2."
+  M3$=":3T140<E8 E8&E2."
+  M4$=":4T140>>>><<G8 G8&G2."
+  M5$=":5T140>>>><<E8 E8&E2."
+  M6$=":6T140>>>><<C8 C8&C2."
+  BGMPLAY M1$+M2$+M3$+M4$+M5$+M6$
+'  BEEP 96
   PrintConsole "Loading font..."+LF$()
   OTW_LOADFONT
+'  BEEP 97
   PrintConsole "Init..........."+LF$()
   OTWRunning=TRUE
+  OTW_WIN_INITARRAY
+  OTW_CTL_INITARRAY
+  OTW_INIT_ERR
+  PrintConsoleln "Init setting..."
   OTW_USEBTN=&B11001111
   OTW_FPS=1
   OTW_FPSCNT=1
@@ -2520,6 +2652,7 @@
   OTW_SP=0
   OTW_BP=1
   OTW_GP=2
+  PrintConsoleln "Init screen..."
   MouseClipDef
   GPAGE OTW_SP,OTW_SP
   GPRIO 1023
@@ -2541,9 +2674,9 @@
   GCLS RGB(0,128,128)
   GPAGE OTW_SP,OTW_DP
   GPRIO 1023
-  GCLS RGB(0,192,128)
+ ' GCLS RGB(0,192,128)
 ' GCLS RGB(0,0,255)
-GCLS 
+'GCLS 
   OTW_INITSP
   GPRIO 1023
   GOTO @_
@@ -2585,19 +2718,16 @@
   DISPLAY 0
   @_
   OTW_INIT=TRUE
-  OTW_WIN_INITARRAY
-  OTW_CTL_INITARRAY
-  OTW_INIT_ERR
   VAR E
   NewControl "DESKTOP" OUT WIN_ROOTCTL,E
   E=SetControlPainter(WIN_ROOTCTL,"DesktopPainter")
   NewTopLevelWindow WIN_ROOTCTL,"DESKTOP",400,240 OUT WIN_ROOTWND,E
   ExtendControl "HELLO",GetWindowControl() OUT TSTCTL,E
-' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND,E
+' NewTopLevelWindow TSTCTL,"HELLO",164,164 OUT TSTWND,E
 ' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND2,E
 ' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND3,E
   E=SetControlPainter(TSTCTL,"HELLOPainter")
-  GCLIP 1,0,0,400,240
+  GCLIP 1,0,0,400,239
   VISIBLE 1,1,1,1
   OTW_MOUSEX=(400-16)/2
   OTW_MOUSEY=(240-16)/2
@@ -2630,12 +2760,12 @@
   OTW_MOVWINCOL=RGB(128,128,128,128)
   OTW_MOVWINCOL=RGB(128,255,255,255)
   SPCOLOR OTW_MOVWINSP,OTW_MOVWINCOL
+  DEC FM,FREEMEM
+  OTW_USEMEM=FM
+  PrintConsoleln FORMAT$("UsingMemory8192KB/%DKB",FM/1024)+LF$()
   CLS
   LOCATE 0,29
   NewProcess"LAUNCHER","" OUT E,E,E
-  DEC FM,FREEMEM
-  OTW_USEMEM=FM
-'  PrintConsole FORMAT$("UsingMemory8192KB/%DKB",FM/1024)+LF$()
  ENDIF
 RETURN
 END
@@ -2668,6 +2798,9 @@
  VAR NUWID,E
  VAR BTN=UpdateButton()
  IF MOVEMOUSE||BTN THEN
+'  IF WIN_DRAGHANDLER_USE THEN
+'   CALL WIN_DRAGHANDLER$,WIN_DRAGHANDLER_WND,OTW_MOUSEX,OTW_MOUSEY,WIN_DRAGHANDLER_A1,WIN_DRAGHANDLER_A2
+'ENDIF
   NUWID=OTWGetOvMouseNUWID()
  ENDIF
  IF BTN THEN
@@ -2823,6 +2956,7 @@
 DIM LAUNCHERLEN
 COMMON DEF LauncherPainter WND,CTL,T,A1,A2
  VAR E=CallBaseControlHandler(WND,CTL,T,A1,A2)
+ IF GBeginWindow(WND)THEN RETURN
  VAR I
  FOR I=0TO LAUNCHERLEN-1
   GPRINTWindow WND,0,I*8+1,LAUNCHERITEM$[I],RGB(0,0,0)
@@ -2847,10 +2981,8 @@
   VAR WND,E
   NewTopLevelWindow LAUNCHERCTL,"LAUNCHER",80,LAUNCHERLEN*8 OUT WND,E
   SetProcessVar WND
-  E=SetControlPainter(LAUNCHERCTL,"LauncherPainter")
-  E=SetControlLMouseUpHandler(LAUNCHERCTL,"LauncherLMouseUP")
  ELSE
-  LAUNCHERLEN=8
+  LAUNCHERLEN=10
   LAUNCHERITEM$=NewArray$(LAUNCHERLEN)
   LAUNCHERITEM$[0]="WCLOCK"
   LAUNCHERITEM$[1]="RUN"
@@ -2860,8 +2992,11 @@
   LAUNCHERITEM$[5]="TXTED"
   LAUNCHERITEM$[6]="PRGED"
   LAUNCHERITEM$[7]="OTYFIL"
-' LAUNCHERITEM$[8]="MEMVIEW"
+  LAUNCHERITEM$[8]="OTYDOC"
+  LAUNCHERITEM$[9]="MPLAY"
   ExtendControl "LAUNCHER",GetWindowControl() OUT LAUNCHERCTL,E
+  E=SetControlPainter(LAUNCHERCTL,"LauncherPainter")
+  E=SetControlLMouseUpHandler(LAUNCHERCTL,"LauncherLMouseUP")
   I_LAUNCHER
  ENDIF
 END
@@ -2909,6 +3044,7 @@
 COMMON DEF L_WCLOCK
  VAR E
  WCLOCKWND=GetProcessVar()
+ VAR H,M,S
 ' E=UpdateWindow(WCLOCKBC)
  E=PeekWindowEvent(WCLOCKWND)
 ' IF E==RepaintControlEvent()THEN
@@ -2918,11 +3054,16 @@
 ' ENDIF
  E=UpdateWindow(WCLOCKWND)
  IF E THEN ExitProcess 1
- IF MAINCNT-WCLOCKTIM>=60 THEN
-  WCLOCKTIM=MAINCNT/60
-  WCLOCKTIM=WCLOCKTIM*60
+ TMREAD OUT H,M,S
+ IF S!=GetWindowVar(WCLOCKWND,0)THEN
   WCLOCK_RP
+  SetWindowVar WCLOCKWND,0,S
  ENDIF
+' IF MAINCNT-WCLOCKTIM>=60 THEN
+'  WCLOCKTIM=MAINCNT/60
+'  WCLOCKTIM=WCLOCKTIM*60
+'  WCLOCK_RP
+' ENDIF
 ' E=UpdateWindow(WCLOCKBC2)
  
 END
@@ -3030,6 +3171,7 @@
    OTW_MOUSEY=OTW_MOUSEY#
   ENDIF
  ENDIF
+ OTW_LASTUPD=MAINCNT
 END
 COMMON DEF OTWSAVE VER$
  SAVE"PRG1:OTW"+VER$
@@ -3083,7 +3225,7 @@
  IF CallBaseControlHandler(WND,CTL,T,A1,A2)THEN RETURN
  DIM A[64*64]
  ReadArray GetWindowVar(WND,2),A,0,LEN(A)
- GLOADWindow WND,0,0,64,64,A,0,0
+ GLOADWindow WND,0,0,64,64,A,1,0
  VAR E=GEndWindow(WND)
 END
 COMMON DEF PaintLDWN WND,CTL,T,X,Y
@@ -3641,12 +3783,12 @@
 END
 '===End text editor===
 COMMON DEF TXTEDNOTIF W,C,T,A1,A2
- IF A1==2THEN
-  VOID NewOpenFileDialog(W)
+ IF A2==2THEN
+  VOID OpenFileDialog(W,"TXT")
  ENDIF
 END
 COMMON DEF TXTEDSTRNOTIF W,C,T,A1,A2$
- TextBoxExSetText GetWindowVar(W,0),LOAD("TXT:"+RIGHT$(A2$,LEN(A2$)-1),0)
+ TextBoxExSetText GetWindowVar(W,0),LoadFile$(RIGHT$(A2$,LEN(A2$)-1))
 END
 COMMON DEF I_TXTED
  IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
@@ -3660,7 +3802,7 @@
   E=SetControlNotifHandler(TXTEDCTL,"TXTEDNOTIF")
   E=SetControlStrNotifHandler(TXTEDCTL,"TXTEDSTRNOTIF")
  ENDIF
- NewTopLevelMenuWindow TXTEDCTL,"TXTED",128,64 OUT WND,E
+ NewTopLevelStyleWindow TXTEDCTL,"TXTED",128,64,WindowMenuStyle()OR WindowResizableStyle() OUT WND,E
  VAR MENU
  NewMenu OUT MENU,E
  AddMenuItem MENU,"New",1
@@ -3722,10 +3864,12 @@
 END
 COMMON DEF RICHTEXTWindow WND,X,Y,C,STYLE,SIZE,COL
  VAR I
- IF SIZE==8&&!(STYLE AND 3)THEN
+ IF SIZE==8&&(STYLE AND 3)!=3THEN
   GPUTCHRWindow WND,X,Y,C,COL
+  IF STYLE AND 1 THEN GPUTCHRWindow WND,X+1,Y,C,COL
  ELSE
   GPUTCHRWindow WND,X,Y,C,COL
+  IF STYLE AND 1 THEN GPUTCHRWindow WND,X+1,Y,C,COL
  ENDIF
  IF STYLE AND 4THEN
   GLINEWindow WND,X,Y+SIZE/2,X+SIZE,Y+SIZE/2,COL
@@ -3753,11 +3897,18 @@
 DIM OTYDOC_CurLine[0]
 DIM OTYDOC_WSIZE[0]
 DIM OTYDOC_STYLE[0]
+DIM OTYDOC_WSIZE2[0]
+DIM OTYDOC_STYLE2[0]
 DIM OTYDOC_COL[0]
 DIM OTYDOC_CX[0]
+
+VAR OTYDOC_BEG$
+VAR OTYDOC_END$
 COMMON DEF INIT_OTYDOC
  VAR E
  IF!OTYDOCCTL THEN
+  OTYDOC_BEG$=CHR$(&HB10B)
+  OTYDOC_END$=CHR$(&HE0F0)
   NewControl "OTYDoc" OUT OTYDOCCTL,E
   E=SetControlPainter(OTYDOCCTL,"OTYDocPainter")
   E=SetControlKeyHandler(OTYDOCCTL,"OTYDocKey")
@@ -3781,6 +3932,8 @@
   OTYDOC_CurLine=NewArray(OTYDOC_WSIZ)
   OTYDOC_WSIZE=NewArray(OTYDOC_WSIZ)
   OTYDOC_STYLE=NewArray(OTYDOC_WSIZ)
+  OTYDOC_WSIZE2=NewArray(OTYDOC_WSIZ)
+  OTYDOC_STYLE2=NewArray(OTYDOC_WSIZ)
   OTYDOC_COL=NewArray(OTYDOC_WSIZ)
   OTYDOC_CX=NewArray(OTYDOC_WSIZ)
   OTYDOC_WFREE=1
@@ -3862,10 +4015,13 @@
  IF!OTYDOC_GetData(WND)THEN OTYDOC_NewCTL WND
  VAR D=OTYDOC_GetData(WND)
  VAR I=OTYDOC_ShowLine[D]
+ VAR CL=OTYDOC_CurLine[D]
+ VAR CX=OTYDOC_CX[D]
  VAR Y=2,X=2
  VAR ST=0
  VAR SZ=8
  VAR COL=RGB(0,0,0)
+ VAR OJ
  WHILE I
   VAR YSZ=OTYDOC_SIZE[I]
   VAR V$=OTYDOC_VAL$[I]
@@ -3875,23 +4031,46 @@
   FOR J=0TO L
    C=ASC(V$[J])
    IF C==&Hb10bTHEN
+   IF I==CL THEN
+    IF CX==J THEN
+     GFILLWindow WND,X,Y+YSZ-SZ-1,X+1,Y+YSZ-1,RGB(0,0,0)
+     OTYDOC_STYLE[D]=ST
+    ENDIF
+   ENDIF
     INC J
     C=ASC(V$[J])
+    ON C GOTO@FNT,@COL,@STY
+    CONTINUE
+    @FNT'0
     INC J
     A=ASC(V$[J])
-    ON C GOTO@FNT,@COL
-    CONTINUE
-    @FNT
     SZ=A
     CONTINUE
-    @COL
+    @COL'1
+    INC J
+    A=ASC(V$[J])
     COL=ShortToRGB(A)
     CONTINUE
+    @STY'2
+    INC J
+    A=ASC(V$[J])
+    ST=A
+    CONTINUE
    ENDIF
    RICHTEXTWindow WND,X,Y+YSZ-SZ,C,ST,SZ,COL
-   ?HEX$(COL)
+   IF I==CL THEN
+    IF CX==J THEN
+     GFILLWindow WND,X,Y+YSZ-SZ-1,X+1,Y+YSZ-1,RGB(0,0,0)
+     OTYDOC_STYLE[D]=ST
+    ENDIF
+   ENDIF
+'   ?HEX$(COL)
    INC X,SZ
   NEXT
+  IF I==CL&&CX>L THEN
+   GFILLWindow WND,X,Y+YSZ-SZ-1,X+1,Y+YSZ-1,RGB(0,0,0)
+   OTYDOC_STYLE[D]=ST
+  ENDIF
   INC Y,YSZ
   I=OTYDOC_NEXT[I]
  WEND
@@ -3899,18 +4078,134 @@
 END
 COMMON DEF OTYDocChFocus WND,CTL,TYPE,A1,A2
 END
+
+DEF OTYDOC_UpCursor(WND)
+  VAR C=GetWindowVar(WND,2)
+  IF TXTBOXEX_PREV[C]THEN
+   VAR L=TXTBOXEX_PREV[GetWindowVar(WND,1)]
+   C=TXTBOXEX_PREV[C]
+   IF L==C THEN
+     SetWindowVar WND,1,L
+   ENDIF
+   SetWindowVar WND,2,C
+   RETURN 1
+  ENDIF
+  RETURN 0
+END
+DEF OTYDOC_DownCursor(WND)
+  VAR C=GetWindowVar(WND,2)
+  IF TXTBOXEX_NEXT[C]THEN
+   IF GetWindowVar(WND,6)==C THEN
+    VAR L=TXTBOXEX_NEXT[GetWindowVar(WND,1)]
+    IF L THEN
+     SetWindowVar WND,1,L
+    ENDIF
+   ENDIF
+   C=TXTBOXEX_NEXT[C]
+   SetWindowVar WND,2,C
+   RETURN 1
+  ENDIF
+  RETURN 0
+END
+COMMON DEF OTYDOCButton WND,CTL,T,BTN,_
+ VAR F=GetWindowVar(WND,4),U,R=GetWindowVar(WND,5)
+ IF!BTN THEN SetWindowVar WND,5,0RETURN
+ IF MAINCNT-F<R THEN RETURN
+ IF BTN AND 1 THEN
+  IF TXTED_UpCursor(WND)THEN
+   OTYDOCRepaint WND
+  ENDIF
+  U=1
+ ENDIF
+ IF BTN AND 2 THEN
+  IF TXTED_DownCursor(WND)THEN
+   OTYDOCRepaint WND
+  ENDIF
+  U=1
+ ENDIF
+ VAR D=GetWindowVar(WND,0)
+ IF BTN AND 4THEN
+  VAR CX=OTYDOC_CX[D]
+  IF CX THEN
+   DEC OTYDOC_CX[D]
+   OTYDOCRepaint WND
+  ELSE
+   IF OTYDOC_UpCursor(WND)THEN
+    VAR C=OTYDOC_CurLine[D]
+    OTYDOC_CX[D]=LEN(OTYDOC_VAL$[C])
+    OTYDOCRepaint WND
+   ENDIF
+  ENDIF
+  U=1
+ ENDIF
+ IF BTN AND 8THEN
+  CX=OTYDOC_CX[D]
+  INC OTYDOC_CX[D]
+  C=OTYDOC_CurLine[D]'GetWindowVar(WND,2)
+  VAR V$=OTYDOC_VAL$[C]
+  IF LEN(V$)<=CX||LEN(V$)-1==CX&&V$[CX]==LF$()THEN
+   IF OTYDOC_DownCursor(WND)THEN
+    OTYDOC_CX[D]=0
+   ENDIF
+  ENDIF
+  OTYDOCRepaint WND
+  U=1
+ ENDIF
+ IF U THEN
+  IF R==0 THEN
+   SetWindowVar WND,5,20
+  ELSE
+   SetWindowVar WND,5,3
+  ENDIF
+  SetWindowVar WND,4,MAINCNT
+ ENDIF
+END
+
 COMMON DEF OTYDocKey WND,CTL,TYPE,KEY,A2
  VAR D=OTYDOC_GetData(WND)
  VAR S=OTYDOC_ShowLine[D]
  VAR C=OTYDOC_CurLine[D]
+ VAR X=OTYDOC_CX[D]
  IF!S THEN
-  S=OTYDOC_NewLine("This is Test",0)
+  S=OTYDOC_NewLine("",0)
   OTYDOC_ShowLine[D]=S
   OTYDOC_CurLine[D]=S
+  C=S
  ENDIF
+  VAR I$=CHR$(KEY)
+  IF OTYDOC_STYLE[D]!=OTYDOC_STYLE2[D]THEN
+   I$=CHR$(&HB10B)+CHR$(2)+CHR$(OTYDOC_STYLE2[D])+I$+CHR$(&HB10B)+CHR$(2)+CHR$(OTYDOC_STYLE[D])
+   OTYDOC_STYLE[D]=OTYDOC_STYLE2[D]
+   INC OTYDOC_CX[D],3
+  ENDIF
+  INC OTYDOC_CX[D]
+  IF!LEN(OTYDOC_VAL$[C])THEN
+   OTYDOC_VAL$[C]=I$
+  ELSE
+   InsertStrB OTYDOC_VAL$[C],X,I$
+  ENDIF
  OTYDOCRepaint WND
+ ?OTYDOC_VAL$[C]
 END
 '====EVENT HANDLER====
+
+'RichTextEditor API
+COMMON DEF RTESetBold WND,F
+ VAR D=OTYDOC_GetData(WND)
+ IF F THEN
+  OTYDOC_STYLE2[D]=OTYDOC_STYLE2[D] OR 1
+ ELSE
+  OTYDOC_STYLE2[D]=OTYDOC_STYLE2[D] AND NOT 1
+ ENDIF
+END
+'==================
+COMMON DEF OTYDOC_WNDNOTIF WND,CTL,TYPE,CW,F
+ VAR N$=GetWindowName$(CW)
+ IF N$=="B"THEN
+  RTESetBold GetWindowVar(WND,0),F
+  RETURN
+ ENDIF
+END
 COMMON DEF I_OTYDOC
  IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
   PrintConsole "Require window system"+LF$()
@@ -3921,10 +4216,13 @@
  IF!OTYDOC_WNDCTL THEN
   INIT_OTYDOC
   ExtendControl "OTYDOC",GetWindowControl() OUT OTYDOC_WNDCTL,E
+  E=SetControlNotifHandler(OTYDOC_WNDCTL,"OTYDOC_WNDNOTIF")
  ENDIF
  NewTopLevelWindow OTYDOC_WNDCTL,"OTYDOC",256,128 OUT WND,E
  SetProcessVar WND
- NewWindow OTYDOCCTL,"OTYDOC",0,12,256,120,WND,0 OUT E,E
+ VAR DOC
+ NewWindow OTYDOCCTL,"OTYDOC",0,12,256,116,WND,0 OUT DOC,E
+ SetWindowVar WND,0,DOC
  NewWindow GetToggleButtonControl(),"B",0,0,11,11,WND,0 OUT E,E
 END
 COMMON DEF L_OTYDOC
@@ -4088,24 +4386,60 @@
 COMMON DEF L_OTYFIL
  IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
 END
-VAR MEMVIEWCTL
-COMMON DEF I_MEMVIEW
+VAR MPLAYCTL
+VAR MPLAYABOUTCTL
+COMMON DEF MPLAYNOTIF WND,CTL,TYP,CW,ID
+ VAR N$=GetWindowName$(CW)
+ IF N$==""THEN
+  BGMPLAY LoadFile$(GetWindowName$(GetWindowVar(WND,0)))
+  RETURN
+ ENDIF
+ IF ID==1THEN
+  VOID OpenFileDialog(WND,"TXT")
+  RETURN
+ ENDIF
+ IF ID==3THEN
+  VOID DeleteWindow(WND)
+  RETURN
+ ENDIF
+END
+COMMON DEF MPLAYSNOTIF W,C,T,A1,A2$
+ SetWindowName GetWindowVar(W,0),RIGHT$(A2$,LEN(A2$)-1)
+ VOID RepaintWindow(GetWindowVar(W,0))
+END
+COMMON DEF I_MPLAY
  IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
   PrintConsole "Require window system"+LF$()
   ExitProcess 1
   RETURN
  ENDIF
  VAR WND,E
- IF!MEMVIEWCTL THEN
-  ExtendControl "MEMVIEW",GetWindowControl() OUT MEMVIEWCTL,E
+ IF!MPLAYCTL THEN
+  ExtendControl "MPLAY",GetWindowControl() OUT MPLAYCTL,E
+  E=SetControlNotifHandler(MPLAYCTL,"MPLAYNOTIF")
+  E=SetControlStrNotifHandler(MPLAYCTL,"MPLAYSNOTIF")
+  ExtendControl "MPLAYABOUT",GetWindowControl() OUT MPLAYABOUTCTL,E
  ENDIF
- NewTopLevelWindow MEMVIEWCTL,"MEMVIEW",128,96 OUT WND,E
-SetProcessVar WND
+ VAR MENU
+ NewTopLevelMenuWindow MPLAYCTL,"MPLAY",128,10 OUT WND,E
+ NewMenu OUT MENU,E
+ AddMenuItem MENU,"Open",1
+ AddMenuItem MENU,"Preset",2
+ AddMenuItem MENU,"Exit",3
+ AddSubMenuItem GetWindowMenu(WND),"File",MENU
+ NewMenu OUT MENU,E
+ AddMenuItem MENU,"About",4
+ AddSubMenuItem GetWindowMenu(WND),"Help",MENU
+ SetProcessVar WND
+ VAR W2
+ NewWindow GetButtonControl(),"",0,0,10,10,WND,0 OUT W2,E
+ NewWindow GetLabelControl(),"",12,2,128-12,8,WND,1 OUT W2,E
+ SetWindowVar WND,0,W2
 END
-COMMON DEF L_MEMVIEW
+COMMON DEF L_MPLAY
  IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
-' ?FREEMEM,OTW_USEMEM
 END
+
 'Init common dialogs
 VAR CTL_FILDIA
 DEF OTW_FileDialog
@@ -4133,18 +4467,27 @@
  DIM F$[0]
  GetFiles F$,""
  VAR I
+ VAR T$=GetWindowName$(WND)
+ T$=RIGHT$(T$,LEN(T$)-5)
+ T=0
+ IF T$=="TXT"THEN T=1
+ IF T$=="DAT"THEN T=2
  FOR I=0TO LEN(F$)-1
+  IF F$[I][0]==" "&&T==1THEN CONTINUE
+  IF F$[I][1]=="*"&&T==2THEN CONTINUE
   AddListBoxItem L,F$[I]
  NEXT
  SetWindowVar WND,0,L
  NewWindow GetButtonControl(),"OK",119,2,20,12,WND,0 OUT L,E
  NewWindow GetButtonControl(),"Cancel",119,16,50,12,WND,0 OUT L,E
 END
-COMMON DEF NewOpenFileDialog(OWNER)
+COMMON DEF OpenFileDialog(OWNER,TYPE$)
  IF!CTL_FILDIA THEN
   OTW_FileDialog
  ENDIF
- VAR E=NewModalDialogBox(CTL_FILDIA,"Open",170,64,OWNER)
+ IF TYPE$!="TXT"&&TYPE$!="DAT"THEN TYPE$=""
+ VAR TITLE$=TYPE$
+ VAR E=NewModalDialogBox(CTL_FILDIA,"Open "+TYPE$,170,64,OWNER)
  RETURN E
 END
 
@@ -4164,14 +4507,19 @@
  OTW_FNTTMP=NewArray(64)
  OTW_FNTPAL=NewArray(2)
  OTW_FNTTBL=NewArray(65536)
- FOR I=1TO 65535
+ PrintConsoleln "Init font table..."
+ FOR I=0TO 127
   OTW_FNTTBL[I]=703
  NEXT
+ FOR I=1TO 511
+  COPY OTW_FNTTBL,I*128,OTW_FNTTBL,0,128
+ NEXT
  OTW_FNTTBL[10]=13
  OTW_LOADFNTTBL
  IF!CHKFILE("DAT:OTW_FONT")THEN
   OTW_GENFONT
  ELSE
+  PrintConsoleln "Load DAT:OTW_FONT"
   LOAD"DAT:OTW_FONT",OTW_FNT,0
  ENDIF
  @FONT
