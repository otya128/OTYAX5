diff -u OTW.TXT OTWF
--- OTW.TXT
+++ OTWF
@@ -9,6 +9,7 @@
 VAR OTW_MOUSEY
 VAR OTW_MOUSEX#,OTW_MOUSEY#
 VAR OTW_FNT1[0,0]'0x20~0x7F
+VAR OTW_FNT1W[0]'0x20~0x7F
 VAR OTW_FNT2[0,0]'
 VAR OTW_FNT3[0,0]'
 VAR OTW_CONSOLEPAL[0]
@@ -64,6 +65,8 @@
 VAR OTW_SP
 'BUFFER PAGE
 VAR OTW_BP
+'GPAGE
+VAR OTW_GP
 VAR WIN_FWIDTH1
 VAR WIN_FHEIGHT1
 VAR WIN_FWIDTH2
@@ -168,6 +171,7 @@
 VAR CTL_KEYHANDLER
 VAR CTL_BTNHANDLER
 VAR CTL_CHFOCUSHANDLER
+VAR CTL_MOUSEMVHANDLER
 VAR CTL_LBTNFLG
 VAR CTL_RBTNFLG
 VAR CTL_BTNDWNFLG
@@ -205,6 +209,7 @@
  CTL_KEYHANDLER=7
  CTL_BTNHANDLER=8
  CTL_CHFOCUSHANDLER=9
+ CTL_MOUSEMVHANDLER=10
  'A1=îˆŸ,A2=bit16~31Y,Xbit0~15
  CTL_LBTNFLG=4
  CTL_RBTNFLG=8
@@ -352,6 +357,11 @@
  CTL_HANDLER$[CTL AND 4095,CTL_CHFOCUSHANDLER]=HANDLER$
  RETURN 0
 END
+COMMON DEF SetControlMouseMoveHandler(CTL,HANDLER$)
+ IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
+ CTL_HANDLER$[CTL AND 4095,CTL_MOUSEMVHANDLER]=HANDLER$
+ RETURN 0
+END
 DEF SetControlFrameSize(CTL,W1,H1,W2,H2)
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
  VAR C=CTL AND 4095
@@ -572,10 +582,8 @@
    ENDIF
   WEND
  ENDIF
- WIN_TopLevelX=WIN_TopLevelX+8
- WIN_TopLevelY=WIN_TopLevelY+8
- WIN_TopLevelX=WIN_TopLevelX+8
- WIN_TopLevelY=WIN_TopLevelY+8
+ INC WIN_TopLevelX,WIN_FHEIGHT1
+ INC WIN_TopLevelY,WIN_FHEIGHT1
  WIN_FW1[NUWID]=CTL_FW1[NUCID]'WIN_TopLevelX
  WIN_FH1[NUWID]=CTL_FH1[NUCID]'WIN_TOPLEVELY
  WIN_AX[NUWID]=WIN_TopLevelX
@@ -733,32 +741,33 @@
 DEF RepaintAllWindow X,Y,W,H
  VAR NXT=WIN_ROOTWND AND NUWIDMASK
  VAR B=NXT
- WHILE NXT
-  VOID RepaintWindow(NXT OR(WIN_WID[NXT]<<WIDSHIFT))
-  OTW_DrawMap NXT
-  IF WIN_CHILD[NXT]THEN
-   B=WIN_CHILD[NXT]
+' WHILE NXT
+'  VOID RepaintWindow(NXT OR(WIN_WID[NXT]<<WIDHIFT))
+'  OTW_DrawMap NXT
+'  IF WIN_CHILD[NXT]THEN
+'   B=WIN_CHILD[NXT]
    WHILE B
    VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
     OTW_DrawMap B
+    IF WIN_CHILD[B]THEN
+     B=WIN_CHILD[B]
+     CONTINUE
+    ENDIF
     IF!WIN_NEXT[B]THEN
      WHILE B
       B=WIN_PARENT[B]
-      IF B==NXT THEN BREAK
-      IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
+  '    IF B==NXT THEN BREAK
+      IF WIN_NEXT[B]THEN B=WIN_NEXT[B]BREAK
      WEND
-     IF B==NXT THEN BREAK
+     IF!B THEN RETURN
+ '    IF B==NXT THEN BREAK
     ENDIF
-    IF WIN_CHILD[B]THEN
-     B=WIN_CHILD[B]
-     CONTINUE
-    ENDIF
     B=WIN_NEXT[B]
-    IF B==NXT THEN BREAK
+ '   IF B==NXT THEN BREAK
    WEND
-  ENDIF
-  NXT=WIN_NEXT[NXT]
- WEND
+'  ENDIF
+'  NXT=WIN_NEXT[NXT]
+' WEND
 END
 COMMON DEF MoveWindow(WND,X,Y)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
@@ -943,13 +952,16 @@
 COMMON DEF SendChFocusWindow(WND,FLG)
  RETURN SendWindowEvent(WND,CTL_CHFOCUSHANDLER,FLG,0)
 END
+DEF MouseMoveWindow(NUWID)
+ RETURN SendWindowEvent(NUWIDToWND(NUWID),CTL_MOUSEMVHANDLER,OTW_MOUSEX-WIN_AX[NUWID]-WIN_FW1[NUWID],OTW_MOUSEY-WIN_AY[NUWID]-WIN_FH1[NUWID])
+END
 DEF LMouseUpWindow(WND)
  VAR NUWID=WND AND NUWIDMASK
- RETURN SendWindowEvent(WND,CTL_LBTNUPHANDLER,OTW_MOUSEX-WIN_AX[NUWID],OTW_MOUSEY-WIN_AY[NUWID])
+ RETURN SendWindowEvent(WND,CTL_LBTNUPHANDLER,OTW_MOUSEX-WIN_AX[NUWID]-WIN_FW1[NUWID],OTW_MOUSEY-WIN_AY[NUWID]-WIN_FH1[NUWID])
 END
 DEF LMouseDownWindow(WND)
  VAR NUWID=WND AND NUWIDMASK
- RETURN SendWindowEvent(WND,CTL_LBTNDWNHANDLER,OTW_MOUSEX-WIN_AX[NUWID],OTW_MOUSEY-WIN_AY[NUWID])
+ RETURN SendWindowEvent(WND,CTL_LBTNDWNHANDLER,OTW_MOUSEX-WIN_AX[NUWID]-WIN_FW1[NUWID],OTW_MOUSEY-WIN_AY[NUWID]-WIN_FH1[NUWID])
 END
 DEF LMouseDownWindowOnFrame(WND)
  VAR NUWID=WND AND NUWIDMASK
@@ -1216,7 +1228,32 @@
 COMMON DEF GPRINTWindowCC WND,X,Y,STR$,PAL
  GPRINTWindow WND,X,Y,STR$,OTW_CONSOLEPAL[PAL]
 END
-
+COMMON DEF GLINEArrayMemory PTR,W,H,X,Y,X2,Y2,COL
+'COL=RGBToShort(COL)
+ DIM M[0]
+ M=GetRawMemory()
+ VAR I
+ VAR DX=ABS(X2-X)
+ VAR DY=ABS(Y2-Y)
+ VAR SX,SY
+ IF X<X2 THEN SX=1 ELSE SX=-1
+ IF Y<Y2 THEN SY=1 ELSE SY=-1
+ VAR ERR=DX-DY
+ VAR E2
+ WHILE 1
+  IF X<W&&Y<H&&X>=0&&Y>=0THEN M[PTR+X+Y*W]=COL
+  IF X==X2&&Y==Y2 THEN RETURN
+  E2=2*ERR
+  IF E2>-DY THEN
+   DEC ERR,DY
+   INC X,SX
+  ENDIF
+  IF E2<DX THEN
+   INC ERR,DX
+   INC Y,SY
+  ENDIF
+ WEND
+END
 COMMON DEF GPRINTWindow WND,X,Y,STR$,COL
  IF!(COL AND&HFF000000)THEN RETURN
  VAR AX=WIN_FX[WND AND NUWIDMASK]
@@ -1441,11 +1478,18 @@
   OTW_DP=4
   OTW_SP=0
   OTW_BP=1
+  OTW_GP=2
   MouseClipDef
   GPAGE OTW_SP,OTW_SP
   GPRIO 1023
   GCLS
   GCLS RGB(0,192,0)
+  VAR I,J
+  FOR J=0TO 3
+   FOR I=0TO 240/4
+    GLINE 0,I+60*J,400,I+60*J,&HFF000000 OR(I*8<<J*8)'RGB(0,I*4,0)
+   NEXT
+  NEXT
   GPAGE OTW_SP,OTW_DP
   GPRIO 1023
   GCLS RGB(0,192,128)
@@ -1466,7 +1510,8 @@
   BGSCALE 0,19.5/25,19.5/25'1
   GCLS 'RGB(255,0,0)
   BACKCOLOR RGB(0,192,128)
-  VAR X,Y,I
+  VAR X,Y
+  I=0
   FOR Y=0TO 14
    FOR X=0TO 24
     BGPUT 0,X,Y,I
@@ -1535,7 +1580,7 @@
   SPVAR OTW_MOVWINSP,0,1
   CLS
   LOCATE 0,29
- NewProcess"RUN","" OUT E,E,E
+ NewProcess"LAUNCHER","" OUT E,E,E
  ENDIF
 RETURN
 END
@@ -1571,7 +1616,7 @@
  ENDIF
  IF BTN THEN
   IF BTN AND OTW_LMOUSEDWN THEN
-   E=SendChFocusWindow(NUWIDToWND(WIN_ACTIVENUWID),FALSE)
+   VAR OA=WIN_ACTIVENUWID
    WIN_ACTIVENUWID=NUWID
    IF NUWID AND WIN_FRAMEFLG THEN
     E=LMouseDownWindowOnFrame(NUWIDToWND(NUWID AND 32767))
@@ -1580,7 +1625,10 @@
    ELSE
     E=LMouseDownWindow(NUWIDToWND(NUWID))
    ENDIF
-   E=SendChFocusWindow(NUWIDToWND(WIN_ACTIVENUWID),TRUE)
+   IF WIN_ACTIVENUWID!=OA THEN
+    E=SendChFocusWindow(NUWIDToWND(OA),FALSE)
+    E=SendChFocusWindow(NUWIDToWND(WIN_ACTIVENUWID),TRUE)
+   ENDIF
   ENDIF
   IF BTN AND OTW_LMOUSEUP THEN
    IF WIN_DRAGHANDLER_USE THEN
@@ -1588,14 +1636,19 @@
     E=ClearWindowDragHandler()
    ELSE
     IF NUWID AND WIN_FRAMEFLG THEN
-     E=LMouseUpWindowOnFrame(NUWIDToWND(NUWID AND 32767))
+     E=LMouseUpWindowOnFrame(NUWIDToWND(WIN_ACTIVENUWID))
     ELSE
-     E=LMouseUpWindow(NUWIDToWND(NUWID))
+     E=LMouseUpWindow(NUWIDToWND(WIN_ACTIVENUWID))
     ENDIF
    ENDIF
   ENDIF
  ENDIF
- IF BUTTON()AND 64THEN DUMP_WND
+ IF MOVEMOUSE THEN
+  IF!(NUWID AND WIN_FRAMEFLG)THEN
+   E=MouseMoveWindow(NUWID)
+  ENDIF
+ ENDIF
+' IF BUTTON()AND 64THEN DUMP_WND
  OTW_OLDMOUSEX=OTW_MOUSEX
  OTW_OLDMOUSEY=OTW_MOUSEY
  VAR K$=INKEY$()
@@ -1695,19 +1748,29 @@
  NEXT
  E=GEndWindow(WND)
 END
+COMMON DEF LauncherLMouseUP WND,CTL,T,X,Y
+ VAR E=CallBaseControlHandler(WND,CTL,T,X,Y)
+ VAR ITEM=Y/8
+ IF ITEM>=LAUNCHERLEN THEN
+  RETURN
+ ENDIF
+ NewProcess LAUNCHERITEM$[ITEM],"" OUT E,E,E
+END
 COMMON DEF I_LAUNCHER
  IF LAUNCHERCTL THEN
   VAR WND,E
-  NewTopLevelWindow LAUNCHERCTL,"LAUNCHER",64,64 OUT WND,E
+  NewTopLevelWindow LAUNCHERCTL,"LAUNCHER",80,LAUNCHERLEN*8 OUT WND,E
   SetProcessVar WND
   E=SetControlPainter(LAUNCHERCTL,"LauncherPainter")
+  E=SetControlLMouseUpHandler(LAUNCHERCTL,"LauncherLMouseUP")
  ELSE
-  LAUNCHERLEN=4
+  LAUNCHERLEN=5
   LAUNCHERITEM$=NewArray$(LAUNCHERLEN)
   LAUNCHERITEM$[0]="WCLOCK"
   LAUNCHERITEM$[1]="RUN"
   LAUNCHERITEM$[2]="ABOUT"
   LAUNCHERITEM$[3]="LAUNCHER"
+  LAUNCHERITEM$[4]="PAINT"
   ExtendControl "LAUNCHER",GetWindowControl() OUT LAUNCHERCTL,E
   I_LAUNCHER
  ENDIF
@@ -1996,3 +2059,89 @@
 DATA &B00000000
 DATA "END"
 END
+COMMON DEF I_CREATEOTW
+ ?"OTW Develop Tool"
+ VAR K$
+ INC K$,"VAR _1CTL"+LF$()
+ INC K$,"COMMON DEF I__1"+LF$()
+ INC K$," VAR WND,E"+LF$()
+ INC K$," IF!_1CTL THEN"+LF$()
+ INC K$,"  ExtendControl _Q_2_Q,GetWindowControl() OUT _1CTL,E"+LF$()
+ INC K$," ENDIF"+LF$()
+ INC K$," NewTopLevelWindow _1CTL,_Q_2_Q,_W,_H OUT WND,E  SetProcessVar WND"+LF$()
+ INC K$,"END"+LF$()
+ INC K$,"COMMON DEF L__1"+LF$()
+ INC K$,"IF UpdateWindow(GetProcessVar())THEN ExitProcess 1"+LF$()
+ INC K$,"END
+ VAR _1$
+ VAR _2$,_W,_H
+ VAR _Q$=CHR$(34)
+ LINPUT "ProcessName?";_1$
+ LINPUT "WindowName?";_2$
+ INPUT "Width";_W
+ INPUT "Height";_H
+ K$=ReplaceStr$(K$,"_1",_1$)
+ K$=ReplaceStr$(K$,"_2",_2$)
+ K$=ReplaceStr$(K$,"_W",STR$(_W))
+ K$=ReplaceStr$(K$,"_H",STR$(_H))
+ K$=ReplaceStr$(K$,"_Q",_Q$)
+ VAR SLOT=3
+ INPUT "InsertSlot";SLOT
+ PRGEDIT SLOT
+ PRGINS K$
+ ExitProcess 0
+END
+COMMON DEF L_CREATEOTW
+END
+
+VAR PAINTCTL
+COMMON DEF PaintRepaint WND,CTL,T,A1,A2
+ IF CallBaseControlHandler(WND,CTL,T,A1,A2)THEN RETURN
+ DIM A[64*64]
+ ReadArray GetWindowVar(WND,2),A,0,LEN(A)
+ GLOADWindow WND,0,0,64,64,A,0,0
+ VAR E=GEndWindow(WND)
+END
+COMMON DEF PaintLDWN WND,CTL,T,X,Y
+ SetWindowVar WND,3,1
+ SetWindowVar WND,0,X
+ SetWindowVar WND,1,Y
+END
+COMMON DEF PaintLUP WND,CTL,T,X,Y
+ SetWindowVar WND,3,0
+END
+COMMON DEF PaintCF WND,CTL,T,F,A2
+'IF CallBaseControlHandler(WND,CTL,T,F,A2)THEN 
+ IF!F THEN SetWindowVar WND,3,0
+END
+
+COMMON DEF PaintMouseMove WND,CTL,T,X,Y
+ IF!GetWindowVar(WND,3)THEN RETURN
+ VAR OX=GetWindowVar(WND,0)
+ VAR OY=GetWindowVar(WND,1)
+ VAR E=GBeginWindow(WND)
+ GLINEWindow WND,X,Y,OX,OY,RGB(0,0,0)
+ GLINEArrayMemory GetWindowVar(WND,2),64,64,X,Y,OX,OY,RGB(0,0,0)
+ E=GEndWindow(WND)
+ SetWindowVar WND,0,X
+ SetWindowVar WND,1,Y
+END
+COMMON DEF I_PAINT
+ VAR PTR=malloc(64*64)
+ IF!PTR THEN BEEP:ExitProcess 1
+ VAR WND,E
+ IF!PAINTCTL THEN
+  ExtendControl "PAINT",GetWindowControl() OUT PAINTCTL,E
+  E=SetControlMouseMoveHandler(PAINTCTL,"PaintMouseMove")
+  E=SetControlPainter(PAINTCTL,"PaintRepaint")
+  E=SetControlLMouseDownHandler(PAINTCTL,"PaintLDWN")
+  E=SetControlLMouseUpHandler(PAINTCTL,"PaintLUP")
+  E=SetControlChFocusHandler(PAINTCTL,"PaintCF")
+ ENDIF
+ NewTopLevelWindow PAINTCTL,"PAINT",64,64 OUT WND,E  SetProcessVar WND
+ SetWindowVar WND,2,PTR
+END
+COMMON DEF L_PAINT
+IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
+END
+
