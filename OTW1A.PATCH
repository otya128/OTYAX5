diff -u OTW.TXT OTW1A
--- OTW.TXT
+++ OTW1A
@@ -1,8 +1,8 @@
 OPTION STRICT
 OPTION DEFINT
-'=======================
-' OTYA 3D WINDOW SYSTEM 
-'=======================
+'====================
+' OTYA WINDOW SYSTEM 
+'====================
 'グローバルへんすうのていぎ
 VAR OTW_INIT,OTW_MOUSESP,OTW_MOVWINSP,OTW_MOVWINCOL
 VAR OTW_MOUSEX
@@ -54,6 +54,7 @@
 DIM WIN_GNEXT  [0]
 DIM WIN_GPREV  [0]
 DIM WIN_GPARENT[0]
+DIM WIN_STYLE  [0]
 'QUEUE
 DIM WIN_MSGS   [0]
 DIM WIN_MSGE   [0]
@@ -91,9 +92,12 @@
 '⇔⇔
 'W1         W2
 '
+VAR WIN_STYLE_NONE
+VAR WIN_STYLE_MODAL
 VAR WIN_ACTIVENUWID
 DEF OTW_WIN_INITARRAY
  VAR FM=FREEMEM
+ WIN_STYLE_MODAL=1
 'WIN_FWIDTH1=0
 'WIN_FHEIGHT1=10
 'WIN_FWIDTH2=0
@@ -143,6 +147,7 @@
  WIN_GNEXT     =NewArray(WIN_MAX)
  WIN_GPREV     =NewArray(WIN_MAX)
  WIN_GPARENT   =NewArray(WIN_MAX)
+ WIN_STYLE     =NewArray(WIN_MAX)
  WIN_MSGS      =NewArray(WIN_MAX)
  WIN_MSGE      =NewArray(WIN_MAX)
  WIN_MSGBUF    =NewArray3(WIN_MAX,WIN_MSGMAX,WIN_MSGARGSIZE)
@@ -249,6 +254,7 @@
 VAR CTL_MOUSEMVHANDLER
 VAR CTL_FRMMOUSEMVHANDLER
 VAR CTL_CREATEHANDLER
+VAR CTL_STRNOTIFHANDLER
 VAR CTL_LBTNFLG
 VAR CTL_RBTNFLG
 VAR CTL_BTNDWNFLG
@@ -259,6 +265,8 @@
 VAR CTL_TXTBOXCTL
 VAR CTL_LABELCTL
 VAR CTL_VSCRBARCTL
+
+VAR CTL_LSTBOXCTL
 DEF OTW_CTL_INITARRAY
  CTL_MAX=64
  CTL_HANDLER_MAX=16
@@ -296,6 +304,7 @@
  CTL_MOUSEMVHANDLER=10
  CTL_FRMMOUSEMVHANDLER=11
  CTL_CREATEHANDLER=12
+ CTL_STRNOTIFHANDLER=13
  'A1=,A2=bit16~31Y,Xbit0~15
  CTL_LBTNFLG=4
  CTL_RBTNFLG=8
@@ -305,10 +314,10 @@
 'E=SetControlFrameSize(CTL_WINDOWCTL,WIN_FWIDTH1,WIN_FHEIGHT1,WIN_FWIDTH2,WIN_FHEIGHT2)
  E=SetControlFrameSize(CTL_WINDOWCTL,1,12,1,1)
  E=SetControlPainter(CTL_WINDOWCTL,"WindowPainter")
- E=SetControlLMouseUpHandler(CTL_WINDOWCTL,"WindowLMouseUP")
  E=SetControlLMouseDownHandler(CTL_WINDOWCTL,"WindowLMouseDown")
  E=SetControlClickFrameHandler(CTL_WINDOWCTL,"WindowClickFrame")
  E=SetControlMMoveFrameHandler(CTL_WINDOWCTL,"WindowMMoveFrame")
+ E=SetControlChFocusHandler(CTL_WINDOWCTL,"WindowChFocus")
  E=SetControlPainter(CTL_BUTTONCTL,"ButtonPainter")
  E=SetControlLMouseUpHandler(CTL_BUTTONCTL,"ButtonLMouseUP")
  E=SetControlLMouseDownHandler(CTL_BUTTONCTL,"ToggleButtonLMouseDown")
@@ -334,7 +343,29 @@
  E=SetControlPainter(MENUCTL,"MenuPainter")
  E=SetControlMouseMoveHandler(MENUCTL,"MenuMouseMove")
  E=SetControlLMouseUpHandler(MENUCTL,"MenuLMouseUp")
+ OTW_CTL_LIST
 END
+DIM LISTSTR$[0]
+DIM LISTSTRNEXT[0]
+DIM LISTSTRPREV[0]
+DIM LISTSTRPARENT[0]
+DIM LISTSTRCHILD[0]
+VAR LISTSTR_FREE
+VAR LISTSTR_MAX
+DEF OTW_CTL_LIST
+ LISTSTR_MAX=256
+ LISTSTR$=NewArray$(LISTSTR_MAX)
+ LISTSTRNEXT=NewArray(LISTSTR_MAX)
+ LISTSTRPREV=NewArray(LISTSTR_MAX)
+ OTW_INITLIST LISTSTRNEXT
+ LISTSTR_FREE=1
+ VAR E
+ NewControl "LSTBOX" OUT CTL_LSTBOXCTL,E
+ E=SetControlPainter(CTL_LSTBOXCTL,"ListBoxPainter")
+ E=SetControlCreateHandler(CTL_LSTBOXCTL,"ListBoxCreate")
+ E=SetControlNotifHandler(CTL_LSTBOXCTL,"ListBoxNotif")
+ E=SetControlLMouseDownHandler(CTL_LSTBOXCTL,"ListBoxLMD")
+END
 DEF OTW_INITLIST ARY[]
  VAR I
  FOR I=1TO LEN(ARY)-2
@@ -374,6 +405,9 @@
 COMMON DEF GetVScrollBarControl()
  RETURN CTL_VSCRBARCTL
 END
+COMMON DEF GetListBoxControl()
+ RETURN CTL_LSTBOXCTL
+END
 'CONTROL
 COMMON DEF NewControl NAME$ OUT CTL,ERR
  IF!CTL_FREE THEN
@@ -425,7 +459,7 @@
  CTL_NAME$[NUCID]=""
  VAR I
  FOR I=0TO CTL_HANDLER_MAX-1
-  CTL_HANDLER$[I]=""
+  CTL_HANDLER$[NUCID,I]=""
  NEXT
 END
 COMMON DEF IsControlExtend(CTL,PARENT)
@@ -497,6 +531,11 @@
  CTL_HANDLER$[CTL AND 4095,CTL_CREATEHANDLER]=HANDLER$
  RETURN 0
 END
+COMMON DEF SetControlStrNotifHandler(CTL,HANDLER$)
+ IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
+ CTL_HANDLER$[CTL AND 4095,CTL_STRNOTIFHANDLER]=HANDLER$
+ RETURN 0
+END
 DEF SetControlFrameSize(CTL,W1,H1,W2,H2)
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
  VAR C=CTL AND 4095
@@ -531,9 +570,8 @@
  VOID JoinWindowGroup(WND,MENU_NUWID[MENU])
  SetWindowVar MENU_NUWID[MENU],0,MENU
  MENU_NUWID[MENU]=MENU_NUWID[MENU]AND NUWIDMASK
- MENU_SHOW[MENU]=TRUE
+ MENU_SHOW[MENU]=WND
  WIN_ACTIVENUWID=MENU_NUWID[MENU]
-
 ' MENU_SEL[C],WND,X-1,0
 END
 DEF NewMenuItem(STR$,PREV,STYLE)
@@ -583,6 +621,8 @@
   VOID SendNotifWindow(GetWindowGroupOwner(WND),MENU_IVAR[MENU_SEL[M]],0)
  ENDIF
  VOID DeleteWindow(WND)
+ VOID ActiveWindow(MENU_SHOW[M])
+ MENU_SHOW[M]=0
 END
 DEF MenuMouseMove WND,C,T,X,Y
  VAR M=GetWindowVar(WND,0)
@@ -756,6 +796,10 @@
     VAR B=NUWID
     WHILE B
      OTW_DrawMap B
+     IF WIN_CHILD[B]THEN
+      B=WIN_CHILD[B]
+      CONTINUE
+     ENDIF
      IF!WIN_NEXT[B]THEN
       WHILE B
        B=WIN_PARENT[B]
@@ -764,21 +808,19 @@
       WEND
       IF B==PNUWID THEN BREAK
      ENDIF
-     IF WIN_CHILD[B]THEN
-      B=WIN_CHILD[B]
-      CONTINUE
-     ENDIF
      B=WIN_NEXT[B]
      IF B==PNUWID THEN BREAK
     WEND
    ENDIF
   ENDIF
  ENDIF
+ WIN_MSGS[NUWID]=0
  VOID RepaintWindow(WND)
  IF PARENT==WIN_ROOTWND THEN
   SPAllocWindow WND
  ENDIF
  WindowOnCreate WND,CTL
+ VOID ActiveWindow(WND)
 END
 DEF SPAllocWindow WND
  INC OTW_TOPLEVELCNT
@@ -796,6 +838,15 @@
  OTW_SPSORT
 END
 COMMON DEF NewTopLevelMenuWindow CTL,NAME$,WIDTH,HEIGHT OUT WND,ERR
+ NewTopLevelStyleWindow CTL,NAME$,WIDTH,HEIGHT,1 OUT WND,ERR
+END
+COMMON DEF WindowMenuStyle()
+ RETURN 1
+END
+COMMON DEF WindowResizableStyle()
+ RETURN 2
+END
+COMMON DEF NewTopLevelStyleWindow CTL,NAME$,WIDTH,HEIGHT,STYLE OUT WND,ERR
  IF!CheckControl(CTL)THEN
   WND=0
   ERR=CTL_INVALIDID
@@ -810,8 +861,15 @@
  CTL_FH1[NUCID]=_H
  IF ERR THEN RETURN
  VAR NUWID=WND AND NUWIDMASK,SP
- NewMenu OUT WIN_MENU[NUWID],ERR
- WIN_MENU[NUWID]=WIN_MENU[NUWID]
+ 'MENU
+ IF STYLE AND 1THEN
+  NewMenu OUT WIN_MENU[NUWID],ERR
+  WIN_MENU[NUWID]=WIN_MENU[NUWID]
+ ENDIF
+ 'RESIZABLE
+ IF STYLE AND 2THEN
+  
+ ENDIF
  INC WIN_TopLevelX,CTL_FH1[NUCID]-1
  INC WIN_TopLevelY,CTL_FH1[NUCID]-1
 END
@@ -859,17 +917,14 @@
   GCLIP 1,0,0,400,240
   WIN_AW[NUWID]=WIDTH
   WIN_AH[NUWID]=HEIGHT
+  WIN_AFW[NUWID]=WIDTH
+  WIN_AFH[NUWID]=HEIGHT
 ' SPSET SP,WIN_AX[NUWID],WIN_AY[NUWID],WIN_WIDTH[NUWID],WIN_HEIGHT[NUWID],1
 ' SPSHOW SP
 ' SPOFS SP,WIN_AX[NUWID],WIN_AY[NUWID],1023
   RETURN
  ENDIF
  
- VAR SP=OTW_TOPLEVELCNT+1
- WHILE SPVAR(SP,0)
-  SP=(SP+1)MOD 255
- WEND
- WIN_SP[NUWID]=SP'OR FRAME<<10
  VAR ROOTNUWID=WIN_ROOTWND AND NUWIDMASK
  VAR C=WIN_CHILD[ROOTNUWID],N
  WIN_PARENT[NUWID]=ROOTNUWID
@@ -914,12 +969,9 @@
  OTW_DrawMap NUWID
  GCLIP 1,0,0,400,240
 ' GFILL WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],RGB(255,255,255)
- SPSET SP,WIN_AX[NUWID],WIN_AY[NUWID],WIN_WIDTH[NUWID]+1,WIN_HEIGHT[NUWID]+1,1
- SPOFS SP,WIN_AX[NUWID],WIN_AY[NUWID],0
- SPSHOW SP
- SPVAR SP,0,WND
- OTW_SPSORT
+ SPAllocWindow WND
  WindowOnCreate WND,CTL
+ VOID ActiveWindow(WND)
 END
 COMMON DEF NewDialogBox(CTL,NAME$,WIDTH,HEIGHT,OWNER,FLAG)
  IF!CheckControl(CTL)THEN
@@ -929,27 +981,37 @@
   RETURN WIN_NOALLOC
  ENDIF
  VAR O=OWNER AND NUWIDMASK
- VAR AX=WIN_AX[O]
- VAR AY=WIN_AY[O],WND,E
- NewWindow CTL,NAME$,AX+(WIN_WIDTH[O]-WIDTH)/2,AY+(WIN_HEIGHT[O]-HEIGHT)/2,WIDTH,HEIGHT,WIN_ROOTWND,WindowFrontFlag() OUT WND,E
+ VAR AX=WIN_AX[O]+(WIN_WIDTH[O]-WIDTH)/2
+ VAR AY=WIN_AY[O]+(WIN_HEIGHT[O]-HEIGHT)/2
+ VAR WND,E
+ IF AX<0THEN AX=0
+ IF AY<0THEN AY=0
+ NewWindow CTL,NAME$,AX,AY,WIDTH,HEIGHT,WIN_ROOTWND,WindowFrontFlag() OUT WND,E
+ IF FLAG THEN
+  WIN_STYLE[WND AND NUWIDMASK]=WIN_STYLE_MODAL
+ ENDIF
  IF E THEN RETURN E
  E=JoinWindowGroup(OWNER,WND)
  RETURN E
 END
-COMMON DEF NewModalDialogBox CTL,NAME$,WIDTH,HEIGHT,OWNER
+COMMON DEF NewModalDialogBox(CTL,NAME$,WIDTH,HEIGHT,OWNER)
+ RETURN NewDialogBox(CTL,NAME$,WIDTH,HEIGHT,OWNER,1)
 END
-COMMON DEF NewModelessDialogBox CTL,NAME$,WIDTH,HEIGHT,OWNER
+COMMON DEF NewModelessDialogBox(CTL,NAME$,WIDTH,HEIGHT,OWNER)
+ RETURN NewDialogBox(CTL,NAME$,WIDTH,HEIGHT,OWNER,0)
 END
 COMMON DEF DeleteWindow(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
- RepaintAllWindow WIN_ROOTWND,WIN_RX[NUWID],WIN_RY[NUWID],WIN_AW[NUWID],WIN_AH[NUWID]
+ VAR X=WIN_RX[NUWID],Y=WIN_RY[NUWID],W=WIN_AW[NUWID],H=WIN_AH[NUWID]
  VAR E=DeleteWindowNUWID(NUWID)
+ RepaintAllWindow WIN_ROOTWND,X,Y,W,H
  RETURN E
 END
 COMMON DEF DeleteWindowNUWID(NUWID)
  VAR E
  IF WIN_WID[NUWID]<=0THEN RETURN WIN_INVALIDID
+ WIN_STYLE[NUWID]=0
  WIN_MENU[NUWID]=0
  WIN_WID[NUWID]=0
  WIN_MSGS[NUWID]=0
@@ -1005,6 +1067,7 @@
   ELSE
    WIN_GROUP[WIN_GPARENT[NUWID]]=WIN_GNEXT[NUWID]
   ENDIF
+  VOID ActiveWindow(NUWIDToWND(WIN_GPARENT[NUWID]))
   WIN_GPARENT[NUWID]=0
   WIN_GPREV[NUWID]=0
   WIN_GNEXT[NUWID]=0
@@ -1041,23 +1104,25 @@
  GFILL WIN_RFX[NUWID],WIN_RFY[NUWID]+240,WIN_RFX[NUWID]+WIN_AFW[NUWID],WIN_RFY[NUWID]+240+WIN_AFH[NUWID],ShortToRGB(NUWID)
  GCLIP 1,0,0,400,240
 END
+COMMON DEF ActiveWindow(WND)
+ IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
+ VAR NUWID=WND AND NUWIDMASK
+ WIN_ACTIVENUWID=NUWID
+ RETURN 0
+END
 COMMON DEF FrontWindow(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
- IF!WIN_NEXT[NUWID]THEN RETURN 0
  VAR N,C=WIN_NEXT[NUWID]
-  N=C
+ IF C THEN
   WHILE 1
-   C=N
-   N=WIN_NEXT[N]
-   IF!N THEN
+   IF!WIN_NEXT[C]THEN 
     VAR NUP=WIN_PREV[NUWID]
     VAR NUN=WIN_NEXT[NUWID]
     IF NUP THEN
      WIN_NEXT[NUP]=NUN
-     WIN_PREV[NUN]=NUP
     ELSE
-     WIN_CHILD[WIN_PARENT[NUWID]]=NUN
+    WIN_CHILD[WIN_PARENT[NUWID]]=NUN
     ENDIF
     IF NUN THEN
      IF NUP THEN WIN_NEXT[NUP]=NUN
@@ -1066,40 +1131,26 @@
     WIN_NEXT[C]=NUWID
     WIN_PREV[NUWID]=C
     WIN_NEXT[NUWID]=0
-    IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK) THEN
-    'VAR Z,Z2,S
-    'SPOFS WIN_SP[NUWID]AND 511OUT S,S,Z
-    'SPOFS WIN_SP[C]AND 511OUT S,S,Z2
-    'SPOFS WIN_SP[NUWID]AND 511,,,Z2
-    'SPOFS WIN_SP[C]AND 511,,,Z
-     OTW_SPSORT
-    ENDIF
-    VOID RepaintWindow(WND)
-    OTW_DrawMap NUWID
-    IF WIN_CHILD[NUWID]THEN
-     VAR B=WIN_CHILD[NUWID]
-     WHILE B
-      VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
-      OTW_DrawMap B
-      IF!WIN_NEXT[B]THEN
-       WHILE B
-        B=WIN_PARENT[B]
-        IF B==NUWID THEN BREAK
-        IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
-       WEND
-       IF B==NUWID THEN BREAK
-      ENDIF
-      IF WIN_CHILD[B]THEN
-       B=WIN_CHILD[B]
-       CONTINUE
-      ENDIF
-      B=WIN_NEXT[B]
-      IF B==NUWID THEN BREAK
-     WEND
-    ENDIF
     BREAK
    ENDIF
+   C=WIN_NEXT[C]
   WEND
+  IF WIN_SP[NUWID] THEN
+   OTW_SPSORT
+  ENDIF
+  RepaintAllWindow WND,0,0,0,0
+ ENDIF
+ VAR G=WIN_GROUP[NUWID],E=ActiveWindow(WND)
+ WHILE G
+  IF WIN_STYLE[G]AND WIN_STYLE_MODAL THEN
+   BEEP 
+   IF WIN_SP[NUWID]THEN
+    SPANIM WIN_SP[NUWID]AND 511,6,-10,RGB(128,128,128),-10,RGB(255,255,255)
+   ENDIF
+   E=FrontWindow(NUWIDToWND(G))
+  ENDIF
+  G=WIN_GNEXT[G]
+ WEND
  RETURN 0
 END
 
@@ -1309,6 +1360,40 @@
   ENDIF
  ENDIF
  OTW_DrawMap WIN_PARENT[NUWID]
+ '   B=WIN_CHILD[NXT]
+ VAR MOVEF=0
+ B=WIN_PARENT[NUWID]
+   WHILE B
+    IF MOVEF THEN
+     WIN_AX[B]=WIN_AX[B]+MX
+     WIN_AY[B]=WIN_AY[B]+MY
+     WIN_FX[B]=WIN_FX[B]+MX
+     WIN_FY[B]=WIN_FY[B]+MY
+     WIN_RFX[B]=WIN_RFX[B]+MX
+     WIN_RFY[B]=WIN_RFY[B]+MY
+     WIN_RX[B]=WIN_RX[B]+MX
+     WIN_RY[B]=WIN_RY[B]+MY
+     MOVEF=1
+    ENDIF
+    IF!WIN_HIDE[B]THEN VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
+    OTW_DrawMap B
+
+    IF WIN_CHILD[B]THEN
+     IF B==NUWID THEN MOVEF=1
+     B=WIN_CHILD[B]
+     CONTINUE
+    ENDIF
+    IF!WIN_NEXT[B]THEN
+     WHILE B
+      B=WIN_PARENT[B]
+      IF B==NUWID THEN MOVEF=0
+      IF WIN_NEXT[B]THEN BREAK
+     WEND
+     IF!B THEN RETURN 0
+    ENDIF
+    B=WIN_NEXT[B]
+   WEND
+RETURN
  WHILE NXT
   VOID RepaintWindow(NXT OR(WIN_WID[NXT]<<WIDSHIFT))
   OTW_DrawMap NXT
@@ -1418,6 +1503,9 @@
 COMMON DEF SendChFocusWindow(WND,FLG)
  RETURN SendWindowEvent(WND,CTL_CHFOCUSHANDLER,FLG,0)
 END
+COMMON DEF SendStrNotifWindow(WND,A1,STR$)
+ RETURN SendWindowEvent(WND,CTL_STRNOTIFHANDLER,A1,AllocString(STR$))
+END
 DEF MouseMoveWindow(NUWID)
  RETURN SendWindowEvent(NUWIDToWND(NUWID),CTL_MOUSEMVHANDLER,OTW_MOUSEX-WIN_AX[NUWID]-WIN_FW1[NUWID],OTW_MOUSEY-WIN_AY[NUWID]-WIN_FH1[NUWID])
 END
@@ -1444,7 +1532,7 @@
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
  CTL=CTL_PARENTCTL[CTL AND 4095]
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID 
- CALL CTL_HANDLER$[CTL AND 4095,TYPE],WND,CTL,TYPE,A1,A2
+ IF LEN(CTL_HANDLER$[CTL AND 4095,TYPE])THEN CALL CTL_HANDLER$[CTL AND 4095,TYPE],WND,CTL,TYPE,A1,A2
  RETURN 0
 END
 COMMON DEF PeekWindowEvent(WND)
@@ -1467,7 +1555,13 @@
  VAR NUCID=WIN_CTL[NUWID] AND 4095
  VAR S=WIN_MSGE[NUWID]
  VAR TYPE=WIN_MSGBUF[NUWID,S,0]
- CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],WIN_MSGBUF[NUWID,S,2]
+ IF TYPE==13THEN
+  'CTL_STRNOTIFHANDLER
+  CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],GetString$(WIN_MSGBUF[NUWID,S,2])
+  FreeString WIN_MSGBUF[NUWID,S,2]
+ ELSE
+  CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],WIN_MSGBUF[NUWID,S,2]
+ ENDIF
  IF WIN_WID[NUWID]<=0THEN RETURN WIN_INVALIDID
  INC WIN_MSGE[NUWID]
  IF WIN_MSGE[NUWID]>=WIN_MSGMAX THEN WIN_MSGE[NUWID]=0
@@ -1548,9 +1642,18 @@
 COMMON DEF SetWindowVar WND,I,V
  WIN_VAR[WND AND NUWIDMASK,I]=V
 END
-COMMON DEF IsActiveWindow(WND)
+COMMON DEF IsFocusWindow(WND)
  RETURN(WND AND NUWIDMASK)==WIN_ACTIVENUWID
 END
+COMMON DEF IsActiveWindow(WND)
+ VAR N=(WND AND NUWIDMASK)
+ VAR P=WIN_ACTIVENUWID
+ WHILE P
+  IF P==N THEN RETURN 1
+  P=WIN_PARENT[P]
+ WEND
+ RETURN 0
+END
 VAR WIN_DRAGHANDLER$
 VAR WIN_DRAGHANDLER_A1
 VAR WIN_DRAGHANDLER_A2
@@ -1866,21 +1969,35 @@
  E=ReGBeginWindow(WND)
 ' E=GEndWindow(WND)
 END
-DEF WindowLMouseUP WND,CTL,TYPE,A1,A2
-' VAR E=FrontWindow(WND)
+DEF WindowChFocus WND,CTL,TYPE,A1,A2
+ IF A1 THEN
+  VAR E=FrontWindow(WND)
+ ENDIF
 END
 DEF WindowLMouseDown WND,CTL,TYPE,A1,A2
- VAR E=FrontWindow(WND)
+' VAR E=FrontWindow(WND)
 END
 DEF WindowClickFrame WND,CTL,TYPE,BTN,POS
  VAR X,Y
  SplitInt POS OUT X,Y
  VAR W=GetWindowFrameWidth(WND)
   VAR NUWID=WND AND NUWIDMASK
+ IF!IsFocusWindow(WND)THEN RETURN
  IF X&&Y>11&&Y<21&&WIN_MENU[NUWID]THEN
   IF BTN AND CTL_BTNUPFLG THEN
    VAR C=WIN_MENU[NUWID]AND 4095
-   IF MENU_ICHILD[MENU_SEL[C]]THEN ShowMenu_ MENU_ICHILD[MENU_SEL[C]],WND,X-1,0
+   IF MENU_ICHILD[MENU_SEL[C]]THEN
+    VAR X1,X2,I=MENU_ITEM[C]
+    WHILE I
+     X1=X2
+     X2=X2+LEN(MENU_INAME$[I])*8+4
+     IF X1<=X&&X2>=X THEN
+      ShowMenu_ MENU_ICHILD[MENU_SEL[C]],WND,X1,0
+      BREAK
+     ENDIF
+     I=MENU_INEXT[I]
+    WEND
+   ENDIF
   ENDIF
   RETURN
  ENDIF
@@ -1892,6 +2009,7 @@
  ENDIF
  IF BTN AND CTL_LBTNFLG THEN
   IF BTN AND CTL_BTNDWNFLG THEN
+ '  IF!IsFocusWindow(WND)THEN RETURN
    VAR AX=WIN_AX[NUWID]
    VAR AY=WIN_AY[NUWID]
    INC X,AX
@@ -1914,6 +2032,7 @@
  VAR X,Y
  SplitInt XY OUT X,Y
  VAR NUWID=WND AND NUWIDMASK
+ IF!IsActiveWindow(WND)THEN RETURN
  IF!WIN_MENU[NUWID]THEN RETURN
  VAR C=WIN_MENU[NUWID]AND 4095
  IF!(X&&Y>11&&Y<21)THEN
@@ -2025,7 +2144,7 @@
  VAR CX=GetWindowVar(W,1)
  GFILLWindow W,0,0,WI,HE,-1
  GPRINTWindow W,1,1,NA$,RGB(0,0,0)
- IF IsActiveWindow(W)THEN
+ IF IsFocusWindow(W)THEN
   GFILLWindow W,CX*8,6,CX*8+8,7,RGB(0,0,0)
  ENDIF
  GBOXWindow W,0,0,WI,HE,RGB(0,0,0)
@@ -2114,18 +2233,139 @@
  NEXT
  E=GEndWindow(W)
 END
+'1:FIRST
+'2:LAST
+'3:VIEW
+'4:VSCRBAR
+'5:POS
+'6:LEN
+'7:SEL
+COMMON DEF AddListBoxItem WND,ITEM$
+ VAR L=GetWindowVar(WND,2)'
+ IF!LISTSTR_FREE THEN RETURN
+ IF L THEN LISTSTRNEXT[L]=LISTSTR_FREE
+ SetWindowVar WND,2,LISTSTR_FREE
+ IF!L THEN
+  SetWindowVar WND,1,LISTSTR_FREE
+ ENDIF
+ LISTSTR$[LISTSTR_FREE]=ITEM$
+ LISTSTRPREV[LISTSTR_FREE]=L
+ L=LISTSTR_FREE
+ LISTSTR_FREE=LISTSTRNEXT[L]
+ LISTSTRNEXT[L]=0
+ VAR LEN=GetWindowVar(WND,6)+1
+ SetWindowVar WND,6,LEN
+ VAR S=(GetWindowHeight(WND)-2)DIV 8
+ IF LEN>S THEN DEC LEN,S ELSE LEN=0
+ SetScrollBarSize GetWindowVar(WND,4),LEN
+END
+DEF ListBoxLMD WND,CT,T,X,Y
+ VAR W=GetWindowWidth(WND)
+ VAR H=GetWindowHeight(WND)
+ IF X<=0||Y<=0||X>=W||Y>=H THEN RETURN
+ VAR V=GetWindowVar(WND,3)
+ VAR Y1=1,Y2=1,S=GetWindowVar(WND,7),F,GB
+ WHILE V
+  INC Y2,8
+  IF Y>=Y1&&Y<Y2 THEN
+   SetWindowVar WND,7,V
+   IF!GB&&GBeginWindow(WND)THEN RETURN
+   GFILLWindow WND,1,Y1,W,Y2-1,RGB(0,0,255)
+   GPRINTWindow WND,1,Y1,LISTSTR$[V],-1
+   F=1
+   GB=1
+   IF!S THEN BREAK
+  ELSE IF V==S THEN
+   IF!GB&&GBeginWindow(WND)THEN RETURN
+   GB=1
+   GFILLWindow WND,1,Y1,W,Y2-1,-1
+   GPRINTWindow WND,1,Y1,LISTSTR$[V],RGB(0,0,0)
+   S=0
+   IF F THEN BREAK
+  ENDIF
+  ENDIF
+  V=LISTSTRNEXT[V]
+  INC Y1,8
+  Y2=Y1
+  IF Y1>=H THEN BREAK
+ WEND
+ IF GB THEN
+  'あとしまつ
+  VOID GEndWindow(WND)
+ ENDIF
+END
+DEF ListBoxNotif WND,CT,T,A1,POS
+ VAR OP=GetWindowVar(WND,5)
+ IF OP==POS THEN RETURN
+ VAR SA=POS-OP,I
+ SetWindowVar WND,5,POS
+ VAR V=GetWindowVar(WND,3)
+ IF SA>0THEN
+  FOR I=0TO SA-1
+   IF!LISTSTRNEXT[V] THEN BREAK
+   V=LISTSTRNEXT[V]
+  NEXT
+ ELSE
+  SA=-SA
+  FOR I=0TO SA-1
+   IF!LISTSTRPREV[V] THEN BREAK
+   V=LISTSTRPREV[V]
+  NEXT
+ ENDIF
+ SetWindowVar WND,3,V
+ ListBoxPainter WND,CT,T,0,0
+END
+DEF ListBoxCreate WND,CT,T,A1,A2
+ VAR S,E
+ NewVScrollBar WND,0 OUT S,E
+ SetWindowVar WND,4,S
+END
+DEF ListBoxPainter WND,CT,T,A1,A2
+ VAR E=GBeginWindow(WND)
+ IF E THEN RETURN
+ GCLSWindow WND,-1
+ VAR W=GetWindowWidth(WND)
+ VAR H=GetWindowHeight(WND)
+ VAR L=GetWindowVar(WND,3),Y=1
+ IF!L THEN
+  L=GetWindowVar(WND,1)
+  SetWindowVar WND,3,L
+ ENDIF
+ VAR S=GetWindowVar(WND,7)
+ WHILE L
+  IF S==L THEN
+   GFILLWindow WND,1,Y,W-1,Y+7,RGB(0,0,255)
+   GPRINTWindow WND,1,Y,LISTSTR$[L],-1
+  ELSE
+   GPRINTWindow WND,1,Y,LISTSTR$[L],RGB(0,0,0)
+  ENDIF
+  INC Y,8
+  IF Y>=H THEN BREAK
+  L=LISTSTRNEXT[L]
+ WEND
+ GBOXWindow WND,0,0,W,H,RGB(0,0,0)
+ E=GEndWindow(WND)
+END
+COMMON DEF GetListBoxSelectedText$(WND)
+ VAR S=GetWindowVar(WND,7)
+ IF!S THEN RETURN""
+ RETURN LISTSTR$[S]
+END
 DEF NewVScrollBar PARENT,SIZ OUT WND,E
  VAR W=GetWindowWidth(PARENT)
  VAR H=GetWindowHeight(PARENT)
- NewWindow GetVScrollBarControl(),"GG",W-8,0,8,H,PARENT,0 OUT WND,E
+ NewWindow GetVScrollBarControl(),"",W-8,0,8,H,PARENT,0 OUT WND,E
  SetWindowVar WND,1,SIZ
 END
 COMMON DEF SetScrollBarSize W,SIZ
  SetWindowVar W,1,SIZ
- SetWindowVar W,2,0
  VOID RepaintWindow(W)
 END
-COMMON DEF SetScrollBarPostion W,POS
+COMMON DEF IncScrollBarSize W
+ SetWindowVar W,1,GetWindowVar(W,1)+1
+ VOID RepaintWindow(W)
+END
+COMMON DEF SetScrollBarPosition W,POS
  SetWindowVar W,2,POS
  VOID RepaintWindow(W)
 END
@@ -2200,15 +2440,16 @@
  IF ID==2&&POS>0 THEN
   SetWindowVar W,2,POS-1
   VSCRBARPainter W,C,0,0,0
-  VOID SendNotifWindow(GetParentWindow(W),GetWindowVar(W,0),POS-1)
+  VOID SendNotifWindow(GetParentWindow(W),W,POS-1)
  ENDIF
  IF ID==3&&POS<SIZ THEN
   SetWindowVar W,2,POS+1
   VSCRBARPainter W,C,0,0,0
-  VOID SendNotifWindow(GetParentWindow(W),GetWindowVar(W,0),POS+1)
+  VOID SendNotifWindow(GetParentWindow(W),W,POS+1)
  ENDIF
  IF ID==1THEN
-  VAR _Y=Y
+  VAR _Y=POS'Y
+  IF!SIZ THEN RETURN
   Y=(Y-9)/((GetWindowHeight(W)-28)/SIZ)
   IF Y<0THEN Y=0
   IF Y>SIZ THEN Y=SIZ
@@ -2297,6 +2538,7 @@
    GLINE I,0,I+400,400,RGB(0,0,255)'RGB(255,255,255)
   NEXT
   GCLS RGB(0,224,224)
+  GCLS RGB(0,128,128)
   GPAGE OTW_SP,OTW_DP
   GPRIO 1023
   GCLS RGB(0,192,128)
@@ -2432,6 +2674,10 @@
   IF BTN AND OTW_LMOUSEDWN THEN
    VAR OA=WIN_ACTIVENUWID
    WIN_ACTIVENUWID=NUWID
+   IF WIN_ACTIVENUWID!=OA THEN
+    E=SendChFocusWindow(NUWIDToWND(OA),FALSE)
+    E=SendChFocusWindow(NUWIDToWND(WIN_ACTIVENUWID AND 32767),TRUE)
+   ENDIF
    IF NUWID AND WIN_FRAMEFLG THEN
     E=LMouseDownWindowOnFrame(NUWIDToWND(NUWID AND 32767))
     
@@ -2439,10 +2685,6 @@
    ELSE
     E=LMouseDownWindow(NUWIDToWND(NUWID))
    ENDIF
-   IF WIN_ACTIVENUWID!=OA THEN
-    E=SendChFocusWindow(NUWIDToWND(OA),FALSE)
-    E=SendChFocusWindow(NUWIDToWND(WIN_ACTIVENUWID),TRUE)
-   ENDIF
   ENDIF
   IF BTN AND OTW_LMOUSEUP THEN
    IF WIN_DRAGHANDLER_USE THEN
@@ -2905,7 +3147,12 @@
  RETURN TXTBOXEXCTL
 END
 COMMON DEF SetTextBoxExPRGMode WND,FLG
- SetWindowVar WND,7,!!FLG
+ VAR G=ABS(GetWindowVar(WND,7))
+ IF FLG THEN
+  SetWindowVar WND,7,G OR -2147483648
+ ELSE
+  SetWindowVar WND,7,G AND 2147483647
+ ENDIF
 END
 COMMON DEF INIT_TXTBOXEX
  VAR E
@@ -2915,7 +3162,10 @@
   E=SetControlKeyHandler(TXTBOXEXCTL,"TextBoxExKey")
   E=SetControlButtonHandler(TXTBOXEXCTL,"TextBoxExButton")
   E=SetControlChFocusHandler(TXTBOXEXCTL,"TextBoxExChFocus")
-  TXTBOXEX_LINESIZ=1024
+  E=SetControlCreateHandler(TXTBOXEXCTL,"TextBoxExCreate")
+  E=SetControlNotifHandler(TXTBOXEXCTL,"TextBoxExNotif")
+  E=SetControlLMouseDownHandler(TXTBOXEXCTL,"TextBoxExLMD")
+  TXTBOXEX_LINESIZ=10000'1024
   TXTBOXEX_VAL$=NewArray$(TXTBOXEX_LINESIZ)
   TXTBOXEX_LINE=NewArray(TXTBOXEX_LINESIZ)
   TXTBOXEX_NEXT=NewArray(TXTBOXEX_LINESIZ)
@@ -2929,6 +3179,7 @@
 END
 DEF TXTED_NewLINE(V$,P)
  VAR R=TXTBOXEX_FREE
+ IF!R THEN RETURN 0
  TXTBOXEX_FREE=TXTBOXEX_NEXT[TXTBOXEX_FREE]
  IF P THEN
   TXTBOXEX_LINE[R]=TXTBOXEX_LINE[P]+1
@@ -2965,6 +3216,54 @@
  RETURN 0
 END
 
+COMMON DEF TextBoxExLMD WND,CTL,T,X,Y
+ VAR W=GetWindowWidth(WND)
+ VAR H=GetWindowHeight(WND)
+ IF!X||!Y||X>=W||Y>=H THEN RETURN
+ VAR V=GetWindowVar(WND,1),Y1=1,Y2
+ WHILE V
+  Y2=Y1+8
+  IF Y>=Y1&&Y<Y2 THEN
+   SetWindowVar WND,2,V
+   VOID RepaintWindow(WND)
+   SetWindowVar WND,3,(X-1) DIV 8
+   BREAK
+  ENDIF
+  INC Y1,8
+  V=TXTBOXEX_NEXT[V]
+ WEND
+END
+COMMON DEF TextBoxExNotif WND,CTL,T,_,POS
+ VAR F=GetWindowVar(WND,7)
+ VAR SA=POS-(F AND 2147483647)
+ VAR I
+ IF!SA THEN RETURN
+ VAR V=GetWindowVar(WND,1)
+ IF SA>0THEN
+  FOR I=1TO SA
+   IF!TXTBOXEX_NEXT[V]THEN BREAK
+   V=TXTBOXEX_NEXT[V]
+  NEXT
+ ELSE
+  SA=ABS(SA)
+  FOR I=1TO SA
+   IF!TXTBOXEX_PREV[V]THEN BREAK
+   V=TXTBOXEX_PREV[V]
+  NEXT
+ ENDIF
+ IF F<0THEN
+  SetWindowVar WND,7,POS OR -2147483648
+ ELSE
+  SetWindowVar WND,7,POS
+ ENDIF
+ SetWindowVar WND,1,V
+ TextBoxExRepaint WND
+END
+COMMON DEF TextBoxExCreate WND,CTL,T,_,__
+ VAR SCR,E
+ VAR W=GetWindowWidth(WND),
+ NewVScrollBar WND,0 OUT SCR,E
+END
 COMMON DEF TextBoxExPainter WND,CTL,T,_,__
  TextBoxExRepaint WND
 END
@@ -2990,7 +3289,7 @@
  VAR Y=1,X=1,PL,LC
  WHILE 1
   V$=TXTBOXEX_VAL$[L]
-  IF GetWindowVar(WND,7)THEN
+  IF GetWindowVar(WND,7)<0THEN
    TXTED_PRGPRINT WND,X,Y,V$
   ELSE
    GPRINTWindow WND,X,Y,V$,TC
@@ -3010,8 +3309,8 @@
     ENDIF
    ELSE
     GPRINTWindow WND,X,Y,"[EOF]",RGB(80,208,255)
-    IF PL==C&&IsActiveWindow(WND)THEN
-     GFILLWindow WND,CX*8,Y+7,8+CX*8,Y+6,TC
+    IF PL==C&&IsFocusWindow(WND)THEN
+  '   GFILLWindow WND,CX*8,Y+7,8+CX*8,Y+6,TC
     ENDIF
    ENDIF
    PL=0
@@ -3110,6 +3409,7 @@
   C=TXTED_NewLINE("",0)
   SetWindowVar WND,1,C
   SetWindowVar WND,2,C
+  IF!C THEN RETURN
  ENDIF
  VAR X=GetWindowVar(WND,3)
  VAR K$=CHR$(KEY)
@@ -3136,7 +3436,9 @@
   ENDIF
  ELSE
   IF K$==LF$()THEN
-   SetWindowVar WND,2,TXTED_NewLine(MID$(TXTBOXEX_VAL$[C],X,LEN(TXTBOXEX_VAL$[C])-X),C)
+   VAR C2=TXTED_NewLine(MID$(TXTBOXEX_VAL$[C],X,LEN(TXTBOXEX_VAL$[C])-X),C)
+   IF!C2 THEN RETURN
+   SetWindowVar WND,2,C2
    SetWindowVar WND,3,0
    TXTBOXEX_VAL$[C]=MID$(TXTBOXEX_VAL$[C],0,X)+K$
    IF GetWindowVar(WND,6)==C THEN
@@ -3152,8 +3454,44 @@
  ENDIF
  TextBoxExRepaint WND
 END
+COMMON DEF TextBoxExSetText WND,TXT$
+ VAR C=GetWindowVar(WND,1),I,J
+ IF C THEN
+  I=C
+  WHILE 1
+   TXTBOXEX_VAL$[C]=""
+   TXTBOXEX_PREV[C]=0
+   IF!TXTBOXEX_NEXT[C]THEN BREAK
+   C=TXTBOXEX_NEXT[C]
+  WEND
+  TXTBOXEX_NEXT[C]=TXTBOXEX_FREE
+  TXTBOXEX_FREE=I
+  I=0
+ ENDIF
+ C=0
+ VAR OC=0,L=-8-8
+ WHILE 1
+  INC L
+  J=INSTR(I,TXT$,LF$())
+  IF LEN(TXT$)==I THEN BREAK
+  IF J==-1THEN J=LEN(TXT$)-1
+  C=TXTED_NewLINE(MID$(TXT$,I,J-I+1),C)
+  IF!C THEN BREAK
+  IF!OC THEN
+   SetWindowVar WND,1,C
+   SetWindowVar WND,2,C
+   OC=1
+  ENDIF
+  IF I==LEN(TXT$)-1THEN BREAK
+  I=J+1
+ WEND
+ SetScrollBarSize GetChildWindow(WND),L+CEIL((GetWindowHeight(WND)-2)/8)
+ VOID RepaintWindow(WND)
+END
 '===syntax highlighting===
 'HashSet
+VAR RTXTEDTRUE
+VAR RTXTEDFALSE
 VAR RTXTEDVAR
 VAR RTXTEDDIM
 VAR RTXTEDFOR
@@ -3161,6 +3499,9 @@
 VAR RTXTEDBREAK
 VAR RTXTEDCONTINUE
 VAR RTXTEDREPEAT
+VAR RTXTEDUNTIL
+VAR RTXTEDWHILE
+VAR RTXTEDWEND
 VAR RTXTEDDATA
 VAR RTXTEDREAD
 VAR RTXTEDCOMMON
@@ -3299,6 +3640,14 @@
  NEXT
 END
 '===End text editor===
+COMMON DEF TXTEDNOTIF W,C,T,A1,A2
+ IF A1==2THEN
+  VOID NewOpenFileDialog(W)
+ ENDIF
+END
+COMMON DEF TXTEDSTRNOTIF W,C,T,A1,A2$
+ TextBoxExSetText GetWindowVar(W,0),LOAD("TXT:"+RIGHT$(A2$,LEN(A2$)-1),0)
+END
 COMMON DEF I_TXTED
  IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
   PrintConsole "Require window system"+LF$()
@@ -3308,10 +3657,21 @@
  VAR WND,E
  IF!TXTEDCTL THEN
   ExtendControl "TXTED",GetWindowControl() OUT TXTEDCTL,E
+  E=SetControlNotifHandler(TXTEDCTL,"TXTEDNOTIF")
+  E=SetControlStrNotifHandler(TXTEDCTL,"TXTEDSTRNOTIF")
  ENDIF
- NewTopLevelWindow TXTEDCTL,"TXTED",128,64 OUT WND,E
+ NewTopLevelMenuWindow TXTEDCTL,"TXTED",128,64 OUT WND,E
+ VAR MENU
+ NewMenu OUT MENU,E
+ AddMenuItem MENU,"New",1
+ AddMenuItem MENU,"Open",2
+ AddMenuItem MENU,"Save",3
+ AddMenuItem MENU,"Save as",4
+ AddSubMenuItem GetWindowMenu(WND),"File",MENU
  SetProcessVar WND
- NewWindow GetTextBoxExControl(),"",0,0,128,64,WND,0 OUT WND,E
+ VAR TED
+ NewWindow GetTextBoxExControl(),"",0,0,128,64,WND,0 OUT TED,E
+ SetWindowVar WND,0,TED
 'SetTextBoxExPRGMode WND,TRUE
 END
 COMMON DEF L_TXTED
@@ -3327,11 +3687,22 @@
  VAR WND,E
  IF!PRGEDCTL THEN
   ExtendControl "PRGED",GetWindowControl() OUT PRGEDCTL,E
+  E=SetControlNotifHandler(PRGEDCTL,"TXTEDNOTIF")
+  E=SetControlStrNotifHandler(PRGEDCTL,"TXTEDSTRNOTIF")
  ENDIF
- NewTopLevelWindow PRGEDCTL,"PRGED",128,64 OUT WND,E
+ NewTopLevelMenuWindow PRGEDCTL,"PRGED",128,64 OUT WND,E
+ VAR MENU
+ NewMenu OUT MENU,E
+ AddMenuItem MENU,"New",1
+ AddMenuItem MENU,"Open",2
+ AddMenuItem MENU,"Save",3
+ AddMenuItem MENU,"Save as",4
+ AddSubMenuItem GetWindowMenu(WND),"File",MENU
  SetProcessVar WND
- NewWindow GetTextBoxExControl(),"",0,0,128,64,WND,0 OUT WND,E
- SetTextBoxExPRGMode WND,TRUE
+ VAR TED
+ NewWindow GetTextBoxExControl(),"",0,0,128,64,WND,0 OUT TED,E
+ SetWindowVar WND,0,TED
+ SetTextBoxExPRGMode TED,TRUE
 END
 COMMON DEF L_PRGED
  IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
@@ -3611,7 +3982,7 @@
 END
 COMMON DEF OTYFILNOTIF WND,CTL,T,ID,POS
  IF ID<=5THEN
-  VAR E=NewDialogBox(OTYFILABOUTCTL,"ABOUT",128,40,WND,0)
+  VAR E=NewModalDialogBox(OTYFILABOUTCTL,"ABOUT",128,40,WND)
   RETURN
  ENDIF
  VAR I=GetNextWindow(GetChildWindow(WND))
@@ -3733,11 +4104,50 @@
 END
 COMMON DEF L_MEMVIEW
  IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
- ?FREEMEM,OTW_USEMEM
+' ?FREEMEM,OTW_USEMEM
 END
+'Init common dialogs
+VAR CTL_FILDIA
+DEF OTW_FileDialog
+ VAR E
+ ExtendControl "FileDialog",GetWindowControl()OUT CTL_FILDIA,E
+ IF E THEN RETURN
+ E=SetControlCreateHandler(CTL_FILDIA,"FileDialogCreate")
+ E=SetControlNotifHandler(CTL_FILDIA,"FileDialogNotif")
+END
+COMMON DEF FileDialogNotif WND,C,T,W,__
+ IF GetWindowName$(W)=="OK"THEN
+  VAR SEL$=GetListBoxSelectedText$(GetWindowVar(WND,0))
+  IF!LEN(SEL$)THEN RETURN
+  VOID SendStrNotifWindow(GetWindowGroupOwner(WND),1,SEL$)
+  VOID DeleteWindow(WND)
+ ELSE
+  IF GetWindowName$(W)=="Cancel"THEN
+   VOID DeleteWindow(WND)
+  ENDIF
+ ENDIF
+END
+COMMON DEF FileDialogCreate WND,C,T,_,__
+ VAR E,L
+ NewWindow GetListBoxControl(),"",0,0,116,64,WND,0 OUT L,E
+ DIM F$[0]
+ GetFiles F$,""
+ VAR I
+ FOR I=0TO LEN(F$)-1
+  AddListBoxItem L,F$[I]
+ NEXT
+ SetWindowVar WND,0,L
+ NewWindow GetButtonControl(),"OK",119,2,20,12,WND,0 OUT L,E
+ NewWindow GetButtonControl(),"Cancel",119,16,50,12,WND,0 OUT L,E
+END
+COMMON DEF NewOpenFileDialog(OWNER)
+ IF!CTL_FILDIA THEN
+  OTW_FileDialog
+ ENDIF
+ VAR E=NewModalDialogBox(CTL_FILDIA,"Open",170,64,OWNER)
+ RETURN E
+END
 
-
-
 '=========
 DEF OTW_LOADFONT
  'LOAD FONT-1
