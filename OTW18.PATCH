diff -u OTW.TXT OTW18
--- OTW.TXT
+++ OTW18
@@ -55,6 +55,7 @@
 DIM WIN_MSGBUF [0,0,0]
 DIM WIN_MSGCNT [0,0]
 DIM WIN_USER   [0,0]
+DIM WIN_HIDE   [0]
 VAR WIN_FREE
 VAR WIN_WIDCNT
 VAR WIN_MSGARGSIZE
@@ -131,6 +132,7 @@
  WIN_PARENT    =NewArray(WIN_MAX)
  WIN_BEGIN     =NewArray(WIN_MAX)
  WIN_SP        =NewArray(WIN_MAX)
+ WIN_HIDE      =NewArray(WIN_MAX)
  WIN_MSGS      =NewArray(WIN_MAX)
  WIN_MSGE      =NewArray(WIN_MAX)
  WIN_MSGBUF    =NewArray3(WIN_MAX,WIN_MSGMAX,WIN_MSGARGSIZE)
@@ -187,6 +189,7 @@
 VAR CTL_TGLBTNCTL
 VAR CTL_TXTBOXCTL
 VAR CTL_LABELCTL
+VAR CTL_VSCRBARCTL
 DEF OTW_CTL_INITARRAY
  CTL_MAX=64
  CTL_HANDLER_MAX=16
@@ -208,6 +211,7 @@
  NewControl "BUTTON" OUT CTL_BUTTONCTL,E
  NewControl "TXTBOX" OUT CTL_TXTBOXCTL,E
  NewControl "LABEL" OUT CTL_LABELCTL,E
+ NewControl "VSCRBAR" OUT CTL_VSCRBARCTL,E
  CTL_PAINTHANDLER=0
  CTL_NDHNDLR[CTL_PAINTHANDLER]=TRUE
  CTL_LBTNDWNHANDLER=1
@@ -242,6 +246,11 @@
  E=SetControlChFocusHandler(CTL_TXTBOXCTL,"TextBoxChFocus")
  E=SetControlPainter(CTL_LABELCTL,"LabelPainter")
 
+ E=SetControlPainter(CTL_VSCRBARCTL,"VSCRBARPainter")
+ E=SetControlLMouseUpHandler(CTL_VSCRBARCTL,"VSCRBARLMouseUP")
+ E=SetControlLMouseDownHandler(CTL_VSCRBARCTL,"VSCRBARLMouseDown")
+
+
  ExtendControl "ToggleButton",CTL_BUTTONCTL OUT CTL_TGLBTNCTL,E
  E=SetControlLMouseUpHandler(CTL_TGLBTNCTL,"ToggleButtonLMouseUP")
  E=SetControlLMouseDownHandler(CTL_TGLBTNCTL,"ToggleButtonLMouseDown")
@@ -256,12 +265,15 @@
 VAR WIN_NOALLOC
 VAR WIN_INVALIDID
 VAR WIN_EVENTERR
+'びょうが ふか
+VAR WIN_NODRAW
 VAR CTL_NOALLOC
 VAR CTL_INVALIDID
 DEF OTW_INIT_ERR
  WIN_NOALLOC=1
  WIN_INVALIDID=2
  WIN_EVENTERR=3
+ WIN_NODRAW=3
  CTL_NOALLOC=201
  CTL_INVALIDID=202
 END
@@ -280,6 +292,9 @@
 COMMON DEF GetLabelControl()
  RETURN CTL_LABELCTL
 END
+COMMON DEF GetVScrollBarControl()
+ RETURN CTL_VSCRBARCTL
+END
 'CONTROL
 COMMON DEF NewControl NAME$ OUT CTL,ERR
  IF!CTL_FREE THEN
@@ -368,6 +383,11 @@
  CTL_HANDLER$[CTL AND 4095,CTL_NOTIFHANDLER]=HANDLER$
  RETURN 0
 END
+COMMON DEF SetControlNotifHandler(CTL,HANDLER$)
+ IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
+ CTL_HANDLER$[CTL AND 4095,CTL_NOTIFHANDLER]=HANDLER$
+ RETURN 0
+END
 COMMON DEF SetControlKeyHandler(CTL,HANDLER$)
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
  CTL_HANDLER$[CTL AND 4095,CTL_KEYHANDLER]=HANDLER$
@@ -593,6 +613,8 @@
  WIN_FH1[NUWID]=CTL_FH1[NUCID]'WIN_TOPLEVELY
  WIN_AX[NUWID]=WIN_TopLevelX
  WIN_AY[NUWID]=WIN_TOPLEVELY
+ WIN_X[NUWID]=WIN_TopLevelX
+ WIN_Y[NUWID]=WIN_TOPLEVELY
  INC WIN_TopLevelX,CTL_FH1[NUCID]'WIN_FHEIGHT1
  INC WIN_TopLevelY,CTL_FH1[NUCID]'WIN_FHEIGHT1
  WIN_RX[NUWID]=WIN_AX[NUWID]
@@ -624,7 +646,7 @@
 COMMON DEF DeleteWindow(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
- RepaintAllWindow WIN_RX[NUWID],WIN_RY[NUWID],WIN_AW[NUWID],WIN_AH[NUWID]
+ RepaintAllWindow WIN_ROOTWND,WIN_RX[NUWID],WIN_RY[NUWID],WIN_AW[NUWID],WIN_AH[NUWID]
  VAR E=DeleteWindowNUWID(NUWID)
  RETURN E
 END
@@ -661,17 +683,18 @@
  IF P THEN
   WIN_NEXT[P]=N
  ENDIF
- IF WIN_SP[NUWID]THEN
-  SPVAR WIN_SP[NUWID]AND 511,0,0
-  SPCLR WIN_SP[NUWID]AND 511
-  WIN_SP[NUWID]=0
- ENDIF
  WIN_NEXT[NUWID]=WIN_FREE
  WIN_PREV[NUWID]=0
  WIN_PARENT[NUWID]=0
  WIN_CHILD[NUWID]=0
  WIN_FREE=NUWID
  WIN_NAME$[NUWID]=""
+ IF WIN_SP[NUWID]THEN
+  SPVAR WIN_SP[NUWID]AND 511,0,0
+  SPCLR WIN_SP[NUWID]AND 511
+  WIN_SP[NUWID]=0
+  OTW_SPSORT
+ ENDIF
  RETURN 0
 END
 
@@ -689,6 +712,7 @@
  WEND
 END
 DEF OTW_DrawMap NUWID
+ IF WIN_HIDE[NUWID]THEN RETURN
  GPAGE OTW_SP,OTW_DP
  GCLIP 1,0,240,400,480
  GFILL WIN_RX[NUWID],WIN_RY[NUWID]+240,WIN_RX[NUWID]+WIN_AW[NUWID],WIN_RY[NUWID]+WIN_AH[NUWID]+240,ShortToRGB(WIN_FRAMEFLG OR NUWID)
@@ -726,11 +750,12 @@
     WIN_PREV[NUWID]=C
     WIN_NEXT[NUWID]=0
     IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK) THEN
-     VAR Z,Z2,S
-     SPOFS WIN_SP[NUWID]AND 511OUT S,S,Z
-     SPOFS WIN_SP[C]AND 511OUT S,S,Z2
-     SPOFS WIN_SP[NUWID]AND 511,,,Z2
-     SPOFS WIN_SP[C]AND 511,,,Z
+    'VAR Z,Z2,S
+    'SPOFS WIN_SP[NUWID]AND 511OUT S,S,Z
+    'SPOFS WIN_SP[C]AND 511OUT S,S,Z2
+    'SPOFS WIN_SP[NUWID]AND 511,,,Z2
+    'SPOFS WIN_SP[C]AND 511,,,Z
+     OTW_SPSORT
     ENDIF
     VOID RepaintWindow(WND)
     OTW_DrawMap NUWID
@@ -761,8 +786,8 @@
  RETURN 0
 END
 
-DEF RepaintAllWindow X,Y,W,H
- VAR NXT=WIN_ROOTWND AND NUWIDMASK
+DEF RepaintAllWindow WND,X,Y,W,H
+ VAR NXT=WND AND NUWIDMASK
  VAR B=NXT
 ' WHILE NXT
 '  VOID RepaintWindow(NXT OR(WIN_WID[NXT]<<WIDHIFT))
@@ -770,7 +795,7 @@
 '  IF WIN_CHILD[NXT]THEN
 '   B=WIN_CHILD[NXT]
    WHILE B
-   VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
+    IF!WIN_HIDE[B]THEN VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
     OTW_DrawMap B
     IF WIN_CHILD[B]THEN
      B=WIN_CHILD[B]
@@ -860,19 +885,35 @@
  ENDIF
  WIN_AFW[NUWID]=W
  WIN_AFH[NUWID]=H
+ WIN_HIDE[NUWID]=0
+ IF WIN_AH[NUWID]<0THEN
+  WIN_HIDE[NUWID]=1
+  RETURN
+ ENDIF
+ IF WIN_AW[NUWID]<0THEN
+  WIN_HIDE[NUWID]=1
+  RETURN
+ ENDIF
 END
-COMMON DEF MoveWindow(WND,X,Y)
+COMMON DEF BeginWindowOP(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
+ RETURN 0
+END
+COMMON DEF EndWindowOp(WND)
+ IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
+ RepaintAllWindow WND,0,0,0,0
+ RETURN 0
+END
+COMMON DEF MoveWindow2(WND,X,Y)
+ IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
- VAR MX=X-WIN_AX[NUWID],MY=Y-WIN_AY[NUWID]
- IF!MX&&!MY THEN RETURN FrontWindow(WND)
- VAR NXT=WIN_CHILD[NUWID],B=NXT
- IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK)THEN
-' GFILL WIN_RX[NUWID],WIN_RY[NUWID],WIN_RX[NUWID]+WIN_AW[NUWID],WIN_RY[NUWID]+WIN_AH[NUWID],0
- ENDIF
-' GFILL WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],0
- WIN_AX[NUWID]=WIN_AX[NUWID]+MX
- WIN_AY[NUWID]=WIN_AY[NUWID]+MY
+ VAR MX=X-WIN_X[NUWID],MY=Y-WIN_Y[NUWID]
+ IF!MX&&!MY THEN RETURN 0
+ VAR PNUWID=WIN_PARENT[NUWID]
+ WIN_X[NUWID]=X'INC WIN_X[NUWID],MX
+ WIN_Y[NUWID]=Y'INC WIN_Y[NUWID],MY
+ WIN_AX[NUWID]=WIN_AX[PNUWID]+X
+ WIN_AY[NUWID]=WIN_AY[PNUWID]+Y
  WIN_FX[NUWID]=WIN_AX[NUWID]+WIN_FW1[NUWID]
  WIN_FY[NUWID]=WIN_AY[NUWID]+WIN_FH1[NUWID]
  WIN_RFX[NUWID]=WIN_FX[NUWID]
@@ -880,24 +921,67 @@
  WIN_RX[NUWID]=WIN_AX[NUWID]
  WIN_RY[NUWID]=WIN_AY[NUWID]
  OTW_CLIPWindow NUWID
-' STOP
-' WIN_AH[NUWID]=WIN_HEIGHT[NUWID]
-' IF WIN_AX[PNUWID]>WIN_RX[NUWID]THEN
-' WIN_RX[NUWID]=WIN_AX[PNUWID]
-'ENDIF
-'IF WIN_AY[PNUWID]>WIN_RY[NUWID]THEN
-' WIN_RY[NUWID]=WIN_AY[PNUWID]
-'ENDIF
-'IALOG STR$(WIN_FX[PNUWID]-WIN_AX[NUWID])
- IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK)THEN
-' GFILL WIN_RX[NUWID],WIN_RY[NUWID],WIN_RX[NUWID]+WIN_AW[NUWID],WIN_RY[NUWID]+WIN_AH[NUWID],0
+ VAR NXT=WIN_CHILD[WIN_PARENT[NUWID]],B
+
+ IF!NXT THEN RETURN 0
+ B=NXT
+ IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK) THEN
+  IF WIN_SP[NUWID]THEN
+   WIN_SP[NUWID]=WIN_SP[NUWID] OR 512
+  ENDIF
  ENDIF
- VAR E=FrontWindow(WND)
- IF E THEN RETURN E
- 'WHILE 1
-' 
-'WEND
- NXT=WIN_CHILD[WIN_PARENT[NUWID]]
+ WHILE NXT
+  IF WIN_CHILD[NXT]THEN
+   B=WIN_CHILD[NXT]
+   VAR MVF=NUWID==NXT
+   WHILE B
+    IF MVF THEN
+     WIN_AX[B]=WIN_AX[B]+MX
+     WIN_AY[B]=WIN_AY[B]+MY
+     WIN_FX[B]=WIN_FX[B]+MX
+     WIN_FY[B]=WIN_FY[B]+MY
+     WIN_RFX[B]=WIN_RFX[B]+MX
+     WIN_RFY[B]=WIN_RFY[B]+MY
+     WIN_RX[B]=WIN_RX[B]+MX
+     WIN_RY[B]=WIN_RY[B]+MY
+    ENDIF
+    IF!WIN_NEXT[B]THEN
+     WHILE B
+      B=WIN_PARENT[B]
+      IF B==NXT THEN BREAK
+      IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
+     WEND
+     IF B==NXT THEN BREAK
+    ENDIF
+    IF WIN_CHILD[B]THEN
+     B=WIN_CHILD[B]
+     CONTINUE
+    ENDIF
+    B=WIN_NEXT[B]
+    IF B==NXT THEN BREAK
+   WEND
+  ENDIF
+  NXT=WIN_NEXT[NXT]
+ WEND
+END
+COMMON DEF MoveWindow(WND,X,Y)
+ IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
+ VAR NUWID=WND AND NUWIDMASK
+ VAR MX=X-WIN_X[NUWID],MY=Y-WIN_Y[NUWID]
+ IF!MX&&!MY THEN RETURN 0
+ VAR PNUWID=WIN_PARENT[NUWID]
+ WIN_X[NUWID]=X'INC WIN_X[NUWID],MX
+ WIN_Y[NUWID]=Y'INC WIN_Y[NUWID],MY
+ WIN_AX[NUWID]=WIN_AX[PNUWID]+X
+ WIN_AY[NUWID]=WIN_AY[PNUWID]+Y
+ WIN_FX[NUWID]=WIN_AX[NUWID]+WIN_FW1[NUWID]
+ WIN_FY[NUWID]=WIN_AY[NUWID]+WIN_FH1[NUWID]
+ WIN_RFX[NUWID]=WIN_FX[NUWID]
+ WIN_RFY[NUWID]=WIN_FY[NUWID]
+ WIN_RX[NUWID]=WIN_AX[NUWID]
+ WIN_RY[NUWID]=WIN_AY[NUWID]
+ OTW_CLIPWindow NUWID
+ VAR NXT=WIN_CHILD[WIN_PARENT[NUWID]],B
  VOID RepaintWindow(WIN_PARENT[NUWID]OR(WIN_WID[WIN_PARENT[NUWID]]<<WIDSHIFT))
 
  IF!NXT THEN RETURN'WIN_
@@ -999,11 +1083,15 @@
  RETURN 0
 END
 COMMON DEF RepaintWindow(WND)
+ IF WIN_HIDE[WND AND NUWIDMASK]THEN RETURN 0
  RETURN SendWindowEvent(WND,CTL_PAINTHANDLER,0,0)
 END
 COMMON DEF SendNotificationWindow(WND,DAT,DAT2)
  RETURN SendWindowEvent(WND,CTL_NOTIFHANDLER,DAT,DAT2)
 END
+COMMON DEF SendNotifWindow(WND,DAT,DAT2)
+ RETURN SendWindowEvent(WND,CTL_NOTIFHANDLER,DAT,DAT2)
+END
 COMMON DEF SendKeyWindow(WND,KEY)
  RETURN SendWindowEvent(WND,CTL_KEYHANDLER,KEY,0)
 END
@@ -1119,6 +1207,14 @@
  IF!CheckWindow(WND)THEN RETURN -1
  RETURN WIN_HEIGHT[WND AND NUWIDMASK]-WIN_FH2[WND AND NUWIDMASK]
 END
+COMMON DEF GetWindowX(WND)
+ IF!CheckWindow(WND)THEN RETURN -1
+ RETURN WIN_FX[WND AND NUWIDMASK]
+END
+COMMON DEF GetWindowY(WND)
+ IF!CheckWindow(WND)THEN RETURN -1
+ RETURN WIN_FY[WND AND NUWIDMASK]
+END
 COMMON DEF GetWindowVar(WND,I)
  RETURN WIN_VAR[WND AND NUWIDMASK,I]
 END
@@ -1178,32 +1274,34 @@
  ENDIF
  RETURN NUWIDToWND(WIN_PARENT[WND AND NUWIDMASK])
 END
+COMMON DEF GetChildWindow(WND)
+ IF!CheckWindow(WND)THEN
+  RETURN 0
+ ENDIF
+ RETURN NUWIDToWND(WIN_CHILD[WND AND NUWIDMASK])
+END
+COMMON DEF GetNextWindow(WND)
+ IF!CheckWindow(WND)THEN
+  RETURN 0
+ ENDIF
+ RETURN NUWIDToWND(WIN_NEXT[WND AND NUWIDMASK])
+END
+COMMON DEF GetPrevWindow(WND)
+ IF!CheckWindow(WND)THEN
+  RETURN 0
+ ENDIF
+ RETURN NUWIDToWND(WIN_PREV[WND AND NUWIDMASK])
+END
 ''WINDOW GRAPHIC
 COMMON DEF GBeginWindow(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
+ IF WIN_HIDE[NUWID]THEN RETURN WIN_NODRAW
  IF WIN_BEGIN[NUWID]==1THEN RETURN WIN_EVENTERR
  VAR AX=WIN_RFX[NUWID]'WIN_FW1[NUWID]
  VAR AY=WIN_RFY[NUWID]'WIN_FH1[NUWID]
- VAR W=WIN_AW[NUWID]
- VAR H=WIN_AH[NUWID]
- IF W==WIN_WIDTH[NUWID]THEN
-  DEC W,WIN_FW2[NUWID]
- ELSE
-  DEC W,WIN_FW2[NUWID]-WIN_FW1[NUWID]
- ENDIF
- IF H==WIN_HEIGHT[NUWID]THEN
-  DEC H,WIN_FH2[NUWID]
- ELSE
-  IF WIN_HEIGHT[NUWID]-H>=WIN_FH1[NUWID]THEN
-   DEC H,WIN_FH2[NUWID]-WIN_FH1[NUWID]
-  ELSE
-   DEC H,WIN_FH1[NUWID]-(WIN_HEIGHT[NUWID]-H)+1
-'WIN_HEIGHT[NUWID]-H'WIN_FH2[NUWID]-WIN_FH1[NUWID]
-  ENDIF
- ENDIF
- W=WIN_AFW[NUWID]
- H=WIN_AFH[NUWID]
+ VAR W=WIN_AFW[NUWID]
+ VAR H=WIN_AFH[NUWID]
  GPAGE OTW_SP,OTW_BP
  GCLIP 1,AX,AY,AX+W,AY+H
  IF WIN_BEGIN[NUWID]>=2THEN RETURN 0
@@ -1234,6 +1332,7 @@
 COMMON DEF GEndWindow(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
+ IF WIN_HIDE[NUWID]THEN RETURN WIN_NODRAW
  IF!WIN_BEGIN[NUWID]THEN RETURN WIN_EVENTERR
  'ごうせい
  WIN_PARENT[0]=0
@@ -1258,7 +1357,7 @@
  IF H==WIN_HEIGHT[NUWID]THEN DEC H,WIN_FH2[NUWID]-WIN_FH1[NUWID]
   GCLIP 1,AX,AY,AX+W,AY+H
   WHILE PNUWID
-   GCOPY OTW_DP,WIN_RX[PNUWID],WIN_RY[PNUWID],WIN_RX[PNUWID]+WIN_AW[PNUWID],WIN_RY[PNUWID]+WIN_AH[PNUWID],WIN_RX[PNUWID],WIN_RY[PNUWID],0
+   IF!WIN_HIDE[PNUWID]THEN GCOPY OTW_DP,WIN_RX[PNUWID],WIN_RY[PNUWID],WIN_RX[PNUWID]+WIN_AW[PNUWID],WIN_RY[PNUWID]+WIN_AH[PNUWID],WIN_RX[PNUWID],WIN_RY[PNUWID],0
 
    PNUWID=WIN_NEXT[PNUWID]
   WEND
@@ -1276,7 +1375,7 @@
    PNUWID=WIN_NEXT[PNUWID]
    CONTINUE
   ENDIF
-   GCOPY OTW_DP,WIN_RX[PNUWID],WIN_RY[PNUWID],WIN_RX[PNUWID]+WIN_AW[PNUWID],WIN_RY[PNUWID]+WIN_AH[PNUWID],WIN_RX[PNUWID],WIN_RY[PNUWID],0
+   IF!WIN_HIDE[PNUWID]THEN GCOPY OTW_DP,WIN_RX[PNUWID],WIN_RY[PNUWID],WIN_RX[PNUWID]+WIN_AW[PNUWID],WIN_RY[PNUWID]+WIN_AH[PNUWID],WIN_RX[PNUWID],WIN_RY[PNUWID],0
   _NUWID=PNUWID
   PNUWID=WIN_NEXT[PNUWID]
  WEND
@@ -1440,6 +1539,7 @@
  VAR X=MX+A1X
  VAR Y=MY+A2Y
  VAR E=MoveWindow(WND,X,Y)
+ E=FrontWindow(WND)
  SPHIDE OTW_MOVWINSP
  SPUNLINK OTW_MOVWINSP
  MouseClipDef
@@ -1579,6 +1679,100 @@
  NEXT
  E=GEndWindow(W)
 END
+DEF NewVScrollBar PARENT,SIZ OUT WND,E
+ VAR W=GetWindowWidth(PARENT)
+ VAR H=GetWindowHeight(PARENT)
+ NewWindow GetVScrollBarControl(),"GG",W-8,0,8,H,PARENT,0 OUT WND,E
+ SetWindowVar WND,1,SIZ
+END
+COMMON DEF SetScrollBarSize W,SIZ
+ SetWindowVar W,1,SIZ
+ SetWindowVar W,2,0
+ VOID RepaintWindow(W)
+END
+COMMON DEF SetScrollBarPostion W,POS
+ SetWindowVar W,2,POS
+ VOID RepaintWindow(W)
+END
+DEF VSCRBARPainter W,_,T,XY,WH
+ IF GBEGINWindow(W)THEN RETURN
+ GCLSWindow W,RGB(224,224,224)
+ VAR _W=GetWindowWidth(W)
+ VAR _H=GetWindowHeight(W)
+ GBOXWindow W,0,0,_W,_H,RGB(0,0,0)
+ '====
+ 'BOX
+ GLINEWindow W,0,0,0,7,-1
+ GLINEWindow W,0,0,7,0,-1
+ VAR C=RGB(0,0,0)
+ '
+ GLINEWindow W,4,2,2,4,C
+ GFILLWindow W,3,3,5,6,C
+ GPSETWindow W,6,4,C
+ GLINEWindow W,0,8,8,8,C
+ '====
+ 'BOX
+ GLINEWindow W,0,_H-1,0,_H-8,-1
+ GLINEWindow W,0,_H-8,7,_H-8,-1 
+ '
+ GLINEWindow W,2,_H-4,4,_H-2,C
+ GFILLWindow W,3,_H-6,5,_H-3,C
+ GPSETWindow W,6,_H-4,C
+ 
+ '==BAR==
+ VAR AH=_H-18
+ VAR SIZ=GetWindowVar(W,1)
+ VAR POS=GetWindowVar(W,2)
+ 'Barのながさ
+ VAR BS=AH-SIZ
+ VAR S=9+POS
+ '10いか
+ IF BS<10THEN
+  BS=10
+  S=(S-9)*((AH-10)/SIZ)+9
+ ENDIF
+ GLINEWindow W,1,S,_W-1,S,C
+ GLINEWindow W,1,S+BS,_W-1,S+BS,C
+ GLINEWindow W,_W-1,S+1,_W-1,S+BS-2,RGB(128,128,128)
+ GLINEWindow W,1,S+BS-1,_W-1,S+BS-1,RGB(128,128,128)
+ GLINEWindow W,1,S+1,1,S+BS-2,-1
+ GLINEWindow W,1,S+1,_W-2,S+1,-1
+ IF GENDWindow(W)THEN RETURN
+END
+DEF VSCRBARLMouseUP W,C,T,X,Y
+ SetWindowVar W,3,8
+END
+DEF VSCRBARLMouseDown W,C,T,X,Y
+ VAR ID=GetWindowVar(W,3)
+ IF ID<8THEN
+  IF!ID THEN
+   ID=0
+   IF Y<9THEN
+    ID=2
+   ENDIF
+   IF Y>GetWindowHeight(W)-9THEN
+    ID=3
+   ENDIF
+   SetWindowVar W,3,ID
+  ENDIF
+  VOID LMouseDownWindow(W)
+ ELSE
+  SetWindowVar W,3,0
+  RETURN
+ ENDIF
+ VAR SIZ=GetWindowVar(W,1)
+ VAR POS=GetWindowVar(W,2)
+ IF ID==2&&POS>0 THEN
+  SetWindowVar W,2,POS-1
+  VSCRBARPainter W,C,0,0,0
+  VOID SendNotifWindow(GetParentWindow(W),GetWindowVar(W,0),POS-1)
+ ENDIF
+ IF ID==3&&POS<SIZ THEN
+  SetWindowVar W,2,POS+1
+  VSCRBARPainter W,C,0,0,0
+  VOID SendNotifWindow(GetParentWindow(W),GetWindowVar(W,0),POS+1)
+ ENDIF
+END
 VAR OTW_MOUSESIZE
 DEF OTW_INITSP
  GPSET 408,0,-1
@@ -1617,6 +1811,7 @@
 VAR OTW_KX2
 VAR OTW_KY2
 VAR OTW_USEBTN
+VAR OTW_USEMEM
 COMMON DEF I_OTW
  IF!OTW_INIT THEN
   VAR FM=FREEMEM
@@ -1711,7 +1906,7 @@
   E=SetControlPainter(WIN_ROOTCTL,"DesktopPainter")
   NewTopLevelWindow WIN_ROOTCTL,"DESKTOP",400,240 OUT WIN_ROOTWND,E
   ExtendControl "HELLO",GetWindowControl() OUT TSTCTL,E
- NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND,E
+' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND,E
 ' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND2,E
 ' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND3,E
   E=SetControlPainter(TSTCTL,"HELLOPainter")
@@ -1752,6 +1947,7 @@
   LOCATE 0,29
   NewProcess"LAUNCHER","" OUT E,E,E
   DEC FM,FREEMEM
+  OTW_USEMEM=FM
 '  PrintConsole FORMAT$("UsingMemory8192KB/%DKB",FM/1024)+LF$()
  ENDIF
 RETURN
@@ -1810,6 +2006,7 @@
    ELSE
     IF NUWID AND WIN_FRAMEFLG THEN
      E=LMouseUpWindowOnFrame(NUWIDToWND(WIN_ACTIVENUWID))
+     E=LMouseUpWindow(NUWIDToWND(WIN_ACTIVENUWID))
     ELSE
      E=LMouseUpWindow(NUWIDToWND(WIN_ACTIVENUWID))
     ENDIF
@@ -1830,7 +2027,7 @@
  ENDIF
  VOID UpdateWindowOnly(WIN_ROOTWND)
 'E=UpdateWindow(TSTWND2)
-E=UpdateWindow(TSTWND)
+'E=UpdateWindow(TSTWND)
 'E=UpdateWindow(TSTWND3)
  OTW_FDIFF=MAINCNT-OTW_FCNT
  IF OTW_FDIFF>1 THEN
@@ -1974,6 +2171,7 @@
   LAUNCHERITEM$[5]="TXTED"
   LAUNCHERITEM$[6]="PRGED"
   LAUNCHERITEM$[7]="OTYFIL"
+' LAUNCHERITEM$[8]="MEMVIEW"
   ExtendControl "LAUNCHER",GetWindowControl() OUT LAUNCHERCTL,E
   I_LAUNCHER
  ENDIF
@@ -1988,10 +2186,6 @@
 VAR WCLOCKBC
 VAR WCLOCKBC2
 VAR WCLOCKTIM
-COMMON DEF GetChildWindow(WND)
- IF!CheckWindow(WND)THEN RETURN 0
- RETURN NUWIDToWND(WIN_CHILD[WND AND NUWIDMASK])
-END
 COMMON DEF RunNotificationHandler W,C,T,V,A2
  VAR PID,NUPID,E
  NewProcess GetWindowName$(GetChildWindow(GetParentWindow(V))),"" OUT PID,NUPID,E
@@ -2929,6 +3123,7 @@
  COPY OTYFILICODAT,ICONS,16*16,16*16
 END
 VAR OTYFILCTL
+VAR OTYFILESWND
 VAR OTYFILES$[0]
 VAR OTYFILICONCTL
 COMMON DEF OTYFILICONCTLPainter W,C,T,_,__
@@ -2941,6 +3136,55 @@
  ENDIF
  IF GEndWindow(W)THEN RETURN
 END
+COMMON DEF OTYFILNOTIF WND,CTL,T,ID,POS
+ VAR I=GetNextWindow(GetChildWindow(WND))
+ IF BeginWindowOP(WND)THEN RETURN
+ POS=POS*4
+ VAR W=36*4+8,H=64
+ VAR R=W/36
+ VAR C=CEIL(H/40.0)
+ VAR BY1=(POS MOD 40)+7
+ VAR BY2=(POS MOD 40)-10
+ IF OTYFILESWND!=WND THEN
+  GetFiles OTYFILES$,"SYS"
+  OTYFILESWND=WND
+ ENDIF
+' ?R,C,POS,POS DIV 16,POS DIV 40,BY1
+ VAR X=1,Y=-22
+ VAR J
+ VAR L2=R*2
+ VAR F
+ VAR K=(POS DIV 40)*R
+ VAR KL=LEN(OTYFILES$)
+ WHILE I
+  IF!(J MOD L2) THEN INC Y,40X=1
+  IF F THEN
+   IF KL<=K THEN
+    VOID MoveWindow2(I,-256,-256)
+   ELSE
+    VOID MoveWindow2(I,X,Y-BY2)
+    SetWindowName I,RIGHT$(OTYFILES$[K],LEN(OTYFILES$[K])-1)
+   ENDIF
+   INC K
+   INC X,36
+  ELSE
+   IF KL<=K THEN
+    VOID MoveWindow2(I,-256,-256)
+   ELSE
+    VOID MoveWindow2(I,X+8,Y-BY1)
+    IF OTYFILES$[K][0]==" "THEN
+     SetWindowVar I,1,1
+    ELSE
+     SetWindowVar I,1,0
+    ENDIF
+   ENDIF
+  ENDIF
+  F=!F
+  I=GetNextWindow(I)
+  INC J
+ WEND
+ IF EndWindowOP(WND)THEN RETURN
+END
 COMMON DEF I_OTYFIL
  IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
   PrintConsole "Require window system"+LF$()
@@ -2950,6 +3194,7 @@
  VAR WND,E
  IF!OTYFILCTL THEN
   ExtendControl "Files",GetWindowControl() OUT OTYFILCTL,E
+  E=SetControlNotifHandler(OTYFILCTL,"OTYFILNOTIF")
   NewControl "ICON" OUT OTYFILICONCTL,E
   E=SetControlPainter(OTYFILICONCTL,"OTYFILICONCTLPainter")
   RC_OTYFIL
@@ -2959,20 +3204,51 @@
  VAR X=8,Y,I
  OTYFILES$=NewArray$(0)
  GetFiles OTYFILES$,"SYS"
- FOR I=0TO LEN(OTYFILES$)-1
+ OTYFILESWND=WND
+ VAR R=W/36
+ VAR C=CEIL(H/40.0)+1
+ VAR L=R*C
+ IF LEN(OTYFILES$)<=L THEN L=LEN(OTYFILES$)-1
+ FOR I=0TO L'LEN(OTYFILES$)-1
   IF X+32+4>W THEN INC Y,40:X=8
-  IF Y+16>=H THEN BREAK
-  NewWindow OTYFILICONCTL,"",X,Y,15,15,WND,0 OUT LBL,E
-  IF OTYFILES$[I][0]==" "THEN SetWindowVar LBL,1,1
+'  IF Y+16>=H THEN BREAK
   NewWindow GetLabelControl(),RIGHT$(OTYFILES$[I],LEN(OTYFILES$[I])-1),X-8,Y+16,32,24,WND,0 OUT LBL,E
   SetLabelAlignCenter LBL
+  NewWindow OTYFILICONCTL,"",X,Y,15,15,WND,0 OUT LBL,E
+  IF OTYFILES$[I][0]==" "THEN SetWindowVar LBL,1,1
   INC X,32+4
  NEXT
+ VAR SCR
+ VAR OL=W/36
+ VAR AW=FLOOR(LEN(OTYFILES$)/OL)*10
+ NewVScrollBAR WND,AW OUT SCR,E
  SetProcessVar WND
 END
 COMMON DEF L_OTYFIL
  IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
 END
+VAR MEMVIEWCTL
+COMMON DEF I_MEMVIEW
+ IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
+  PrintConsole "Require window system"+LF$()
+  ExitProcess 1
+  RETURN
+ ENDIF
+ VAR WND,E
+ IF!MEMVIEWCTL THEN
+  ExtendControl "MEMVIEW",GetWindowControl() OUT MEMVIEWCTL,E
+ ENDIF
+ NewTopLevelWindow MEMVIEWCTL,"MEMVIEW",128,96 OUT WND,E
+SetProcessVar WND
+END
+COMMON DEF L_MEMVIEW
+ IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
+ ?FREEMEM,OTW_USEMEM
+END
+
+
+
+'=========
 DEF OTW_LOADFONT
  'LOAD FONT-1
  VAR C$
