diff -u OTW.TXT OTWD
--- OTW.TXT
+++ OTWD
@@ -39,9 +39,8 @@
 DIM WIN_CTL    [0]
 DIM WIN_PID    [0]
 DIM WIN_NUPID  [0]
-DIM WIN_DATA#  [0]
-DIM WIN_DATA%  [0]
-DIM WIN_DATA$  [0]
+VAR WIN_VARSIZ
+DIM WIN_VAR    [0,0]
 DIM WIN_NEXT   [0]
 DIM WIN_PREV   [0]
 DIM WIN_CHILD  [0]
@@ -52,6 +51,7 @@
 DIM WIN_MSGS   [0]
 DIM WIN_MSGE   [0]
 DIM WIN_MSGBUF [0,0,0]
+DIM WIN_USER   [0,0]
 VAR WIN_FREE
 VAR WIN_WIDCNT
 VAR WIN_MSGARGSIZE
@@ -80,6 +80,7 @@
 '⇔⇔
 'W1         W2
 '
+VAR WIN_ACTIVENUWID
 DEF OTW_WIN_INITARRAY
  VAR FM=FREEMEM
  WIN_FWIDTH1=0
@@ -92,6 +93,7 @@
  WIDSHIFT=12
  NUWIDMASK=4095
  WIN_FRAMEFLG=32768
+ WIN_VARSIZ=8
  WIN_NAME$     =NewArray$(WIN_MAX)
  WIN_WID       =NewArray(WIN_MAX)
  WIN_X         =NewArray(WIN_MAX)
@@ -115,9 +117,7 @@
  WIN_CTL       =NewArray(WIN_MAX)
  WIN_PID       =NewArray(WIN_MAX)
  WIN_NUPID     =NewArray(WIN_MAX)
- WIN_DATA#     =NewArray#(WIN_MAX)
- WIN_DATA%     =NewArray%(WIN_MAX)
- WIN_DATA$     =NewArray$(WIN_MAX)
+ WIN_VAR       =NewArray2(WIN_MAX,WIN_VARSIZ)
  WIN_NEXT      =NewArray(WIN_MAX)
  WIN_PREV      =NewArray(WIN_MAX)
  WIN_CHILD     =NewArray(WIN_MAX)
@@ -164,12 +164,17 @@
 VAR CTL_RBTNDWNHANDLER
 VAR CTL_FRMBTNHANDLER
 VAR CTL_DRWFRMHANDLER
+VAR CTL_NOTIFHANDLER
+VAR CTL_KEYHANDLER
+VAR CTL_BTNHANDLER
+VAR CTL_CHFOCUSHANDLER
 VAR CTL_LBTNFLG
 VAR CTL_RBTNFLG
 VAR CTL_BTNDWNFLG
 VAR CTL_BTNUPFLG
 VAR CTL_WINDOWCTL
 VAR CTL_BUTTONCTL
+VAR CTL_TXTBOXCTL
 DEF OTW_CTL_INITARRAY
  CTL_MAX=64
  CTL_HANDLER_MAX=16
@@ -188,6 +193,7 @@
  VAR E
  NewControl "WINDOW" OUT CTL_WINDOWCTL,E
  NewControl "BUTTON" OUT CTL_BUTTONCTL,E
+ NewControl "TXTBOX" OUT CTL_TXTBOXCTL,E
  CTL_PAINTHANDLER=0
  CTL_LBTNDWNHANDLER=1
  CTL_LBTNUPHANDLER=2
@@ -195,6 +201,10 @@
  CTL_RBTNDWNHANDLER=4
 
  CTL_FRMBTNHANDLER=5
+ CTL_NOTIFHANDLER=6
+ CTL_KEYHANDLER=7
+ CTL_BTNHANDLER=8
+ CTL_CHFOCUSHANDLER=9
  'A1=,A2=bit16~31Y,Xbit0~15
  CTL_LBTNFLG=4
  CTL_RBTNFLG=8
@@ -207,6 +217,11 @@
  E=SetControlClickFrameHandler(CTL_WINDOWCTL,"WindowClickFrame")
  E=SetControlPainter(CTL_BUTTONCTL,"ButtonPainter")
  E=SetControlLMouseUpHandler(CTL_BUTTONCTL,"ButtonLMouseUP")
+ E=SetControlPainter(CTL_TXTBOXCTL,"TextBoxPainter")
+ E=SetControlLMouseDownHandler(CTL_TXTBOXCTL,"TextBoxLMouseDown")
+ E=SetControlKeyHandler(CTL_TXTBOXCTL,"TextBoxKey")
+ E=SetControlButtonHandler(CTL_TXTBOXCTL,"TextBoxButton")
+ E=SetControlChFocusHandler(CTL_TXTBOXCTL,"TextBoxChFocus")
 END
 DEF OTW_INITLIST ARY[]
  VAR I
@@ -232,6 +247,9 @@
 COMMON DEF GetButtonControl()
  RETURN CTL_BUTTONCTL
 END
+COMMON DEF GetTextBoxControl()
+ RETURN CTL_TXTBOXCTL
+END
 'CONTROL
 COMMON DEF NewControl NAME$ OUT CTL,ERR
  IF!CTL_FREE THEN
@@ -304,11 +322,36 @@
  CTL_HANDLER$[CTL AND 4095,CTL_LBTNUPHANDLER]=HANDLER$
  RETURN 0
 END
+COMMON DEF SetControlLMouseDownHandler(CTL,HANDLER$)
+ IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
+ CTL_HANDLER$[CTL AND 4095,CTL_LBTNDWNHANDLER]=HANDLER$
+ RETURN 0
+END
 DEF SetControlClickFrameHandler(CTL,HANDLER$)
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
  CTL_HANDLER$[CTL AND 4095,CTL_FRMBTNHANDLER]=HANDLER$
  RETURN 0
 END
+COMMON DEF SetControlNotificationHandler(CTL,HANDLER$)
+ IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
+ CTL_HANDLER$[CTL AND 4095,CTL_NOTIFHANDLER]=HANDLER$
+ RETURN 0
+END
+COMMON DEF SetControlKeyHandler(CTL,HANDLER$)
+ IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
+ CTL_HANDLER$[CTL AND 4095,CTL_KEYHANDLER]=HANDLER$
+ RETURN 0
+END
+COMMON DEF SetControlButtonHandler(CTL,HANDLER$)
+ IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
+ CTL_HANDLER$[CTL AND 4095,CTL_BTNHANDLER]=HANDLER$
+ RETURN 0
+END
+COMMON DEF SetControlChFocusHandler(CTL,HANDLER$)
+ IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
+ CTL_HANDLER$[CTL AND 4095,CTL_CHFOCUSHANDLER]=HANDLER$
+ RETURN 0
+END
 DEF SetControlFrameSize(CTL,W1,H1,W2,H2)
  IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
  VAR C=CTL AND 4095
@@ -371,8 +414,8 @@
  WIN_X[NUWID]=X
  WIN_Y[NUWID]=Y
  
- WIN_AX[NUWID]=WIN_AX[PNUWID]+X
- WIN_AY[NUWID]=WIN_AY[PNUWID]+Y '
+ WIN_AX[NUWID]=WIN_FX[PNUWID]+X
+ WIN_AY[NUWID]=WIN_FY[PNUWID]+Y '
  WIN_FW1[NUWID]=CTL_FW1[NC]
  WIN_FH1[NUWID]=CTL_FH1[NC]
  WIN_FW2[NUWID]=CTL_FW1[NC]+CTL_FW2[NC]
@@ -426,17 +469,36 @@
    ELSE
     WIN_CHILD[PNUWID]=N
    ENDIF
+   OTW_DrawMap NUWID
   ELSE
    N=WIN_CHILD[PNUWID]
    WIN_CHILD[PNUWID]=NUWID
+   OTW_DrawMap NUWID
    IF N THEN
     WIN_NEXT[NUWID]=N
     WIN_PREV[N]=NUWID
+    VAR B=NUWID
+    WHILE B
+     OTW_DrawMap B
+     IF!WIN_NEXT[B]THEN
+      WHILE B
+       B=WIN_PARENT[B]
+       IF B==PNUWID THEN BREAK
+       IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
+      WEND
+      IF B==PNUWID THEN BREAK
+     ENDIF
+     IF WIN_CHILD[B]THEN
+      B=WIN_CHILD[B]
+      CONTINUE
+     ENDIF
+     B=WIN_NEXT[B]
+     IF B==PNUWID THEN BREAK
+    WEND
    ENDIF
   ENDIF
  ENDIF
  VOID RepaintWindow(WND)
- OTW_DrawMap NUWID
 END
 COMMON DEF NewTopLevelWindow CTL,NAME$,WIDTH,HEIGHT OUT WND,ERR
  IF!CheckControl(CTL)THEN
@@ -553,6 +615,46 @@
  SPCOL FRAME,0,0,WIN_WIDTH[NUWID]+3,WIN_HEIGHT[NUWID]+11
  OTW_SPSORT
 END
+
+COMMON DEF DeleteWindow(WND)
+ IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
+ VAR NUWID=WND AND NUWIDMASK
+ RepaintAllWindow WIN_RX[NUWID],WIN_RY[NUWID],WIN_AW[NUWID],WIN_AH[NUWID]
+ VAR E=DeleteWindow(NUWID)
+ RETURN E
+END
+COMMON DEF DeleteWindowNUWID(NUWID)
+ VAR E
+ IF WIN_WID[NUWID]<=0THEN RETURN WIN_INVALIDID
+ WIN_MSGS[NUWID]=0
+ WIN_MSGE[NUWID]=0
+ VAR I
+ FOR I=0TO 7
+  WIN_VAR[NUWID,I]=0
+ NEXT
+ IF WIN_CHILD[NUWID]THEN
+  VAR C=WIN_CHILD[NUWID]
+  WHILE C
+   E=DeleteWindow(C)
+  WEND
+ ENDIF
+ VAR N=WIN_NEXT[NUWID]
+ VAR P=WIN_PREV[NUWID]
+ IF N THEN
+  IF P THEN
+   WIN_NEXT[P]=N
+  ENDIF
+  WIN_PREV[N]=P
+ ENDIF
+ IF P THEN
+  WIN_NEXT[P]=N
+ ENDIF
+ IF WIN_CHILD[WIN_PARENT[NUWID]]==NUWID THEN
+  WIN_CHILD[WIN_PARENT[NUWID]]=N
+ ENDIF
+ RETURN 0
+END
+
 DEF OTW_SPSORT
  VAR I,Z=0
  IF OTW_TOPLEVELCNT-1THEN Z=(1022+255)/(OTW_TOPLEVELCNT-1)
@@ -635,6 +737,37 @@
   WEND
  RETURN 0
 END
+
+DEF RepaintAllWindow X,Y,W,H
+ VAR NXT=WIN_ROOTWND AND NUWIDMASK
+ VAR B=NXT
+ WHILE NXT
+  VOID RepaintWindow(NXT OR(WIN_WID[NXT]<<WIDSHIFT))
+  OTW_DrawMap NXT
+  IF WIN_CHILD[NXT]THEN
+   B=WIN_CHILD[NXT]
+   WHILE B
+   VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
+    OTW_DrawMap B
+    IF!WIN_NEXT[B]THEN
+     WHILE B
+      B=WIN_PARENT[B]
+      IF B==NXT THEN BREAK
+      IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
+     WEND
+     IF B==NXT THEN BREAK
+    ENDIF
+    IF WIN_CHILD[B]THEN
+     B=WIN_CHILD[B]
+     CONTINUE
+    ENDIF
+    B=WIN_NEXT[B]
+    IF B==NXT THEN BREAK
+   WEND
+  ENDIF
+  NXT=WIN_NEXT[NXT]
+ WEND
+END
 COMMON DEF MoveWindow(WND,X,Y)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  IF!X&&!Y THEN RETURN
@@ -642,7 +775,7 @@
  VAR MX=X-WIN_AX[NUWID],MY=Y-WIN_AY[NUWID]
  VAR NXT=WIN_CHILD[NUWID],B=NXT
  IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK)THEN
-  GFILL WIN_RX[NUWID],WIN_RY[NUWID],WIN_RX[NUWID]+WIN_AW[NUWID],WIN_RY[NUWID]+WIN_AH[NUWID],0
+' GFILL WIN_RX[NUWID],WIN_RY[NUWID],WIN_RX[NUWID]+WIN_AW[NUWID],WIN_RY[NUWID]+WIN_AH[NUWID],0
  ENDIF
 ' GFILL WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],0
  WIN_AX[NUWID]=WIN_AX[NUWID]+MX
@@ -697,6 +830,9 @@
 ' WIN_RY[NUWID]=WIN_AY[PNUWID]
 'ENDIF
 'IALOG STR$(WIN_FX[PNUWID]-WIN_AX[NUWID])
+ IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK)THEN
+ GFILL WIN_RX[NUWID],WIN_RY[NUWID],WIN_RX[NUWID]+WIN_AW[NUWID],WIN_RY[NUWID]+WIN_AH[NUWID],0
+ ENDIF
  VAR E=FrontWindow(WND)
  IF E THEN RETURN E
  'WHILE 1
@@ -803,11 +939,25 @@
 COMMON DEF RepaintWindow(WND)
  RETURN SendWindowEvent(WND,CTL_PAINTHANDLER,0,0)
 END
+COMMON DEF SendNotificationWindow(WND,DAT,DAT2)
+ RETURN SendWindowEvent(WND,CTL_NOTIFHANDLER,DAT,DAT2)
+END
+COMMON DEF SendKeyWindow(WND,KEY)
+ RETURN SendWindowEvent(WND,CTL_KEYHANDLER,KEY,0)
+END
+COMMON DEF SendButtonWindow(WND,BTN)
+ RETURN SendWindowEvent(WND,CTL_BTNHANDLER,BTN,0)
+END
+COMMON DEF SendChFocusWindow(WND,FLG)
+ RETURN SendWindowEvent(WND,CTL_CHFOCUSHANDLER,FLG,0)
+END
 DEF LMouseUpWindow(WND)
- RETURN SendWindowEvent(WND,CTL_LBTNUPHANDLER,OTW_MOUSEX,OTW_MOUSEY)
+ VAR NUWID=WND AND NUWIDMASK
+ RETURN SendWindowEvent(WND,CTL_LBTNUPHANDLER,OTW_MOUSEX-WIN_AX[NUWID],OTW_MOUSEY-WIN_AY[NUWID])
 END
 DEF LMouseDownWindow(WND)
- RETURN SendWindowEvent(WND,CTL_LBTNDWNHANDLER,OTW_MOUSEX,OTW_MOUSEY)
+ VAR NUWID=WND AND NUWIDMASK
+ RETURN SendWindowEvent(WND,CTL_LBTNDWNHANDLER,OTW_MOUSEX-WIN_AX[NUWID],OTW_MOUSEY-WIN_AY[NUWID])
 END
 DEF LMouseDownWindowOnFrame(WND)
  RETURN SendWindowEvent(WND,CTL_FRMBTNHANDLER,CTL_LBTNFLG OR CTL_BTNDWNFLG,JoinInt(OTW_MOUSEX,OTW_MOUSEY))
@@ -828,7 +978,7 @@
  IF WIN_MSGS[NUWID]==WIN_MSGE[NUWID]THEN RETURN -1
  RETURN WIN_MSGBUF[NUWID,WIN_MSGE[NUWID],0]
 END
-COMMON DEF UpdateWindow(WND)
+COMMON DEF UpdateWindowOnly(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
  VAR NUWID=WND AND NUWIDMASK
  IF WIN_MSGS[NUWID]==WIN_MSGE[NUWID]THEN RETURN 0
@@ -841,6 +991,39 @@
  IF WIN_BEGIN[NUWID]THEN VOID GEndWindow(WND)
  RETURN 0
 END
+COMMON DEF UpdateWindow(WND)
+ IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
+ VAR NUWID=WND AND NUWIDMASK
+ IF WIN_MSGS[NUWID]==WIN_MSGE[NUWID]THEN @END
+ VAR NUCID=WIN_CTL[NUWID] AND 4095
+ VAR S=WIN_MSGE[NUWID]
+ VAR TYPE=WIN_MSGBUF[NUWID,S,0]
+ CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],WIN_MSGBUF[NUWID,S,2]
+ INC WIN_MSGE[NUWID]
+ IF WIN_MSGE[NUWID]>=WIN_MSGMAX THEN WIN_MSGE[NUWID]=0
+ IF WIN_BEGIN[NUWID]THEN VOID GEndWindow(WND)
+ @END
+ VAR B=WIN_CHILD[NUWID]
+ WHILE B
+  VAR E=UpdateWindowOnly(B OR B<<WIDSHIFT)
+  IF!WIN_NEXT[B]THEN
+   WHILE B
+    B=WIN_PARENT[B]
+    IF B==NUWID THEN BREAK
+    IF WIN_NEXT[B]THEN BREAK
+   WEND
+   IF B==NUWID THEN BREAK
+   B=WIN_NEXT[B]
+   CONTINUE
+  ENDIF
+  IF WIN_CHILD[B]THEN
+   B=WIN_CHILD[B]
+   CONTINUE
+  ENDIF
+  B=WIN_NEXT[B]
+ WEND 
+ RETURN 0
+END
 
 DEF GetWindowFrameWidth(WND)
  RETURN WIN_WIDTH[WND AND NUWIDMASK]
@@ -851,6 +1034,9 @@
 common def GetWindowName$(wnd)
  return win_name$[wnd and nuwidmask]
 end
+common def SetWindowName wnd,name$
+ win_name$[wnd and nuwidmask]=name$
+end
 COMMON DEF GetWindowWidth(WND)
  IF!CheckWindow(WND)THEN RETURN -1
  RETURN WIN_WIDTH[WND AND NUWIDMASK]-WIN_FW2[WND AND NUWIDMASK]
@@ -859,6 +1045,15 @@
  IF!CheckWindow(WND)THEN RETURN -1
  RETURN WIN_HEIGHT[WND AND NUWIDMASK]-WIN_FH2[WND AND NUWIDMASK]
 END
+COMMON DEF GetWindowVar(WND,I)
+ RETURN WIN_VAR[WND AND NUWIDMASK,I]
+END
+COMMON DEF SetWindowVar WND,I,V
+ WIN_VAR[WND AND NUWIDMASK,I]=V
+END
+COMMON DEF IsActiveWindow(WND)
+ RETURN(WND AND NUWIDMASK)==WIN_ACTIVENUWID
+END
 VAR WIN_DRAGHANDLER$
 VAR WIN_DRAGHANDLER_A1
 VAR WIN_DRAGHANDLER_A2
@@ -900,6 +1095,15 @@
 DEF MouseClipDef
  MouseClip 0,0,400,240
 END
+COMMON DEF GetTextWidth(STR$)
+ RETURN LEN(STR$)*8
+END
+COMMON DEF GetParentWindow(WND)
+ IF!CheckWindow(WND)THEN
+  RETURN 0
+ ENDIF
+ RETURN NUWIDToWND(WIN_PARENT[WND AND NUWIDMASK])
+END
 ''WINDOW GRAPHIC
 COMMON DEF GBeginWindow(WND)
  IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
@@ -912,7 +1116,8 @@
  VAR H=WIN_AH[NUWID]
  GPAGE OTW_SP,OTW_BP
  GCLIP 1,AX,AY,AX+W,AY+H
- GCLS -1
+ IF WIN_BEGIN[NUWID]==2THEN RETURN 0
+ GCLS
  RETURN 0
 END
 DEF ReGBeginWindow(WND)
@@ -938,7 +1143,7 @@
  VAR H=WIN_HEIGHT[NUWID]
  GPAGE OTW_SP,OTW_BP
  GCLIP 1,AX,AY,AX+W,AY+H
- GCLS
+ GCLS RGB(224,224,224)
  RETURN 0
 END
 COMMON DEF GEndWindow(WND)
@@ -1009,9 +1214,25 @@
  VAR AY=WIN_FY[WND AND NUWIDMASK]
  GBOX X+AX,Y+AY,X2+AX,Y2+AY,COL
 END
+COMMON DEF GLINEWindow WND,X,Y,X2,Y2,COL
+ VAR AX=WIN_FX[WND AND NUWIDMASK]
+ VAR AY=WIN_FY[WND AND NUWIDMASK]
+ GLINE X+AX,Y+AY,X2+AX,Y2+AY,COL
+END
+COMMON DEF GCIRCLEWindow WND,X,Y,R,COL
+ VAR AX=WIN_FX[WND AND NUWIDMASK]
+ VAR AY=WIN_FY[WND AND NUWIDMASK]
+ GCIRCLE X+AX,Y+AY,R,COL
+END
+COMMON DEF GLOADWindow WND,X,Y,W,H,IMG[],FLG,MODE
+ VAR AX=WIN_FX[WND AND NUWIDMASK]
+ VAR AY=WIN_FY[WND AND NUWIDMASK]
+ GLOAD X+AX,Y+AY,W,H,IMG,FLG,MODE
+END
 COMMON DEF GPRINTWindowCC WND,X,Y,STR$,PAL
  GPRINTWindow WND,X,Y,STR$,OTW_CONSOLEPAL[PAL]
 END
+
 COMMON DEF GPRINTWindow WND,X,Y,STR$,COL
  IF!(COL AND&HFF000000)THEN RETURN
  VAR AX=WIN_FX[WND AND NUWIDMASK]
@@ -1023,11 +1244,7 @@
   A=ASC(C$)
   IF A<=&H7F&&A>=&H20THEN
    A=A-&H20
-'   BX=A*8
-'   BY=BX/(512-8)+PP
-'   GCOPY 5,BX,BY,BX+7,BY+7,X,Y,0
-   VAR F=OTW_FNT1[A,1],B=1'&H80000000
-'  ?BIN$(F)
+   VAR F=OTW_FNT1[A,1],B=1
    FOR BY=Y+7 TO Y+4 STEP -1
     FOR BX=X+7 TO X STEP -1
      IF F AND B THEN GPSET BX,BY,COL
@@ -1042,7 +1259,7 @@
     NEXT
    NEXT
   ELSE
-   GFILL X,Y,X+6,Y+6,-1
+   GFILL X,Y,X+6,Y+6,COL
   ENDIF
   X=X+8
  NEXT
@@ -1058,7 +1275,14 @@
  VAR E=GBeginFrameWindow(WND)
  IF E THEN RETURN
  GFILLWindow WND,0,-GetWindowFrameHeight(WND),GetWindowFrameWidth(WND),-1,RGB(0,0,255)
- GPRINTWindowCC WND,0,-GetWindowFrameHeight(WND),GetWindowName$(WND),15
+ GPRINTWindowCC WND,1,-GetWindowFrameHeight(WND)+1,GetWindowName$(WND),15
+ VAR H=GetWindowFrameHeight(WND)
+ VAR W=GetWindowFrameWidth(WND)
+ VAR C=RGB(20,20,20)
+ GLINEWindow WND,W-08,-H+2,W-2,-2,C
+ GLINEWindow WND,W-7,-H+2,W-1,-2,C
+ GLINEWindow WND,W-2,-H+2,W-8,-2,C
+ GLINEWindow WND,W-1,-H+2,W-7,-2,C
  E=ReGBeginWindow(WND)
 ' E=GEndWindow(WND)
 END
@@ -1099,9 +1323,73 @@
 DEF ButtonPainter W,C,T,A1,A2
  VAR E=GBeginWindow(W)
  IF E THEN RETURN
- GFILLWindow W,0,0,GetWindowWidth(W),GetWindowHeight(W),RGB(128,128,128)
+ VAR HE=GetWindowHeight(W)
+ VAR WI=GetWindowWidth(W)
+ VAR NA$=GetWindowName$(W)
+ GFILLWindow W,0,0,WI,HE,RGB(192,192,192)
+ GBOXWindow W,0,0,WI,HE,RGB(0,0,0)
+ GPRINTWindow W,(WI-GetTextWidth(NA$))/2,(HE-6)/2,NA$,RGB(0,0,0)
  E=GEndWindow(W)
 END
+DEF ButtonLMouseUP W,C,T,X,Y
+ VAR E=SendNotificationWindow(GetParentWindow(W),W,GetWindowVar(W,0))
+END
+'PlainTextBox
+DEF TextBoxPainter W,C,T,A1,A2
+ VAR E=GBeginWindow(W)
+ IF E THEN RETURN
+ VAR HE=GetWindowHeight(W)
+ VAR WI=GetWindowWidth(W)
+ VAR NA$=GetWindowName$(W)
+ VAR CX=GetWindowVar(W,1)
+ GFILLWindow W,0,0,WI,HE,-1
+ GPRINTWindow W,1,1,NA$,RGB(0,0,0)
+ IF IsActiveWindow(W)THEN
+  GFILLWindow W,CX*8,6,CX*8+8,7,RGB(0,0,0)
+ ENDIF
+ GBOXWindow W,0,0,WI,HE,RGB(0,0,0)
+ E=GEndWindow(W)
+END
+DEF TextBoxLMouseDown W,C,T,X,Y
+END
+DEF TextBoxChFocus W,C,T,X,Y
+ TextBoxPainter W,C,T,0,0
+END
+DEF TextBoxKey W,C,T,KEY,A2
+ VAR K$=CHR$(KEY)
+ VAR CX=GetWindowVar(W,1)
+ VAR T$=GetWindowName$(W)
+ IF K$==BS$()THEN
+  IF CX THEN
+   SetWindowName W,RemoveStr$(T$,CX-1,1)
+   SetWindowVar W,1,CX-1
+  ENDIF
+ ELSE
+  SetWindowName W,InsertStr$(T$,CX,K$)
+  SetWindowVar W,1,CX+1
+ ENDIF
+ TextBoxPainter W,C,T,0,0
+END
+DEF TextBoxButton W,C,T,B,A2
+ VAR F=GetWindowVar(W,2)
+ VAR M=MAINCNT
+ IF M-F>10THEN
+  SetWindowVar W,2,M
+  VAR CX=GetWindowVar(W,1)
+  IF B AND 4&&CX THEN
+   SetWindowVar W,1,CX-1
+   TextBoxPainter W,C,T,0,0
+  ENDIF
+  IF B AND 8THEN
+   IF LEN(GetWindowName$(W))>CX THEN
+    SetWindowVar W,1,CX+1
+    TextBoxPainter W,C,T,0,0
+   ENDIF
+  ENDIF
+ ENDIF
+ 
+' BEEP
+END
 VAR OTW_MOUSESIZE
 DEF OTW_INITSP
  GPSET 408,0,-1
@@ -1134,13 +1422,21 @@
 VAR OTW_RMOUSEDWN
 VAR OTW_RMOUSEUP
 VAR OTW_CNT,OTW_FPS,OTW_FPSCNT
+VAR OTW_FCNT,OTW_FPF#,OTW_FPFCNT
+VAR OTW_KX
+VAR OTW_KY
+VAR OTW_KX2
+VAR OTW_KY2
+VAR OTW_USEBTN
 COMMON DEF I_OTW
  IF!OTW_INIT THEN
   OTWRunning=TRUE
+  OTW_USEBTN=&B11001111
   OTW_FPS=1
   OTW_FPSCNT=1
+  OTW_FPF#=1
+  OTW_FPFCNT=1
   'ACLS
-  XSCREEN 2,512,2
   OTW_DP=4
   OTW_SP=0
   OTW_BP=1
@@ -1156,15 +1452,17 @@
 GCLS 
   OTW_INITSP
   GPRIO 1023
-  'GOTO @_
+  GOTO @_
+  XSCREEN 2,512,2
   DISPLAY 1
+  CLS
   VISIBLE 1,0,1,0
   LOCATE 0,25
   ?":LEFT CLICK"
   ?":RIGHT CLICK(UNUSED)"
   ?"TOUCH:CURSOR
   BGSCREEN 0,25,15
-  BGSCALE 0,20/25,20/25'1
+  BGSCALE 0,19.5/25,19.5/25'1
   GCLS 'RGB(255,0,0)
   BACKCOLOR RGB(0,192,128)
   VAR X,Y,I
@@ -1176,6 +1474,19 @@
   I=I+7
   NEXT
   BGPAGE OTW_DP
+  VAR K$="KEYBOARD"
+  OTW_KX=39*8
+  OTW_KY=0
+  OTW_KX2=40*8
+  OTW_KY2=LEN(K$)*8
+  ATTR 1
+  FOR I=0TO LEN(K$)-1
+   COLOR 15,8
+   LOCATE 39,I
+   ?K$[I];
+  NEXT
+  COLOR 15,0
+  ATTR 0
   DISPLAY 0
   @_
   PrintConsole "====================="+LF$()
@@ -1229,7 +1540,7 @@
   SPVAR OTW_MOVWINSP,0,1
   CLS
   LOCATE 0,29
- NewProcess"WCLOCK","" OUT E,E,E
+ NewProcess"RUN","" OUT E,E,E
  ENDIF
 RETURN
 END
@@ -1252,6 +1563,7 @@
 VAR OTW_OLDLMOUSE
 VAR OTW_OLDRMOUSE
 VAR OTW_FDIFF
+VAR OTW_OLDBTN
 COMMON DEF L_OTW
  VAR MOVEMOUSE
  UpdateMouse
@@ -1264,11 +1576,16 @@
  ENDIF
  IF BTN THEN
   IF BTN AND OTW_LMOUSEDWN THEN
+   E=SendChFocusWindow(NUWIDToWND(WIN_ACTIVENUWID),FALSE)
+   WIN_ACTIVENUWID=NUWID
    IF NUWID AND WIN_FRAMEFLG THEN
     E=LMouseDownWindowOnFrame(NUWIDToWND(NUWID AND 32767))
+    
+    WIN_ACTIVENUWID=NUWID AND 32767
    ELSE
     E=LMouseDownWindow(NUWIDToWND(NUWID))
    ENDIF
+   E=SendChFocusWindow(NUWIDToWND(WIN_ACTIVENUWID),TRUE)
   ENDIF
   IF BTN AND OTW_LMOUSEUP THEN
    IF WIN_DRAGHANDLER_USE THEN
@@ -1286,10 +1603,26 @@
  IF BUTTON()AND 64THEN DUMP_WND
  OTW_OLDMOUSEX=OTW_MOUSEX
  OTW_OLDMOUSEY=OTW_MOUSEY
- VOID UpdateWindow(WIN_ROOTWND)
+ VAR K$=INKEY$()
+ IF LEN(K$)THEN
+  E=SendKeyWindow(NUWIDToWND(WIN_ACTIVENUWID),ASC(K$))
+ ENDIF
+ VOID UpdateWindowOnly(WIN_ROOTWND)
  VOID UpdateWindow(TSTWND2)
  VOID UpdateWindow(TSTWND)
  VOID UpdateWindow(TSTWND3)
+ OTW_FDIFF=MAINCNT-OTW_FCNT
+ IF OTW_FDIFF>1 THEN
+  OTW_FPF#=OTW_FPFCNT
+  IF!OTW_FPFCNT THEN
+   OTW_FPF#=1.0/OTW_FDIFF
+   IF OTW_FPF#<0.3THEN OTW_FPF#=0.333
+  ENDIF
+  OTW_FPFCNT=0
+  OTW_FCNT=MAINCNT
+ ELSE
+  INC OTW_FPFCNT
+ ENDIF
  OTW_FDIFF=MAINCNT-OTW_CNT
  IF OTW_FDIFF>60 THEN
   OTW_FPS=OTW_FPSCNT
@@ -1299,13 +1632,50 @@
  ELSE
   INC OTW_FPSCNT
  ENDIF
+ BTN=BUTTON()AND OTW_USEBTN
+ IF BTN THEN
+  IF MAINCNT-OTW_OLDBTN THEN
+   E=SendButtonWindow(NUWIDToWND(WIN_ACTIVENUWID),BTN)
+   OTW_OLDBTN=MAINCNT
+  ENDIF
+ ENDIF
 ' ExitProcess 1
 RETURN
 END
+VAR RUNCTL
+COMMON DEF I_RUN
+ IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
+  PrintConsole "Require OTW"+LF$()
+  ExitProcess 1
+  RETURN
+ ENDIF
+ VAR E
+ ExtendControl "RUN",GetWindowControl() OUT RUNCTL,E
+ VAR WND
+ NewTopLevelWindow RUNCTL,"RUN",64,32 OUT WND,E
+ E=SetControlNotificationHandler(RUNCTL,"RunNotificationHandler")
+ SetProcessVar WND
+ VAR TW
+ NewWindow GetButtonControl(),"RUN",0,10,32,10,WND,0OUT TW,E
+ NewWindow GetTextBoxControl(),"",0,0,64,8,WND,0OUT TW,E
+END
+COMMON DEF L_RUN
+ VAR E=UpdateWindow(GetProcessVar())
+END
 VAR WCLOCKWND
+VAR WCLOCKCTL
 VAR WCLOCKBC
 VAR WCLOCKBC2
 VAR WCLOCKTIM
+COMMON DEF GetChildWindow(WND)
+ IF!CheckWindow(WND)THEN RETURN 0
+ RETURN NUWIDToWND(WIN_CHILD[WND AND NUWIDMASK])
+END
+COMMON DEF RunNotificationHandler W,C,T,V,A2
+ VAR PID,NUPID,E
+ NewProcess GetWindowName$(GetChildWindow(GetParentWindow(V))),"" OUT PID,NUPID,E
+ IF E THEN BEEP
+END
 COMMON DEF I_WCLOCK
  IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
   PrintConsole "Require OTW"+LF$()
@@ -1313,22 +1683,35 @@
   RETURN
  ENDIF
  VAR E
-  NewTopLevelWindow GetWindowControl(),"CLOCK",64,64 OUT WCLOCKWND,E
+ ExtendControl "WCLOCK",GetWindowControl() OUT WCLOCKCTL,E
+ E=SetControlPainter(WCLOCKCTL,"WCLOCKPainter")
+ NewTopLevelWindow WCLOCKCTL,"CLOCK",64,64 OUT WCLOCKWND,E
  WCLOCKTIM=MAINCNT/60
  WCLOCKTIM=WCLOCKTIM*60
  'NewWindow GetButtonControl()
  NewWindow TSTCTL,"TEST",8,8,32,32,WCLOCKWND,0 OUT WCLOCKBC,E
- NewWindow TSTCTL,"TEST",16,16,32,32,WCLOCKWND,0 OUT WCLOCKBC2,E
+ NewWindow GetTextBoxControl(),"TEST",0,16,48,8,WCLOCKWND,0OUT WCLOCKBC2,E
+'NewWindow GetButtonControl(),"TEST",16,16,32,32,WCLOCKWND,0 OUT WCLOCKBC2,E
+ E=SetControlNotificationHandler(WCLOCKCTL,"WCLOCKNotif")
+ SetProcessVar WCLOCKWND
 END
+COMMON DEF WCLOCKNotif W,C,T,WND,V
+ BEEP 
+END
+COMMON DEF WCLOCKPainter W,C,T,A,B
+ VAR E=CallBaseControlHandler(W,C,T,A,B)
+ WCLOCK_RP
+END
 COMMON DEF L_WCLOCK
  VAR E
- E=UpdateWindow(WCLOCKBC)
+ WCLOCKWND=GetProcessVar()
+' E=UpdateWindow(WCLOCKBC)
  E=PeekWindowEvent(WCLOCKWND)
- IF E==RepaintControlEvent()THEN
-  WCLOCK_RP
-  E=UpdateWindow(WCLOCKWND)
-  RETURN
- ENDIF
+' IF E==RepaintControlEvent()THEN
+'  E=UpdateWindow(WCLOCKWND)
+'  WCLOCK_RP
+'  RETURN
+' ENDIF
  E=UpdateWindow(WCLOCKWND)
  IF E THEN RETURN
  IF MAINCNT-WCLOCKTIM>=60 THEN
@@ -1336,7 +1719,7 @@
   WCLOCKTIM=WCLOCKTIM*60
   WCLOCK_RP
  ENDIF
- E=UpdateWindow(WCLOCKBC2)
+' E=UpdateWindow(WCLOCKBC2)
  
 END
  DEF WCLOCK_RP
@@ -1402,7 +1785,7 @@
 COMMON DEF UpdateMouse
  VAR S,X,Y
  TOUCH OUT S,X,Y
- IF OTW_MOUSEOLDST AND S THEN
+ IF OTW_MOUSEOLDST&&S THEN
   OTW_MOUSEX=OTW_MOUSEX+X-OTW_MOUSEOLDX
   OTW_MOUSEY=OTW_MOUSEY+Y-OTW_MOUSEOLDY
    IF OTW_MOUSEX<OTW_MOUSECLIPX THEN OTW_MOUSEX=OTW_MOUSECLIPX
@@ -1412,6 +1795,17 @@
   SPOFS OTW_MOUSESP,OTW_MOUSEX,OTW_MOUSEY
    OTW_MOUSEX#=OTW_MOUSEX
    OTW_MOUSEY#=OTW_MOUSEY
+ ELSE
+  IF S&&X>=OTW_KX&&X<OTW_KX2&&Y>=OTW_KY&&Y<OTW_KY2 THEN
+   BEEP 
+   VAR K$
+   XSCREEN 0,512,2
+   VISIBLE 1,1,1,1
+   
+   OTW_SP=OTW_DP
+   GPAGE OTW_DP,OTW_DP
+   KEY 1,"
+  ENDIF
  ENDIF
  OTW_MOUSEOLDX=X
  OTW_MOUSEOLDY=Y
@@ -1420,13 +1814,14 @@
   VAR X#,Y#
   STICK OUT X#,Y#
   IF X#!=0 OR Y#!=0 THEN
-   OTW_MOUSEX#=OTW_MOUSEX#+X#*0.2'/2
-   OTW_MOUSEY#=OTW_MOUSEY#-Y#*0.2'/2
+   OTW_MOUSEX#=OTW_MOUSEX#+X#*(4/OTW_FPF#)'0.2'/2
+   OTW_MOUSEY#=OTW_MOUSEY#-Y#*(4/OTW_FPF#)'0.2'/2
    IF OTW_MOUSEX#<OTW_MOUSECLIPX THEN OTW_MOUSEX#=OTW_MOUSECLIPX
    IF OTW_MOUSEY#<OTW_MOUSECLIPY THEN OTW_MOUSEY#=OTW_MOUSECLIPY
    IF OTW_MOUSEX#>=OTW_MOUSECLIPX2 THEN OTW_MOUSEX#=OTW_MOUSECLIPX2-1
    IF OTW_MOUSEY#>=OTW_MOUSECLIPY2 THEN OTW_MOUSEY#=OTW_MOUSECLIPY2
-   SPOFS OTW_MOUSESP,OTW_MOUSEX#,OTW_MOUSEY#
+   SPANIM OTW_MOUSESP,"XY",-1,OTW_MOUSEX#,OTW_MOUSEY#
+'   SPOFS OTW_MOUSESP,OTW_MOUSEX#,OTW_MOUSEY#
    OTW_MOUSEX=OTW_MOUSEX#
    OTW_MOUSEY=OTW_MOUSEY#
   ENDIF
