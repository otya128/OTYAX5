OPTION STRICT
OPTION DEFINT
'=======================
' OTYA 3D WINDOW SYSTEM 
'=======================
'グローバルへんすうのていぎ
VAR OTW_INIT,OTW_MOUSESP,OTW_MOVWINSP
VAR OTW_MOUSEX
VAR OTW_MOUSEY
VAR OTW_MOUSEX#,OTW_MOUSEY#
VAR OTW_FNT1[0,0]'0x20~0x7F
VAR OTW_FNT2[0,0]'
VAR OTW_FNT3[0,0]'
VAR OTW_CONSOLEPAL[0]
'=======================
'        WINDOW         
'=======================
VAR WIN_MAX,WIN_MSGMAX
DIM WIN_NAME$  [0]
DIM WIN_WID    [0]
DIM WIN_X      [0]
DIM WIN_Y      [0]
DIM WIN_WIDTH  [0]
DIM WIN_HEIGHT [0]
DIM WIN_AX     [0]
DIM WIN_AY     [0]
DIM WIN_AW     [0]
DIM WIN_AH     [0]
DIM WIN_FX     [0]
DIM WIN_FY     [0]
DIM WIN_FWIDTH [0]
DIM WIN_FHEIGHT[0]
DIM WIN_CTL    [0]
DIM WIN_PID    [0]
DIM WIN_NUPID  [0]
DIM WIN_DATA#  [0]
DIM WIN_DATA%  [0]
DIM WIN_DATA$  [0]
DIM WIN_NEXT   [0]
DIM WIN_PREV   [0]
DIM WIN_CHILD  [0]
DIM WIN_PARENT [0]
DIM WIN_BEGIN  [0]
DIM WIN_SP     [0]
'QUEUE
DIM WIN_MSGS   [0]
DIM WIN_MSGE   [0]
DIM WIN_MSGBUF [0,0,0]
VAR WIN_FREE
VAR WIN_WIDCNT
VAR WIN_MSGARGSIZE
VAR WIDSHIFT
VAR NUWIDMASK
VAR WIN_FRAMEFLG
'DRAW PAGE
VAR OTW_DP
'SHOW PAGE
VAR OTW_SP
'BUFFER PAGE
VAR OTW_BP
VAR WIN_FWIDTH1
VAR WIN_FHEIGHT1
VAR WIN_FWIDTH2
VAR WIN_FHEIGHT2
'H1
'          
'
'          
'          
'          
'          
'          
'H2
'⇔⇔
'W1         W2
'
DEF OTW_WIN_INITARRAY
 VAR FM=FREEMEM
 WIN_FWIDTH1=0
 WIN_FHEIGHT1=10
 WIN_FWIDTH2=0
 WIN_FHEIGHT2=0
 WIN_MAX=256
 WIN_MSGMAX=64
 WIN_MSGARGSIZE=3
 WIDSHIFT=12
 NUWIDMASK=4095
 WIN_FRAMEFLG=32768
 WIN_NAME$     =NewArray$(WIN_MAX)
 WIN_WID       =NewArray(WIN_MAX)
 WIN_X         =NewArray(WIN_MAX)
 WIN_Y         =NewArray(WIN_MAX)
 WIN_WIDTH     =NewArray(WIN_MAX)
 WIN_HEIGHT    =NewArray(WIN_MAX)
 WIN_AX        =NewArray(WIN_MAX)
 WIN_AY        =NewArray(WIN_MAX)
 WIN_AW        =NewArray(WIN_MAX)
 WIN_AH        =NewArray(WIN_MAX)
 WIN_FX        =NewArray(WIN_MAX)
 WIN_FY        =NewArray(WIN_MAX)
 WIN_FWIDTH    =NewArray(WIN_MAX)
 WIN_FHEIGHT   =NewArray(WIN_MAX)
 WIN_CTL       =NewArray(WIN_MAX)
 WIN_PID       =NewArray(WIN_MAX)
 WIN_NUPID     =NewArray(WIN_MAX)
 WIN_DATA#     =NewArray#(WIN_MAX)
 WIN_DATA%     =NewArray%(WIN_MAX)
 WIN_DATA$     =NewArray$(WIN_MAX)
 WIN_NEXT      =NewArray(WIN_MAX)
 WIN_PREV      =NewArray(WIN_MAX)
 WIN_CHILD     =NewArray(WIN_MAX)
 WIN_PARENT    =NewArray(WIN_MAX)
 WIN_BEGIN     =NewArray(WIN_MAX)
 WIN_SP        =NewArray(WIN_MAX)
 WIN_MSGS      =NewArray(WIN_MAX)
 WIN_MSGE      =NewArray(WIN_MAX)
 WIN_MSGBUF    =NewArray3(WIN_MAX,WIN_MSGMAX,WIN_MSGARGSIZE)
 WIN_FREE=1
 OTW_INITLIST WIN_NEXT
END
'IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
'ExitProcess 1
'ENDIF
VAR OTWRunning
COMMON DEF IsWinRunning()
 RETURN OTWRunning
END
'=======================
'CONTROL
'=======================
VAR CTL_MAX
VAR CTL_HANDLER_MAX
DIM CTL_NAME$    [0]
DIM CTL_CID      [0]
DIM CTL_DAT      [0]
DIM CTL_FW1      [0]
DIM CTL_FH1      [0]
DIM CTL_FW2      [0]
DIM CTL_FH2      [0]
DIM CTL_NEXT     [0]
DIM CTL_PARENTCTL[0]
DIM CTL_HANDLER$ [0,0]
VAR CTL_FREE
VAR CTL_CIDCNT
VAR CTL_PAINTHANDLER
COMMON DEF RepaintControlEvent()
 RETURN CTL_PAINTHANDLER
END
VAR CTL_LBTNUPHANDLER
VAR CTL_LBTNDWNHANDLER
VAR CTL_RBTNUPHANDLER
VAR CTL_RBTNDWNHANDLER
VAR CTL_FRMBTNHANDLER
VAR CTL_DRWFRMHANDLER
VAR CTL_LBTNFLG
VAR CTL_RBTNFLG
VAR CTL_BTNDWNFLG
VAR CTL_BTNUPFLG
VAR CTL_WINDOWCTL
VAR CTL_BUTTONCTL
DEF OTW_CTL_INITARRAY
 CTL_MAX=64
 CTL_HANDLER_MAX=16
 CTL_NAME$     =NewArray$(CTL_MAX)
 CTL_DAT       =NewArray(CTL_MAX)
 CTL_FW1       =NewArray(CTL_MAX)
 CTL_FH1       =NewArray(CTL_MAX)
 CTL_FW2       =NewArray(CTL_MAX)
 CTL_FH2       =NewArray(CTL_MAX)
 CTL_CID       =NewArray(CTL_MAX)
 CTL_NEXT      =NewArray(CTL_MAX)
 CTL_PARENTCTL =NewArray(CTL_MAX)
 CTL_HANDLER$  =NewArray2$(CTL_MAX,CTL_HANDLER_MAX)
 CTL_FREE=1
 OTW_INITLIST CTL_NEXT
 VAR E
 NewControl "WINDOW" OUT CTL_WINDOWCTL,E
 NewControl "BUTTON" OUT CTL_BUTTONCTL,E
 CTL_PAINTHANDLER=0
 CTL_LBTNDWNHANDLER=1
 CTL_LBTNUPHANDLER=2
 CTL_RBTNUPHANDLER=3
 CTL_RBTNDWNHANDLER=4

 CTL_FRMBTNHANDLER=5
 'A1=,A2=bit16~31Y,Xbit0~15
 CTL_LBTNFLG=4
 CTL_RBTNFLG=8
 CTL_BTNDWNFLG=1
 CTL_BTNUPFLG=2
' CTL_DRWFRMHANDLER=3
 E=SetControlFrameSize(CTL_WINDOWCTL,WIN_FWIDTH1,WIN_FHEIGHT1,WIN_FWIDTH2,WIN_FHEIGHT2)
 E=SetControlPainter(CTL_WINDOWCTL,"WindowPainter")
 E=SetControlLMouseUpHandler(CTL_WINDOWCTL,"WindowLMouseUP")
 E=SetControlClickFrameHandler(CTL_WINDOWCTL,"WindowClickFrame")
 E=SetControlPainter(CTL_BUTTONCTL,"ButtonPainter")
 E=SetControlLMouseUpHandler(CTL_BUTTONCTL,"ButtonLMouseUP")
END
DEF OTW_INITLIST ARY[]
 VAR I
 FOR I=1TO LEN(ARY)-1
  ARY[I]=I+1
 NEXT
END
VAR WIN_NOALLOC
VAR WIN_INVALIDID
VAR WIN_EVENTERR
VAR CTL_NOALLOC
VAR CTL_INVALIDID
DEF OTW_INIT_ERR
 WIN_NOALLOC=1
 WIN_INVALIDID=2
 WIN_EVENTERR=3
 CTL_NOALLOC=201
 CTL_INVALIDID=202
END
COMMON DEF GetWindowControl()
 RETURN CTL_WINDOWCTL
END
COMMON DEF GetButtonControl()
 RETURN CTL_BUTTONCTL
END
'CONTROL
COMMON DEF NewControl NAME$ OUT CTL,ERR
 IF!CTL_FREE THEN
  ERR=CTL_NOALLOC
  CTL=0
  RETURN
 ENDIF
 INC CTL_CIDCNT
 ERR=0
 CTL=CIDNUCIDToCTL(CTL_FREE,CTL_CIDCNT)
 CTL_FREE=CTL_NEXT[CTL_FREE]
 CTL_CID[CTL AND 4095]=CTL_CIDCNT
 CTL_NEXT[CTL AND 4095]=0
END
COMMON DEF ExtendControl NAME$,PARENT OUT CTL,ERR
 IF!CheckControl(PARENT)THEN
  CTL=0
  ERR=CTL_INVALIDID
  RETURN
 ENDIF
 NewControl NAME$ OUT CTL,ERR
 IF ERR THEN RETURN
 VAR NUCID=CTL AND 4095
 CTL_PARENTCTL[NUCID]=PARENT
 VAR I,P=PARENT AND 4095
 FOR I=0TO CTL_HANDLER_MAX-1
  CTL_HANDLER$[NUCID,I]=CTL_HANDLER$[P,I]
 NEXT
 CTL_FW1[NUCID]=CTL_FW1[P]
 CTL_FH1[NUCID]=CTL_FH1[P]
 CTL_FW2[NUCID]=CTL_FW2[P]
 CTL_FH2[NUCID]=CTL_FH2[P]
END
COMMON DEF CheckControl(CTL)
 RETURN CTL_CID[CTL AND 4095]==CTL>>12
END
COMMON DEF DeleteControl(CTL)
 IF!CheckControl(CTL) THEN RETURN CTL_INVALIDID
 VAR NUCID=CTL AND 4095,CID=CTL>>12
 CTL_NEXT[NUCID]=CTL_FREE
 CTL_FREE=NUCID
 CTL_CID[NUCID]=0
 CTL_FW1[NUCID]=0
 CTL_FH1[NUCID]=0
 CTL_FW2[NUCID]=0
 CTL_FH2[NUCID]=0
 CTL_DAT[NUCID]=0
 CTL_NAME$[NUCID]=""
 VAR I
 FOR I=0TO CTL_HANDLER_MAX-1
  CTL_HANDLER$[I]=""
 NEXT
END
COMMON DEF IsControlExtend(CTL,PARENT)
 VAR N=CTL AND 4095
 VAR P=PARENT AND 4095
 WHILE N
  IF N==P THEN RETURN 1
  N=CTL_PARENTCTL[N]AND 4095
 WEND
 RETURN 0
END
COMMON DEF SetControlPainter(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_PAINTHANDLER]=HANDLER$
 RETURN 0
END
COMMON DEF SetControlLMouseUpHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_LBTNUPHANDLER]=HANDLER$
 RETURN 0
END
DEF SetControlClickFrameHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_FRMBTNHANDLER]=HANDLER$
 RETURN 0
END
DEF SetControlFrameSize(CTL,W1,H1,W2,H2)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 VAR C=CTL AND 4095
 CTL_FW1[C]=W1
 CTL_FH1[C]=H1
 CTL_FW2[C]=W2
 CTL_FH2[C]=H2
 RETURN 0
END
DEF CIDNUCIDToCTL(CID,NUCID)
 RETURN CID<<12OR NUCID
END
'WINDOW
DEF WIDNUWIDToWND(WID,NUWID)
 RETURN WID<<12OR NUWID
END
DEF NUWIDToWND(NUWID)
 RETURN WIN_WID[NUWID]<<12OR NUWID
END
VAR WIN_ROOTWND
COMMON DEF GetRootWND()
 RETURN WIN_ROOTWND
END
COMMON DEF CheckWindow(WND)
 RETURN WIN_WID[WND AND NUWIDMASK]==WND>>WIDSHIFT
END
VAR WIN_TopLevelX
VAR WIN_TopLevelY
VAR OTW_TOPLEVELCNT
COMMON DEF WindowBackFlag()
 RETURN 1
END
COMMON DEF WindowFrontFlag()
 RETURN 2
END
COMMON DEF NewWindow CTL,NAME$,X,Y,WIDTH,HEIGHT,PARENT,FLG OUT WND,ERR
  IF!CheckControl(CTL)THEN
  WND=0
  ERR=CTL_INVALIDID
  RETURN
 ENDIF
 IF!WIN_FREE THEN
  WND=0
  ERR=WIN_NOALLOC
  RETURN
 ENDIF
 VAR NC=CTL AND 4095
 ERR=0
 INC WIN_WIDCNT
 VAR NUWID,WID
 VAR PNUWID=PARENT AND NUWIDMASK
 NUWID=WIN_FREE
 WIN_FREE=WIN_NEXT[WIN_FREE]
 WID=WIN_WIDCNT
 WND=WIDNUWIDToWND(WID,NUWID)
 WIN_WID[NUWID]=WID
 WIN_CTL[NUWID]=CTL
 WIN_NAME$[NUWID]=NAME$
 '
 WIN_X[NUWID]=X
 WIN_Y[NUWID]=Y
 
 WIN_AX[NUWID]=WIN_AX[PNUWID]+X
 WIN_AY[NUWID]=WIN_AX[PNUWID]+Y '
 WIN_FX[NUWID]=WIN_AX[NUWID]+CTL_FW1[NC]
 WIN_FY[NUWID]=WIN_AX[NUWID]+CTL_FH1[NC]
 WIN_WIDTH[NUWID]=WIDTH
 WIN_HEIGHT[NUWID]=HEIGHT
 WIN_FWIDTH[NUWID]=WIDTH+CTL_FW2[NC]
 WIN_FHEIGHT[NUWID]=HEIGHT+CTL_FH2[NC]
 WIN_AW[NUWID]=WIDTH
 WIN_AH[NUWID]=HEIGHT
 VAR E1=WIN_AX[NUWID]+WIDTH
 VAR E2=WIN_AX[PNUWID]+WIN_AW[PNUWID]
 IF E1>E2 THEN
  DEC WIN_AW[NUWID],E1-E2
 ENDIF
 E1=WIN_AY[NUWID]+HEIGHT
 E2=WIN_AY[PNUWID]+WIN_AH[PNUWID]
 IF E1>E2 THEN
  DEC WIN_AH[NUWID],E1-E2
 ENDIF
 WIN_NEXT[NUWID]=0
 WIN_PARENT[NUWID]=PARENT AND NUWIDMASK
 IF PNUWID THEN 
  IF FLG AND WindowFrontFlag()THEN
   IF WIN_CHILD[PNUWID]THEN
    VAR N
    WHILE 1
     IF!WIN_NEXT[N]THEN
      WIN_NEXT[N]=NUWID
      WIN_PREV[NUWID]=N
      BREAK
     ENDIF
     N=WIN_NEXT[N]
    WEND
   ELSE
    WIN_CHILD[PNUWID]=N
   ENDIF
  ELSE
   N=WIN_CHILD[PNUWID]
   WIN_CHILD[PNUWID]=NUWID
   IF N THEN
    WIN_NEXT[NUWID]=N
    WIN_PREV[N]=NUWID
   ENDIF
  ENDIF
 ENDIF
 VOID RepaintWindow(WND)
 OTW_DrawMap NUWID
END
COMMON DEF NewTopLevelWindow CTL,NAME$,WIDTH,HEIGHT OUT WND,ERR
 IF!CheckControl(CTL)THEN
  WND=0
  ERR=CTL_INVALIDID
  RETURN
 ENDIF
 IF!WIN_FREE THEN
  WND=0
  ERR=WIN_NOALLOC
  RETURN
 ENDIF
 ERR=0
 INC OTW_TOPLEVELCNT
 INC WIN_WIDCNT
 VAR NUWID,WID
 NUWID=WIN_FREE
 WIN_FREE=WIN_NEXT[WIN_FREE]
 WID=WIN_WIDCNT
 WND=WIDNUWIDToWND(WID,NUWID)
 WIN_WID[NUWID]=WID
 WIN_CTL[NUWID]=CTL
 WIN_NAME$[NUWID]=NAME$
 '
 WIN_X[NUWID]=0
 WIN_Y[NUWID]=0
 
 WIN_AX[NUWID]=0
 WIN_AY[NUWID]=0
 WIN_AX[NUWID]=WIN_TopLevelX
 WIN_AY[NUWID]=WIN_TOPLEVELY
 '
 WIN_WIDTH[NUWID]=WIDTH
 WIN_HEIGHT[NUWID]=HEIGHT
 WIN_FWIDTH[NUWID]=WIDTH
 WIN_FHEIGHT[NUWID]=HEIGHT
 WIN_NEXT[NUWID]=0
 GCLIP 1,0,240,400,480
 VOID RepaintWindow(WND)
 IF!WIN_ROOTWND THEN
  GFILL WIN_AX[NUWID],WIN_AY[NUWID]+240,WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID]+240,ShortToRGB(NUWID)
  GCLIP 1,0,0,400,240
  WIN_AW[NUWID]=WIDTH
  WIN_AH[NUWID]=HEIGHT
' SPSET SP,WIN_AX[NUWID],WIN_AY[NUWID],WIN_WIDTH[NUWID],WIN_HEIGHT[NUWID],1
' SPSHOW SP
' SPOFS SP,WIN_AX[NUWID],WIN_AY[NUWID],1023
  RETURN
 ENDIF
 
 VAR SP=OTW_TOPLEVELCNT+1,FRAME
' IF SPVAR(SP,0)THEN
  WHILE SPVAR(SP,0)
   SP=(SP+1)MOD 255
  WEND
  FRAME=SP+1
  WHILE SPVAR(FRAME,0)
   FRAME=(FRAME+1)MOD 255
  WEND
' ENDIF
 WIN_SP[NUWID]=SP OR FRAME<<10
 VAR ROOTNUWID=WIN_ROOTWND AND NUWIDMASK
 VAR C=WIN_CHILD[ROOTNUWID],N
 WIN_PARENT[NUWID]=ROOTNUWID
 IF!C THEN
  WIN_CHILD[ROOTNUWID]=NUWID
 ELSE
  N=C
  WHILE 1
   C=N
   N=WIN_NEXT[N]
   IF!N THEN
    WIN_NEXT[C]=NUWID
    WIN_PREV[NUWID]=C
    BREAK
   ENDIF
  WEND
 ENDIF
 WIN_TopLevelX=WIN_TopLevelX+8
 WIN_TopLevelY=WIN_TopLevelY+8
 WIN_TopLevelX=WIN_TopLevelX+8
 WIN_TopLevelY=WIN_TopLevelY+8
 WIN_FX[NUWID]=WIN_TopLevelX
 WIN_FY[NUWID]=WIN_TOPLEVELY
 WIN_AX[NUWID]=WIN_TopLevelX
 WIN_AY[NUWID]=WIN_TOPLEVELY-WIN_FHEIGHT1
 
' WIN_WIDTH[NUWID]=WIDTH+WIN_FWIDTH+
' WIN_HEIGHT[NUWID]=HEIGHT
 
 WIN_HEIGHT[NUWID]=WIN_HEIGHT[NUWID]+WIN_FHEIGHT1
 WIN_AW[NUWID]=WIN_WIDTH[NUWID]
 WIN_AH[NUWID]=WIN_HEIGHT[NUWID]
 OTW_DrawMap NUWID
 GCLIP 1,0,0,400,240
' GFILL WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],RGB(255,255,255)
 SPSET SP,WIN_AX[NUWID],WIN_AY[NUWID],WIN_WIDTH[NUWID]+1,WIN_HEIGHT[NUWID]+1,1
 SPOFS SP,WIN_AX[NUWID],WIN_AY[NUWID],0
 SPSHOW SP
'SPSET FRAME,0
 SPSCALE FRAME,WIN_WIDTH[NUWID]+3,WIN_HEIGHT[NUWID]+11
 SPOFS FRAME,WIN_AX[NUWID]-1,WIN_AY[NUWID]-9,0
 SPVAR SP,0,WND
 SPVAR FRAME,0,WND
 SPCOLOR FRAME,RGB(128,0,0,255)
 SPCOL FRAME,0,0,WIN_WIDTH[NUWID]+3,WIN_HEIGHT[NUWID]+11
 OTW_SPSORT
END
DEF OTW_SPSORT
 VAR I,Z=0
 IF OTW_TOPLEVELCNT-1THEN Z=(1022+255)/(OTW_TOPLEVELCNT-1)
 VAR NUWID=WIN_CHILD[WIN_ROOTWND AND NUWIDMASK]
'IF!WIN_NEXT[NUWID]THEN I=
 I=1022+255
 WHILE NUWID
  I=I-Z
  SPOFS WIN_SP[NUWID]AND 1023,,,-255+I
'  SPOFS (WIN_SP[NUWID]>>10),,,-255+I+1
  NUWID=WIN_NEXT[NUWID]
 WEND
END
DEF OTW_DrawMap NUWID
 GPAGE OTW_SP,OTW_DP
 GCLIP 1,0,240,400,480
 GFILL WIN_AX[NUWID],WIN_AY[NUWID]+240,WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID]+240,ShortToRGB(WIN_FRAMEFLG OR NUWID)
 GFILL WIN_FX[NUWID],WIN_FY[NUWID]+240,WIN_FX[NUWID]+WIN_FWIDTH[NUWID],WIN_FY[NUWID]+WIN_FHEIGHT[NUWID]+240,ShortToRGB(NUWID)
 GCLIP 1,0,0,400,240
END
COMMON DEF FrontWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF!WIN_NEXT[NUWID]THEN RETURN 0
 VAR N,C=WIN_NEXT[NUWID]
  N=C
  WHILE 1
   C=N
   N=WIN_NEXT[N]
   IF!N THEN
    VAR NUP=WIN_PREV[NUWID]
    VAR NUN=WIN_NEXT[NUWID]
    IF NUP THEN
     WIN_NEXT[NUP]=NUN
     WIN_PREV[NUN]=NUP
    ELSE
     WIN_CHILD[WIN_PARENT[NUWID]]=NUN
    ENDIF
    IF NUN THEN
     IF NUP THEN WIN_NEXT[NUP]=NUN
     WIN_PREV[NUN]=NUP
    ENDIF
    WIN_NEXT[C]=NUWID
    WIN_PREV[NUWID]=C
    WIN_NEXT[NUWID]=0
    IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK) THEN
     VAR Z,Z2,S
     SPOFS WIN_SP[NUWID]AND 1023OUT S,S,Z
     SPOFS WIN_SP[C]AND 1023OUT S,S,Z2
     SPOFS WIN_SP[NUWID]AND 1023,,,Z2
     SPOFS WIN_SP[C]AND 1023,,,Z
     SPOFS WIN_SP[NUWID]>>10,,,Z2+1'1
     SPOFS WIN_SP[C]>>10,,,Z+1'1
    ENDIF
    BREAK
   ENDIF
  WEND
 VOID RepaintWindow(WND)
 OTW_DrawMap NUWID
 RETURN 0
END
COMMON DEF MoveWindow(WND,X,Y)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 IF!X&&!Y THEN RETURN
 VAR NUWID=WND AND NUWIDMASK
 VAR MX=X-WIN_AX[NUWID],MY=Y-WIN_AY[NUWID]
 VAR NXT=WIN_CHILD[NUWID],B=NXT
 GFILL WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],0
 WIN_AX[NUWID]=WIN_AX[NUWID]+MX
 WIN_AY[NUWID]=WIN_AY[NUWID]+MY
 WIN_FX[NUWID]=WIN_FX[NUWID]+MX
 WIN_FY[NUWID]=WIN_FY[NUWID]+MY
 VAR E=FrontWindow(WND)
 IF E THEN RETURN E
 'WHILE 1
' 
'WEND
 NXT=WIN_CHILD[WIN_PARENT[NUWID]]
 IF!NXT THEN RETURN'WIN_
 B=NXT
 IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK) THEN
  IF WIN_SP[NUWID]THEN
   SPCHR WIN_SP[NUWID] AND 1023,WIN_AX[NUWID],WIN_AY[NUWID],WIN_WIDTH[NUWID]+1,WIN_HEIGHT[NUWID]+1,1
   SPOFS WIN_SP[NUWID] AND 1023,WIN_AX[NUWID],WIN_AY[NUWID]
  ENDIF
 ENDIF
 OTW_DrawMap WIN_PARENT[NUWID]
 WHILE NXT
  VOID RepaintWindow(NXT OR(WIN_WID[NXT]<<WIDSHIFT))
  OTW_DrawMap NXT
  NXT=WIN_NEXT[NXT]
 WEND
 
 NXT=WIN_CHILD[NUWID]:B=NXT
 VAR PAX2=WIN_X[NUWID]+WIN_AW[NUWID]
 VAR PAY2=WIN_Y[NUWID]+WIN_AH[NUWID]
 WHILE B
  VAR S=WIN_WIDTH[B]-WIN_AW[B]
  
  WIN_AX[B]=WIN_AX[B]+MX
  WIN_AY[B]=WIN_AY[B]+MY
  WIN_FX[B]=WIN_FX[B]+MX
  WIN_FY[B]=WIN_FY[B]+MY
  VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
  OTW_DrawMap B
  IF!WIN_NEXT[B]THEN
   WHILE B
    B=WIN_PARENT[B]
    IF B==NUWID THEN BREAK
    IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
   WEND
   IF B==NUWID THEN BREAK
  ENDIF
  B=WIN_NEXT[B]
  IF B==NUWID THEN BREAK
 WEND

 RETURN 0
END
COMMON DEF SendWindowEvent(WND,TYPE,A1,A2)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF(WIN_MSGS[NUWID]+1)MOD WIN_MSGMAX==WIN_MSGE[NUWID] THEN RETURN WIN_EVENTERR
 IF!LEN(CTL_HANDLER$[WIN_CTL[NUWID]AND 4095,TYPE])THEN RETURN 0
 WIN_MSGBUF[NUWID,WIN_MSGS[NUWID],0]=TYPE
 WIN_MSGBUF[NUWID,WIN_MSGS[NUWID],1]=A1
 WIN_MSGBUF[NUWID,WIN_MSGS[NUWID],2]=A2
 INC WIN_MSGS[NUWID]
 IF WIN_MSGS[NUWID]>=WIN_MSGMAX THEN WIN_MSGS[NUWID]=0
 RETURN 0
END
COMMON DEF RepaintWindow(WND)
 RETURN SendWindowEvent(WND,CTL_PAINTHANDLER,0,0)
END
DEF LMouseUpWindow(WND)
 RETURN SendWindowEvent(WND,CTL_LBTNUPHANDLER,OTW_MOUSEX,OTW_MOUSEY)
END
DEF LMouseDownWindow(WND)
 RETURN SendWindowEvent(WND,CTL_LBTNDWNHANDLER,OTW_MOUSEX,OTW_MOUSEY)
END
DEF LMouseDownWindowOnFrame(WND)
 RETURN SendWindowEvent(WND,CTL_FRMBTNHANDLER,CTL_LBTNFLG OR CTL_BTNDWNFLG,JoinInt(OTW_MOUSEX,OTW_MOUSEY))
END
DEF LMouseUpWindowOnFrame(WND)
 RETURN SendWindowEvent(WND,CTL_FRMBTNHANDLER,CTL_LBTNFLG OR CTL_BTNUPFLG,JoinInt(OTW_MOUSEX,OTW_MOUSEY))
END
COMMON DEF CallBaseControlHandler(WND,CTL,TYPE,A1,A2)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL=CTL_PARENTCTL[CTL AND 4095]
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID 
 CALL CTL_HANDLER$[CTL AND 4095,TYPE],WND,CTL,TYPE,A1,A2
 RETURN 0
END
COMMON DEF PeekWindowEvent(WND)
 IF!CheckWindow(WND)THEN RETURN -1
 VAR NUWID=WND AND NUWIDMASK
 IF WIN_MSGS[NUWID]==WIN_MSGE[NUWID]THEN RETURN -1
 RETURN WIN_MSGBUF[NUWID,WIN_MSGE[NUWID],0]
END
COMMON DEF UpdateWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF WIN_MSGS[NUWID]==WIN_MSGE[NUWID]THEN RETURN 0
 VAR NUCID=WIN_CTL[NUWID] AND 4095
 VAR S=WIN_MSGE[NUWID]
 VAR TYPE=WIN_MSGBUF[NUWID,S,0]
 CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],WIN_MSGBUF[NUWID,S,2]
 INC WIN_MSGE[NUWID]
 IF WIN_MSGE[NUWID]>=WIN_MSGMAX THEN WIN_MSGE[NUWID]=0
 IF WIN_BEGIN[NUWID]THEN VOID GEndWindow(WND)
 RETURN 0
END

DEF GetWindowFrameWidth(WND)
 RETURN WIN_WIDTH[WND AND NUWIDMASK]
END
DEF GetWindowFrameHeight(WND)
 RETURN WIN_FHEIGHT1
END
common def GetWindowName$(wnd)
 return win_name$[wnd and nuwidmask]
end
COMMON DEF GetWindowWidth(WND)
 IF!CheckWindow(WND)THEN RETURN -1
 RETURN WIN_FWIDTH[WND AND NUWIDMASK]
END
COMMON DEF GetWindowHeight(WND)
 IF!CheckWindow(WND)THEN RETURN -1
 RETURN WIN_FHEIGHT[WND AND NUWIDMASK]
END
VAR WIN_DRAGHANDLER$
VAR WIN_DRAGHANDLER_A1
VAR WIN_DRAGHANDLER_A2
VAR WIN_DRAGHANDLER_USE
VAR WIN_DRAGHANDLER_WND
VAR WIN_DRG_USE
VAR WIN_DRG_NUSE
DEF SetWindowDragHandler(NAME$,WND,A1,A2)
 IF WIN_DRAGHANDLER_USE&&CheckWindow(WIN_DRAGHANDLER_WND)THEN
  RETURN WIN_DRG_USE
 ENDIF
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 WIN_DRAGHANDLER_USE=TRUE
 WIN_DRAGHANDLER$=NAME$
 WIN_DRAGHANDLER_A1=A1
 WIN_DRAGHANDLER_A2=A2
 WIN_DRAGHANDLER_WND=WND
 RETURN 0
END
DEF ClearWindowDragHandler()
 IF!WIN_DRAGHANDLER_USE THEN RETURN WIN_DRG_NUSE
 WIN_DRAGHANDLER_USE=FALSE
 WIN_DRAGHANDLER$=""
 WIN_DRAGHANDLER_A1=0
 WIN_DRAGHANDLER_A2=0
 WIN_DRAGHANDLER_WND=0
 RETURN 0
END
''WINDOW GRAPHIC
COMMON DEF GBeginWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF WIN_BEGIN[NUWID]==1THEN RETURN WIN_EVENTERR
 WIN_BEGIN[NUWID]=TRUE
 VAR AX=WIN_FX[NUWID]
 VAR AY=WIN_FY[NUWID]
 VAR W=WIN_AW[NUWID]
 VAR H=WIN_AH[NUWID]
 GPAGE OTW_SP,OTW_BP
 GCLIP 1,AX,AY,AX+W,AY+H
 GCLS
 RETURN 0
END
DEF ReGBeginWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 INC WIN_BEGIN[NUWID]
 VAR AX=WIN_FX[NUWID]
 VAR AY=WIN_FY[NUWID]
 VAR W=WIN_AW[NUWID]
 VAR H=WIN_AH[NUWID]
 GPAGE OTW_SP,OTW_BP
 GCLIP 1,AX,AY,AX+W,AY+H
 RETURN 0
END
DEF GBeginFrameWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF WIN_BEGIN[NUWID]THEN RETURN WIN_EVENTERR
 WIN_BEGIN[NUWID]=TRUE
 VAR AX=WIN_AX[NUWID]
 VAR AY=WIN_AY[NUWID]
 VAR W=WIN_WIDTH[NUWID]
 VAR H=WIN_HEIGHT[NUWID]
 GPAGE OTW_SP,OTW_BP
 GCLIP 1,AX,AY,AX+W,AY+H
 GCLS
 RETURN 0
END
COMMON DEF GEndWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF!WIN_BEGIN[NUWID]THEN RETURN WIN_EVENTERR
 'ごうせい
 WIN_PARENT[0]=0
 WIN_NEXT[0]=0
 WIN_BEGIN[NUWID]=FALSE
 VAR AX=WIN_AX[NUWID]
 VAR AY=WIN_AY[NUWID]
 VAR W=WIN_AW[NUWID]
 VAR H=WIN_AH[NUWID]
 GCLIP 1,AX,AY,AX+W,AY+H
 VAR PNUWID
 IF WIN_CHILD[NUWID]THEN
  PNUWID=WIN_CHILD[NUWID]
  WHILE PNUWID
   GCOPY OTW_DP,WIN_AX[PNUWID],WIN_AY[PNUWID],WIN_AX[PNUWID]+WIN_WIDTH[PNUWID],WIN_AY[PNUWID]+WIN_HEIGHT[PNUWID],WIN_AX[PNUWID],WIN_AY[PNUWID],0

'GCOPY OTW_DP,WIN_AX[PNUWID]+AX,WIN_AY[PNUWID]+AY,WIN_AX[PNUWID]+WIN_WIDTH[PNUWID],WIN_AY[PNUWID]+WIN_HEIGHT[PNUWID],WIN_AX[PNUWID]-AX,WIN_AY[PNUWID]-AY,0
'   GCOPY OTW_DP,WIN_AX[PNUWID]+AX,WIN_AY[PNUWID]+AY,WIN_AX[PNUWID]+WIN_WIDTH[PNUWID],WIN_AY[PNUWID]+WIN_HEIGHT[PNUWID],0,0,0  
   PNUWID=WIN_NEXT[PNUWID]
  WEND
 ENDIF
 VAR _NUWID=NUWID
 PNUWID=WIN_NEXT[NUWID]
 WHILE TRUE
  IF!PNUWID THEN
   PNUWID=WIN_PARENT[_NUWID]
   IF!PNUWID THEN BREAK
   _NUWID=PNUWID
   PNUWID=WIN_NEXT[PNUWID]
   CONTINUE
  ENDIF
'  ?WIN_AY[PNUWID],WIN_AX[PNUWID]+AX,WIN_AY[PNUWID]+AY,WIN_AX[PNUWID]+WIN_WIDTH[PNUWID]-AX,WIN_AY[PNUWID]+WIN_HEIGHT[PNUWID]-AY
'  
' IF WIN_AX[PNUWID]THEN
'   GCOPY OTW_DP,WIN_AX[PNUWID],WIN_AY[PNUWID],WIN_AX[PNUWID]+WIN_WIDTH[PNUWID],WIN_AY[PNUWID]+WIN_HEIGHT[PNUWID],-WIN_AX[PNUWID]-WIN_WIDTH[PNUWID],-WIN_AY[PNUWID]-WIN_HEIGHT[PNUWID],0
' ELSE
'  GCOPY OTW_DP,WIN_AX[PNUWID]+AX,WIN_AY[PNUWID]+AY,WIN_AX[PNUWID]+WIN_WIDTH[PNUWID],WIN_AY[PNUWID]+WIN_HEIGHT[PNUWID],0,0,0
' ENDIF
   GCOPY OTW_DP,WIN_AX[PNUWID],WIN_AY[PNUWID],WIN_AX[PNUWID]+WIN_WIDTH[PNUWID],WIN_AY[PNUWID]+WIN_HEIGHT[PNUWID],WIN_AX[PNUWID],WIN_AY[PNUWID],0
  _NUWID=PNUWID
  PNUWID=WIN_NEXT[PNUWID]
 WEND
 GPAGE OTW_SP,OTW_DP
'?AX,AY,W,H
' GCOPY OTW_BP,0,0,W,H,AX,AY,0
 GCLIP 1,0,0,400,240
 GCOPY OTW_BP,AX,AY,AX+W,AY+H,AX,AY,0
'DIALOG"A
 RETURN 0
END
COMMON DEF GPSETWindow WND,X,Y,COL
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 GPSET X+AX,Y+AY,COL
END
COMMON DEF GFILLWindow WND,X,Y,X2,Y2,COL
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 GFILL X+AX,Y+AY,X2+AX,Y2+AY,COL
END
COMMON DEF GBOXWindow WND,X,Y,X2,Y2,COL
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 GBOX X+AX,Y+AY,X2+AX,Y2+AY,COL
END
COMMON DEF GPRINTWindowCC WND,X,Y,STR$,PAL
 GPRINTWindow WND,X,Y,STR$,OTW_CONSOLEPAL[PAL]
END
COMMON DEF GPRINTWindow WND,X,Y,STR$,COL
 IF!(COL AND&HFF000000)THEN RETURN
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 X=X+AX:Y=Y+AY
 VAR L=LEN(STR$)-1,C$,A,BX,BY,I,PP=16*COL
 FOR I=0TO L
  C$=MID$(STR$,I,1)
  A=ASC(C$)
  IF A<=&H7F&&A>=&H20THEN
   A=A-&H20
'   BX=A*8
'   BY=BX/(512-8)+PP
'   GCOPY 5,BX,BY,BX+7,BY+7,X,Y,0
   VAR F=OTW_FNT1[A,1],B=1'&H80000000
'  ?BIN$(F)
   FOR BY=Y+7 TO Y+4 STEP -1
    FOR BX=X+7 TO X STEP -1
     IF F AND B THEN GPSET BX,BY,COL
     B=B<<1
    NEXT
   NEXT
   F=OTW_FNT1[A,0]:B=1
   FOR BY=Y+3 TO Y STEP -1
    FOR BX=X+7 TO X STEP -1
     IF F AND B THEN GPSET BX,BY,COL
     B=B<<1
    NEXT
   NEXT
  ELSE
   GFILL X,Y,X+6,Y+6,-1
  ENDIF
  X=X+8
 NEXT
END
DEF DesktopPainter WND,CTL,TYPE,A1,A2
RETURN
 VAR E=GBEGINWindow(WND)
 IF E THEN RETURN
 GFILLWindow WND,0,0,32,32,RGB(255,0,0)
 E=GENDWindow(WND)
END
DEF WindowPainter WND,CTL,TYPE,A1,A2
 VAR E=GBeginFrameWindow(WND)
 IF E THEN RETURN
 GFILLWindow WND,0,-GetWindowFrameHeight(WND),GetWindowFrameWidth(WND),-1,RGB(0,0,255)
 GPRINTWindowCC WND,0,-GetWindowFrameHeight(WND),GetWindowName$(WND),15
 E=ReGBeginWindow(WND)
' E=GEndWindow(WND)
END
DEF WindowLMouseUP WND,CTL,TYPE,A1,A2
 VAR E=FrontWindow(WND)
END
DEF WindowClickFrame WND,CTL,TYPE,BTN,POS
 VAR X,Y
 SplitInt POS OUT X,Y
 IF BTN AND CTL_LBTNFLG THEN
  VAR NUWID=WND AND NUWIDMASK
  IF BTN AND CTL_BTNDWNFLG THEN
   VAR AX=WIN_AX[NUWID]
   VAR AY=WIN_AY[NUWID]
   IF SetWindowDragHandler("WindowDragFrame",WND,AX-X,AY-Y)THEN RETURN
   SPSHOW OTW_MOVWINSP
   SPSCALE OTW_MOVWINSP,WIN_WIDTH[NUWID]+1,WIN_HEIGHT[NUWID]+1
   SPCOLOR OTW_MOVWINSP,RGB(128,80,208,255)
   SPOFS OTW_MOVWINSP,AX-X,AY-Y,-256
   SPLINK OTW_MOVWINSP,OTW_MOUSESP
   SPVAR OTW_MOVWINSP,1,NUWID
   SPVAR OTW_MOVWINSP,2,AX-X
   SPVAR OTW_MOVWINSP,3,AY-Y
  ENDIF
 ENDIF
END
DEF WindowDragFrame WND,MX,MY,A1X,A2Y
 'VAR NUWID=WND AND NUWIDMASK
 VAR X=MX+A1X
 VAR Y=MY+A2Y
 VAR E=MoveWindow(WND,X,Y)
 SPHIDE OTW_MOVWINSP
 SPUNLINK OTW_MOVWINSP
END
DEF ButtonPainter W,C,T,A1,A2
 VAR E=GBeginWindow(W)
 IF E THEN RETURN
 GFILLWindow W,0,0,GetWindowWidth(W),GetWindowHeight(W),RGB(128,128,128)
 E=GEndWindow(W)
END
VAR OTW_MOUSESIZE
DEF OTW_INITSP
 GPSET 408,0,-1
 SPDEF 0,408,0,1,1,1
 VAR FORE=RGB(0,0,0)
 VAR BACK=RGB(255,255,255)
 GCOLOR FORE
 VAR SC#=1,B=416
 GFILL B,0,B+10*SC#,18*SC#,0
 GLINE B,0*SC#,B,14*SC#
 GLINE B,0*SC#,B+10*SC#,10*SC#
 GLINE B,14*SC#,B+3*SC#,11*SC#
 GLINE B+6*SC#,16*SC#,B+3*SC#,11*SC#
 GLINE B+10*SC#,10*SC#,B+6*SC#,10*SC#
'GLINE B+6*SC#,10*SC#,B+8*SC#,15*SC#
 GLINE B+6*SC#,10*SC#,B+8*SC#,15*SC#
 GLINE B+6*SC#,16*SC#,B+7*SC#,16*SC#'7,16
 GPAINT B+1*SC#,2*SC#,BACK,FORE
 SPDEF 290,B,0,10*SC#,17*SC#
END
VAR WIN_ROOTCTL
VAR TSTWND,TSTCTL
VAR TSTWND2
VAR TSTWND3

VAR OTW_MOUSELBTN
VAR OTW_MOUSERBTN
VAR OTW_LMOUSEDWN
VAR OTW_LMOUSEUP
VAR OTW_RMOUSEDWN
VAR OTW_RMOUSEUP
VAR OTW_CNT,OTW_FPS,OTW_FPSCNT
COMMON DEF I_OTW
 IF!OTW_INIT THEN
  OTWRunning=TRUE
  OTW_FPS=1
  'ACLS
  XSCREEN 2,512,2
  OTW_DP=4
  OTW_SP=0
  OTW_BP=1
  GPAGE OTW_SP,OTW_SP
  GPRIO 1023
  GCLS
  GCLS RGB(0,192,0)
  GPAGE OTW_SP,OTW_DP
  GPRIO 1023
  GCLS RGB(0,192,128)
' GCLS RGB(0,0,255)
GCLS 
  OTW_INITSP
  GPRIO 1023
  'GOTO @_
  DISPLAY 1
  VISIBLE 1,0,1,0
  LOCATE 0,25
  ?":LEFT CLICK"
  ?":RIGHT CLICK(UNUSED)"
  ?"TOUCH:CURSOR
  BGSCREEN 0,25,15
  BGSCALE 0,20/25,20/25'1
  GCLS 'RGB(255,0,0)
  BACKCOLOR RGB(0,192,128)
  VAR X,Y,I
  FOR Y=0TO 14
   FOR X=0TO 24
    BGPUT 0,X,Y,I
    INC I
   NEXT
  I=I+7
  NEXT
  BGPAGE OTW_DP
  DISPLAY 0
  @_
  PrintConsole "====================="+LF$()
  PrintConsole "OTYA 3D WINDOW SYSTEM"+LF$()
  PrintConsole "====================="+LF$()
  PrintConsole "Ver 5.0-B"+LF$()
  BEEP 94,-1000
  OTW_INIT=TRUE
  OTW_WIN_INITARRAY
  OTW_CTL_INITARRAY
  OTW_INIT_ERR
  VAR E
  NewControl "DESKTOP" OUT WIN_ROOTCTL,E
  E=SetControlPainter(WIN_ROOTCTL,"DesktopPainter")
  NewTopLevelWindow WIN_ROOTCTL,"DESKTOP",400,240 OUT WIN_ROOTWND,E
  ExtendControl "HELLO",GetWindowControl() OUT TSTCTL,E
  NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND,E
  NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND2,E
  NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND3,E
  E=SetControlPainter(TSTCTL,"HELLOPainter")
  OTW_LOADFONT
  GCLIP 1,0,0,400,240
  VISIBLE 1,1,1,1
  OTW_MOUSEX=(400-16)/2
  OTW_MOUSEY=(240-16)/2
  OTW_MOUSEX#=(400-16)/2
  OTW_MOUSEY#=(240-16)/2
  
  OTW_MOUSELBTN=32OR 256
  OTW_MOUSERBTN=16OR 512
  OTW_LMOUSEDWN=1
  OTW_LMOUSEUP =2
  OTW_RMOUSEDWN=4
  OTW_RMOUSEUP =8
  
  '290
  SPSET OTW_MOUSESP,290
  SPVAR 0,0,1
  SPOFS OTW_MOUSESP,OTW_MOUSEX,OTW_MOUSEY,-256
  SPHOME OTW_MOUSESP,0,0
  SPCOL 0,0,0,1,1
  OTW_MOVWINSP=1
  SPSET OTW_MOVWINSP,290
  SPLINK OTW_MOVWINSP,OTW_MOUSESP
  SPOFS OTW_MOVWINSP,-2,2,-00
  SPCOLOR OTW_MOVWINSP,RGB(128,0,0,0)
  SPVAR OTW_MOVWINSP,0,1
  OTW_MOVWINSP=2
  SPSET OTW_MOVWINSP,0
  SPHIDE OTW_MOVWINSP
  SPVAR OTW_MOVWINSP,0,1
  CLS
  LOCATE 0,29
 NewProcess"WCLOCK","" OUT E,E,E
 ENDIF
RETURN
END
COMMON DEF HELLOPainter WND,CTL,TYPE,A1,A2
 VAR E=CallBaseControlHandler(WND,CTL,TYPE,A1,A2)
 E=GBEGINWindow(WND)
 IF E THEN RETURN
 GFILLWindow WND,0,0,64,64,RGB(224,224,224)'RGB(0,0,0)
 VAR S$="HELLOWORLD",I
 FOR I=0TO LEN(S$)-1
  GPRINTWindowCC WND,6+I*8,1,S$[I],I
 NEXT
 E=GENDWindow(WND)
END
VAR OTW_OLDMOUSEX
VAR OTW_OLDMOUSEY
DEF OTWGetOvMouseNUWID()
 RETURN RGBToShort(GSPOIT(OTW_MOUSEX,OTW_MOUSEY+240))
END
VAR OTW_OLDLMOUSE
VAR OTW_OLDRMOUSE
COMMON DEF L_OTW
 VAR MOVEMOUSE
 UpdateMouse
 IF OTW_MOUSEX!=OTW_OLDMOUSEX THEN MOVEMOUSE=1
 IF OTW_MOUSEY!=OTW_OLDMOUSEY THEN MOVEMOUSE=1
 VAR NUWID,E
 VAR BTN=UpdateButton()
 IF MOVEMOUSE||BTN THEN
  NUWID=OTWGetOvMouseNUWID()
 ENDIF
 IF BTN THEN
  IF BTN AND OTW_LMOUSEDWN THEN
   IF NUWID AND WIN_FRAMEFLG THEN
    E=LMouseDownWindowOnFrame(NUWIDToWND(NUWID AND 32767))
   ELSE
    E=LMouseDownWindow(NUWIDToWND(NUWID))
   ENDIF
  ENDIF
  IF BTN AND OTW_LMOUSEUP THEN
   IF WIN_DRAGHANDLER_USE THEN
    CALL WIN_DRAGHANDLER$,WIN_DRAGHANDLER_WND,OTW_MOUSEX,OTW_MOUSEY,WIN_DRAGHANDLER_A1,WIN_DRAGHANDLER_A2
    E=ClearWindowDragHandler()
   ELSE
    IF NUWID AND WIN_FRAMEFLG THEN
     E=LMouseUpWindowOnFrame(NUWIDToWND(NUWID AND 32767))
    ELSE
     E=LMouseUpWindow(NUWIDToWND(NUWID))
    ENDIF
   ENDIF
  ENDIF
 ENDIF
 IF BUTTON()AND 64THEN DUMP_WND
 OTW_OLDMOUSEX=OTW_MOUSEX
 OTW_OLDMOUSEY=OTW_MOUSEY
 VOID UpdateWindow(WIN_ROOTWND)
 VOID UpdateWindow(TSTWND2)
 VOID UpdateWindow(TSTWND)
 VOID UpdateWindow(TSTWND3)
 VAR _CNT=MAINCNT-OTW_CNT
 IF _CNT>60 THEN
  OTW_FPS=OTW_FPSCNT
  OTW_FPSCNT=0
  ?OTW_FPS
  OTW_CNT=MAINCNT
 ELSE
  INC OTW_FPSCNT
 ENDIF
' ExitProcess 1
RETURN
END
VAR WCLOCKWND
VAR WCLOCKBC
VAR WCLOCKTIM
COMMON DEF I_WCLOCK
 IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
  PrintConsole "Require OTW"+LF$()
  ExitProcess 1
  RETURN
 ENDIF
 VAR E
  NewTopLevelWindow GetWindowControl(),"CLOCK",64,64 OUT WCLOCKWND,E
 WCLOCKTIM=MAINCNT/60
 WCLOCKTIM=WCLOCKTIM*60
 'NewWindow GetButtonControl()
 NewWindow TSTCTL,"TEST",8,8,64,64,WCLOCKWND,0 OUT WCLOCKBC,E
END
COMMON DEF L_WCLOCK
 VAR E
 E=UpdateWindow(WCLOCKBC)
 E=PeekWindowEvent(WCLOCKWND)
 IF E==RepaintControlEvent()THEN
  WCLOCK_RP
  E=UpdateWindow(WCLOCKWND)
  RETURN
 ENDIF
 E=UpdateWindow(WCLOCKWND)
 IF E THEN RETURN
 IF MAINCNT-WCLOCKTIM>=60 THEN
  WCLOCKTIM=MAINCNT/60
  WCLOCKTIM=WCLOCKTIM*60
  WCLOCK_RP
 ENDIF
 
END
 DEF WCLOCK_RP
  VAR E
  E=GBeginWindow(WCLOCKWND)
  IF E THEN RETURN
  GFILLWindow WCLOCKWND,0,0,64,64,RGB(255,160,16)
  GPRINTWindowCC WCLOCKWND,0,0,TIME$,1
  GPRINTWindowCC WCLOCKWND,0,8,TIME$,1
  E=GEndWindow(WCLOCKWND)
 END
DEF DUMP_WND
 DUMP_WND2 WIN_ROOTWND AND NUWIDMASK,""
END
DEF DUMP_WND2 NUW,I$
 IF!NUW THEN RETURN
 ?I$;WIN_NAME$[NUW],NUW,WIN_WID[NUW]
' IF CSRY==29 THEN VAR II$INPUT "";II$
 DUMP_WND2 WIN_NEXT[NUW],I$
 IF LEN(I$) THEN
  VAR NM$=""
  IF WIN_NEXT[NUW] THEN
   NM$=""
  ELSE
   NM$=""
  ENDIF
  IF WIN_NEXT[WIN_PARENT[NUW]]THEN
   NM$=""+NM$
  ELSE
   NM$=" "+NM$
  ENDIF
  DUMP_WND2 WIN_CHILD[NUW],MID$(I$,0,LEN(I$)-1)+NM$
 ELSE
  IF WIN_CHILD[NUW]THEN
   DUMP_WND2 WIN_CHILD[NUW],""
  ELSE
   DUMP_WND2 WIN_CHILD[NUW],""
  ENDIF
 ENDIF
END
DEF UpdateButton()
 VAR B=BUTTON()
 VAR RET=0
 IF B AND OTW_MOUSELBTN THEN
  IF!OTW_OLDLMOUSE THEN RET=OTW_LMOUSEDWN
  OTW_OLDLMOUSE=1
 ELSE
  IF OTW_OLDLMOUSE THEN RET=OTW_LMOUSEUP
  OTW_OLDLMOUSE=0
 ENDIF
 IF B AND OTW_MOUSERBTN THEN
  IF!OTW_OLDRMOUSE THEN RET=RET OR OTW_RMOUSEDWN
  OTW_OLDRMOUSE=1
 ELSE
  IF OTW_OLDRMOUSE THEN RET=RET OR OTW_RMOUSEUP
  OTW_OLDRMOUSE=0
 ENDIF
 RETURN RET
END
VAR OTW_MOUSEOLDX,OTW_MOUSEOLDY
VAR OTW_MOUSEOLDST
COMMON DEF UpdateMouse
 VAR S,X,Y
 TOUCH OUT S,X,Y
 IF OTW_MOUSEOLDST AND S THEN
  OTW_MOUSEX=OTW_MOUSEX+X-OTW_MOUSEOLDX
  OTW_MOUSEY=OTW_MOUSEY+Y-OTW_MOUSEOLDY
  IF OTW_MOUSEX<0THEN OTW_MOUSEX=0
  IF OTW_MOUSEY<0THEN OTW_MOUSEY=0
  IF OTW_MOUSEX>=400THEN OTW_MOUSEX=399
  IF OTW_MOUSEY>=240THEN OTW_MOUSEY=239
  SPOFS OTW_MOUSESP,OTW_MOUSEX,OTW_MOUSEY
   OTW_MOUSEX#=OTW_MOUSEX
   OTW_MOUSEY#=OTW_MOUSEY
 ENDIF
 OTW_MOUSEOLDX=X
 OTW_MOUSEOLDY=Y
 OTW_MOUSEOLDST=S
 IF!S THEN
  VAR X#,Y#
  STICK OUT X#,Y#
  IF X#!=0 OR Y#!=0 THEN
   OTW_MOUSEX#=OTW_MOUSEX#+X#*0.2'/2
   OTW_MOUSEY#=OTW_MOUSEY#-Y#*0.2'/2
   IF OTW_MOUSEX#<0THEN OTW_MOUSEX#=0
   IF OTW_MOUSEY#<0THEN OTW_MOUSEY#=0
   IF OTW_MOUSEX#>=400THEN OTW_MOUSEX#=399
   IF OTW_MOUSEY#>=240THEN OTW_MOUSEY#=239
   SPOFS OTW_MOUSESP,OTW_MOUSEX#,OTW_MOUSEY#
   OTW_MOUSEX=OTW_MOUSEX#
   OTW_MOUSEY=OTW_MOUSEY#
  ENDIF
 ENDIF
END
COMMON DEF OTWSAVE VER$
 SAVE"PRG1:OTW"+VER$
END
'DEF OTW_LOADMOUSE
' 
'END
DEF OTW_LOADFONT
 VAR T$=" !"+CHR$(34)+"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghiijklmnopqrstuvwxyz{|}~¢£¦§¨¨©®±´¶ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿĀāĂăĄąĆćĊċČčĎďĒēĔĕĖėĘęĞğĠġĢģĦħĪīĮįİıĲĳĶķĹĺĻļĽľŁłŃńŅņŇňŐőŒœŔŕŘřŚśŞşŠšŤťŪūŮůŰűŲųŸŹźŻżŽžƒǅǆǲǳȚț˚;΄΅ΆΈΉΊΌΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώЁАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяё“”†‡…‰※€⇒⇔∀∂∞∴∵⊂⊃⌒☆♀♂♡♧♭、。〃々〆「」『』〒〜〝〟ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろわをんゝゞァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロワヲンヴ・ー仝｀｜"
 'LOAD FONT-1
 VAR C$
 OTW_FNT1=NewArray2(&H7F-&H20,2)
'GPAGE 0,5
 VAR X,Y,I,J
'RETURN
 RESTORE @FONT
 VAR C,_$,K
 DIM PAL[16]
 OTW_CONSOLEPAL=PAL
 FOR I=0TO 15
  READ PAL[I]
 NEXT
 WHILE 1
  READ C$
  IF C$=="END"THEN BREAK
  IF LEN(C$)-1 THEN CONTINUE
  ?C$;
  I=ASC(C$)-&H20
  'X=I*8
  'IF I>=512-8THEN X=I MOD 64Y=1
' GFILL X,Y,X+8,Y+8,0
  FOR K=0TO 1
   FOR J=0TO 3
    READ C
    OTW_FNT1[I,K]=(OTW_FNT1[I,K]<<8)+C
   NEXT
  NEXT
 WEND
RETURN
  FOR J=0TO 7
   READ C$
   FOR I=0TO LEN(C$)-1
    _$=MID$(C$,I,1)
    IF _$=="F"THEN C=-1 ELSE C=0
    VAR _Y,_C
    FOR _Y=0TO 15
     IF C THEN _C=PAL[_Y]ELSE _C=0
     GPSET X+I,Y+J+16*_Y,_C
    NEXT
   NEXT
  NEXT
'WEND
 GPAGE 0,0
@FONT
RETURN
COLOR
'      AARRGGBB
DATA &H00000000
DATA &HFF000000
DATA &HFF7F0000
DATA &HFFFF0000
DATA &HFF007F00
DATA &HFF00FF00
DATA &HFF7F7F00
DATA &HFFFFFF00
DATA &HFF00007F
DATA &HFF0000FF
DATA &HFF7F007F
DATA &HFFFF00FF
DATA &HFF007F7F
DATA &HFF00FFFF
DATA &HFF7F7F7F
DATA &HFFFFFFFF
DATA "0"
DATA &B00111000'"00FFF000"
DATA &B01000100
DATA &B01001100
DATA &B01010100
DATA &B01100100
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "1"
DATA &B00010000
DATA &B01110000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B01111100
DATA &B00000000
DATA "2"
DATA &B00111000
DATA &B01000100
DATA &B00000100
DATA &B00001000
DATA &B00010000
DATA &B00100000
DATA &B01111100
DATA &B00000000
DATA "3"
DATA &B00111000
DATA &B01000100
DATA &B00000100
DATA &B00011000
DATA &B00000100
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "4"
DATA &B00001000
DATA &B00011000
DATA &B00101000
DATA &B01001000
DATA &B01001000
DATA &B01111100
DATA &B00001000
DATA &B00000000
DATA "5"
DATA &B01111100
DATA &B01000000
DATA &B01111000
DATA &B01000100
DATA &B00000100
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "6"
DATA &B00011000
DATA &B00100000
DATA &B01000000
DATA &B01111000
DATA &B01000100
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "7"
DATA &B01111100
DATA &B01000100
DATA &B00001000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00000000
DATA "8"
DATA &B00111000
DATA &B01000100
DATA &B01000100
DATA &B00111000
DATA &B01000100
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "9"
DATA &B00111000
DATA &B01000100
DATA &B01000100
DATA &B00111100
DATA &B00000100
DATA &B00000100
DATA &B00111000
DATA &B00000000
DATA ":"
DATA &B00000000
DATA &B00000000
DATA &B00010000
DATA &B00000000
DATA &B00000000
DATA &B00010000
DATA &B00000000
DATA &B00000000

DATA "A"
DATA &B00010000
DATA &B00101000
DATA &B01000100
DATA &B01000100
DATA &B01111100
DATA &B01000100
DATA &B01000100
DATA &B00000000
DATA "B"
DATA &B01111000
DATA &B01000100
DATA &B01000100
DATA &B01111000
DATA &B01000100
DATA &B01000100
DATA &B01111000
DATA &B00000000
DATA "C"
DATA &B00111000
DATA &B01000100
DATA &B01000000
DATA &B01000000
DATA &B01000000
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "D"
DATA &B01110000
DATA &B01001000
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01001000
DATA &B01110000
DATA &B00000000
DATA "E"
DATA &B01111100
DATA &B01000000
DATA &B01000000
DATA &B01111000
DATA &B01000000
DATA &B01000000
DATA &B01111100
DATA &B00000000
DATA "F"
DATA &B01111100
DATA &B01000000
DATA &B01000000
DATA &B01111000
DATA &B01000000
DATA &B01000000
DATA &B01000000
DATA &B00000000
DATA "G"
DATA &B00111100
DATA &B01000000
DATA &B01000000
DATA &B01011100
DATA &B01000100
DATA &B01000100
DATA &B00111100
DATA &B00000000
DATA "H"
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01111100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B00000000
DATA "I"
DATA &B00111000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00111000
DATA &B00000000
DATA "J"
DATA &B00011100
DATA &B00001000
DATA &B00001000
DATA &B00001000
DATA &B00001000
DATA &B01001000
DATA &B00110000
DATA &B00000000
DATA "K"
DATA &B01000100
DATA &B01001000
DATA &B01010000
DATA &B01100000
DATA &B01010000
DATA &B01001000
DATA &B01000100
DATA &B00000000
DATA "L"
DATA &B01000000
DATA &B01000000
DATA &B01000000
DATA &B01000000
DATA &B01000000
DATA &B01000000
DATA &B01111100
DATA &B00000000
DATA "M"
DATA &B01000100
DATA &B01101100
DATA &B01010100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B00000000
DATA "N"
DATA &B01000100
DATA &B01100100
DATA &B01010100
DATA &B01001100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B00000000
DATA "O"
DATA &B00111000
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "P"
DATA &B01111000
DATA &B01000100
DATA &B01000100
DATA &B01111000
DATA &B01000000
DATA &B01000000
DATA &B01000000
DATA &B00000000
DATA "Q"
DATA &B00111000
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01010100
DATA &B01001000
DATA &B00110100
DATA &B00000000
DATA "R"
DATA &B01111000
DATA &B01000100
DATA &B01000100
DATA &B01111000
DATA &B01010000
DATA &B01001000
DATA &B01000100
DATA &B00000000
DATA "S"
DATA &B00111000
DATA &B01000100
DATA &B01000000
DATA &B00111000
DATA &B00000100
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "T"
DATA &B01111100
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00000000
DATA "U"
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "V"
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B00101000
DATA &B00101000
DATA &B00010000
DATA &B00010000
DATA &B00000000
DATA "W"
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01000100
DATA &B01010100
DATA &B01101100
DATA &B01000100
DATA &B00000000
DATA "X"
DATA &B01000100
DATA &B01000100
DATA &B00101000
DATA &B00010000
DATA &B00101000
DATA &B01000100
DATA &B01000100
DATA &B00000000
DATA "Y"
DATA &B01000100
DATA &B01000100
DATA &B00101000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00010000
DATA &B00000000
DATA "Z"
DATA &B01111100
DATA &B00000100
DATA &B00001000
DATA &B00010000
DATA &B00100000
DATA &B01000000
DATA &B01111100
DATA &B00000000
DATA "END"
DATA "a"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"
DATA "00000000"

END
