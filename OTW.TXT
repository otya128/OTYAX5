OPTION STRICT
OPTION DEFINT
'=======================
' OTYA 3D WINDOW SYSTEM 
'=======================
'グローバルへんすうのていぎ
VAR OTW_INIT,OTW_MOUSESP,OTW_MOVWINSP
VAR OTW_MOUSEX
VAR OTW_MOUSEY
VAR OTW_MOUSEX#,OTW_MOUSEY#
VAR OTW_FNT[0,0]
VAR OTW_FNTPAL[0]
VAR OTW_FNTTBL[0]
VAR OTW_CONSOLEPAL[0]
'=======================
'        WINDOW         
'=======================
VAR WIN_MAX,WIN_MSGMAX
DIM WIN_NAME$  [0]
DIM WIN_WID    [0]
DIM WIN_X      [0]
DIM WIN_Y      [0]
DIM WIN_WIDTH  [0]
DIM WIN_HEIGHT [0]
DIM WIN_AX     [0]
DIM WIN_AY     [0]
DIM WIN_AW     [0]
DIM WIN_AH     [0]
DIM WIN_RX     [0]
DIM WIN_RY     [0]
DIM WIN_RFX    [0]
DIM WIN_RFY    [0]
DIM WIN_FX     [0]
DIM WIN_FY     [0]
DIM WIN_FW1    [0]
DIM WIN_FH1    [0]
DIM WIN_FW2    [0]
DIM WIN_FH2    [0]
DIM WIN_CTL    [0]
DIM WIN_PID    [0]
DIM WIN_NUPID  [0]
VAR WIN_VARSIZ
DIM WIN_VAR    [0,0]
DIM WIN_NEXT   [0]
DIM WIN_PREV   [0]
DIM WIN_CHILD  [0]
DIM WIN_PARENT [0]
DIM WIN_BEGIN  [0]
DIM WIN_SP     [0]
'QUEUE
DIM WIN_MSGS   [0]
DIM WIN_MSGE   [0]
DIM WIN_MSGBUF [0,0,0]
DIM WIN_MSGCNT [0,0]
DIM WIN_USER   [0,0]
VAR WIN_FREE
VAR WIN_WIDCNT
VAR WIN_MSGARGSIZE
VAR WIDSHIFT
VAR NUWIDMASK
VAR WIN_FRAMEFLG
'DRAW PAGE
VAR OTW_DP
'SHOW PAGE
VAR OTW_SP
'BUFFER PAGE
VAR OTW_BP
'GPAGE
VAR OTW_GP
VAR WIN_FWIDTH1
VAR WIN_FHEIGHT1
VAR WIN_FWIDTH2
VAR WIN_FHEIGHT2
'H1
'          
'
'          
'          
'          
'          
'          
'H2
'⇔⇔
'W1         W2
'
VAR WIN_ACTIVENUWID
DEF OTW_WIN_INITARRAY
 VAR FM=FREEMEM
 WIN_FWIDTH1=0
 WIN_FHEIGHT1=10
 WIN_FWIDTH2=0
 WIN_FHEIGHT2=0
 WIN_MAX=256
 WIN_MSGMAX=64
 WIN_MSGARGSIZE=3
 WIDSHIFT=12
 NUWIDMASK=4095
 WIN_FRAMEFLG=32768
 WIN_VARSIZ=8
 WIN_NAME$     =NewArray$(WIN_MAX)
 WIN_WID       =NewArray(WIN_MAX)
 WIN_X         =NewArray(WIN_MAX)
 WIN_Y         =NewArray(WIN_MAX)
 WIN_WIDTH     =NewArray(WIN_MAX)
 WIN_HEIGHT    =NewArray(WIN_MAX)
 WIN_AX        =NewArray(WIN_MAX)
 WIN_AY        =NewArray(WIN_MAX)
 WIN_AW        =NewArray(WIN_MAX)
 WIN_AH        =NewArray(WIN_MAX)
 WIN_RX        =NewArray(WIN_MAX)
 WIN_RY        =NewArray(WIN_MAX)
 WIN_RFX       =NewArray(WIN_MAX)
 WIN_RFY       =NewArray(WIN_MAX)
 WIN_FX        =NewArray(WIN_MAX)
 WIN_FY        =NewArray(WIN_MAX)
 WIN_FW1       =NewArray(WIN_MAX)
 WIN_FH1       =NewArray(WIN_MAX)
 WIN_FW2       =NewArray(WIN_MAX)
 WIN_FH2       =NewArray(WIN_MAX)
 WIN_CTL       =NewArray(WIN_MAX)
 WIN_PID       =NewArray(WIN_MAX)
 WIN_NUPID     =NewArray(WIN_MAX)
 WIN_VAR       =NewArray2(WIN_MAX,WIN_VARSIZ)
 WIN_NEXT      =NewArray(WIN_MAX)
 WIN_PREV      =NewArray(WIN_MAX)
 WIN_CHILD     =NewArray(WIN_MAX)
 WIN_PARENT    =NewArray(WIN_MAX)
 WIN_BEGIN     =NewArray(WIN_MAX)
 WIN_SP        =NewArray(WIN_MAX)
 WIN_MSGS      =NewArray(WIN_MAX)
 WIN_MSGE      =NewArray(WIN_MAX)
 WIN_MSGBUF    =NewArray3(WIN_MAX,WIN_MSGMAX,WIN_MSGARGSIZE)
 WIN_MSGCNT    =NewArray2(WIN_MAX,16)
 WIN_FREE=1
 OTW_INITLIST WIN_NEXT
END
'IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
'ExitProcess 1
'ENDIF
VAR OTWRunning
COMMON DEF IsWinRunning()
 RETURN OTWRunning
END
'=======================
'CONTROL
'=======================
VAR CTL_MAX
VAR CTL_HANDLER_MAX
DIM CTL_NAME$    [0]
DIM CTL_CID      [0]
DIM CTL_DAT      [0]
DIM CTL_FW1      [0]
DIM CTL_FH1      [0]
DIM CTL_FW2      [0]
DIM CTL_FH2      [0]
DIM CTL_NEXT     [0]
DIM CTL_PARENTCTL[0]
DIM CTL_HANDLER$ [0,0]
DIM CTL_NDHNDLR[0]
VAR CTL_FREE
VAR CTL_CIDCNT
VAR CTL_PAINTHANDLER
COMMON DEF RepaintControlEvent()
 RETURN CTL_PAINTHANDLER
END
VAR CTL_LBTNUPHANDLER
VAR CTL_LBTNDWNHANDLER
VAR CTL_RBTNUPHANDLER
VAR CTL_RBTNDWNHANDLER
VAR CTL_FRMBTNHANDLER
VAR CTL_DRWFRMHANDLER
VAR CTL_NOTIFHANDLER
VAR CTL_KEYHANDLER
VAR CTL_BTNHANDLER
VAR CTL_CHFOCUSHANDLER
VAR CTL_MOUSEMVHANDLER
VAR CTL_LBTNFLG
VAR CTL_RBTNFLG
VAR CTL_BTNDWNFLG
VAR CTL_BTNUPFLG
VAR CTL_WINDOWCTL
VAR CTL_BUTTONCTL
VAR CTL_TXTBOXCTL
DEF OTW_CTL_INITARRAY
 CTL_MAX=64
 CTL_HANDLER_MAX=16
 CTL_NAME$     =NewArray$(CTL_MAX)
 CTL_DAT       =NewArray(CTL_MAX)
 CTL_FW1       =NewArray(CTL_MAX)
 CTL_FH1       =NewArray(CTL_MAX)
 CTL_FW2       =NewArray(CTL_MAX)
 CTL_FH2       =NewArray(CTL_MAX)
 CTL_CID       =NewArray(CTL_MAX)
 CTL_NEXT      =NewArray(CTL_MAX)
 CTL_PARENTCTL =NewArray(CTL_MAX)
 CTL_HANDLER$  =NewArray2$(CTL_MAX,CTL_HANDLER_MAX)
 CTL_NDHNDLR=NewArray(CTL_MAX)
 CTL_FREE=1
 OTW_INITLIST CTL_NEXT
 VAR E
 NewControl "WINDOW" OUT CTL_WINDOWCTL,E
 NewControl "BUTTON" OUT CTL_BUTTONCTL,E
 NewControl "TXTBOX" OUT CTL_TXTBOXCTL,E
 CTL_PAINTHANDLER=0
 CTL_NDHNDLR[CTL_PAINTHANDLER]=TRUE
 CTL_LBTNDWNHANDLER=1
 CTL_LBTNUPHANDLER=2
 CTL_RBTNUPHANDLER=3
 CTL_RBTNDWNHANDLER=4

 CTL_FRMBTNHANDLER=5
 CTL_NOTIFHANDLER=6
 CTL_KEYHANDLER=7
 CTL_BTNHANDLER=8
 CTL_CHFOCUSHANDLER=9
 CTL_MOUSEMVHANDLER=10
 'A1=,A2=bit16~31Y,Xbit0~15
 CTL_LBTNFLG=4
 CTL_RBTNFLG=8
 CTL_BTNDWNFLG=1
 CTL_BTNUPFLG=2
' CTL_DRWFRMHANDLER=3
 E=SetControlFrameSize(CTL_WINDOWCTL,WIN_FWIDTH1,WIN_FHEIGHT1,WIN_FWIDTH2,WIN_FHEIGHT2)
 E=SetControlPainter(CTL_WINDOWCTL,"WindowPainter")
 E=SetControlLMouseUpHandler(CTL_WINDOWCTL,"WindowLMouseUP")
 E=SetControlClickFrameHandler(CTL_WINDOWCTL,"WindowClickFrame")
 E=SetControlPainter(CTL_BUTTONCTL,"ButtonPainter")
 E=SetControlLMouseUpHandler(CTL_BUTTONCTL,"ButtonLMouseUP")
 E=SetControlPainter(CTL_TXTBOXCTL,"TextBoxPainter")
 E=SetControlLMouseDownHandler(CTL_TXTBOXCTL,"TextBoxLMouseDown")
 E=SetControlKeyHandler(CTL_TXTBOXCTL,"TextBoxKey")
 E=SetControlButtonHandler(CTL_TXTBOXCTL,"TextBoxButton")
 E=SetControlChFocusHandler(CTL_TXTBOXCTL,"TextBoxChFocus")
 INIT_TXTBOXEX
END
DEF OTW_INITLIST ARY[]
 VAR I
 FOR I=1TO LEN(ARY)-1
  ARY[I]=I+1
 NEXT
END
VAR WIN_NOALLOC
VAR WIN_INVALIDID
VAR WIN_EVENTERR
VAR CTL_NOALLOC
VAR CTL_INVALIDID
DEF OTW_INIT_ERR
 WIN_NOALLOC=1
 WIN_INVALIDID=2
 WIN_EVENTERR=3
 CTL_NOALLOC=201
 CTL_INVALIDID=202
END
COMMON DEF GetWindowControl()
 RETURN CTL_WINDOWCTL
END
COMMON DEF GetButtonControl()
 RETURN CTL_BUTTONCTL
END
COMMON DEF GetTextBoxControl()
 RETURN CTL_TXTBOXCTL
END
'CONTROL
COMMON DEF NewControl NAME$ OUT CTL,ERR
 IF!CTL_FREE THEN
  ERR=CTL_NOALLOC
  CTL=0
  RETURN
 ENDIF
 INC CTL_CIDCNT
 ERR=0
 CTL=CIDNUCIDToCTL(CTL_FREE,CTL_CIDCNT)
 CTL_FREE=CTL_NEXT[CTL_FREE]
 CTL_CID[CTL AND 4095]=CTL_CIDCNT
 CTL_NEXT[CTL AND 4095]=0
 CTL_NAME$[CTL AND 4095]=NAME$
END
COMMON DEF ExtendControl NAME$,PARENT OUT CTL,ERR
 IF!CheckControl(PARENT)THEN
  CTL=0
  ERR=CTL_INVALIDID
  RETURN
 ENDIF
 NewControl NAME$ OUT CTL,ERR
 IF ERR THEN RETURN
 VAR NUCID=CTL AND 4095
 CTL_PARENTCTL[NUCID]=PARENT
 VAR I,P=PARENT AND 4095
 FOR I=0TO CTL_HANDLER_MAX-1
  CTL_HANDLER$[NUCID,I]=CTL_HANDLER$[P,I]
 NEXT
 CTL_FW1[NUCID]=CTL_FW1[P]
 CTL_FH1[NUCID]=CTL_FH1[P]
 CTL_FW2[NUCID]=CTL_FW2[P]
 CTL_FH2[NUCID]=CTL_FH2[P]
END
COMMON DEF CheckControl(CTL)
 RETURN CTL_CID[CTL AND 4095]==CTL>>12
END
COMMON DEF DeleteControl(CTL)
 IF!CheckControl(CTL) THEN RETURN CTL_INVALIDID
 VAR NUCID=CTL AND 4095,CID=CTL>>12
 CTL_NEXT[NUCID]=CTL_FREE
 CTL_FREE=NUCID
 CTL_CID[NUCID]=0
 CTL_FW1[NUCID]=0
 CTL_FH1[NUCID]=0
 CTL_FW2[NUCID]=0
 CTL_FH2[NUCID]=0
 CTL_DAT[NUCID]=0
 CTL_NAME$[NUCID]=""
 VAR I
 FOR I=0TO CTL_HANDLER_MAX-1
  CTL_HANDLER$[I]=""
 NEXT
END
COMMON DEF IsControlExtend(CTL,PARENT)
 VAR N=CTL AND 4095
 VAR P=PARENT AND 4095
 WHILE N
  IF N==P THEN RETURN 1
  N=CTL_PARENTCTL[N]AND 4095
 WEND
 RETURN 0
END
COMMON DEF SetControlPainter(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_PAINTHANDLER]=HANDLER$
 RETURN 0
END
COMMON DEF SetControlLMouseUpHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_LBTNUPHANDLER]=HANDLER$
 RETURN 0
END
COMMON DEF SetControlLMouseDownHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_LBTNDWNHANDLER]=HANDLER$
 RETURN 0
END
DEF SetControlClickFrameHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_FRMBTNHANDLER]=HANDLER$
 RETURN 0
END
COMMON DEF SetControlNotificationHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_NOTIFHANDLER]=HANDLER$
 RETURN 0
END
COMMON DEF SetControlKeyHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_KEYHANDLER]=HANDLER$
 RETURN 0
END
COMMON DEF SetControlButtonHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_BTNHANDLER]=HANDLER$
 RETURN 0
END
COMMON DEF SetControlChFocusHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_CHFOCUSHANDLER]=HANDLER$
 RETURN 0
END
COMMON DEF SetControlMouseMoveHandler(CTL,HANDLER$)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL_HANDLER$[CTL AND 4095,CTL_MOUSEMVHANDLER]=HANDLER$
 RETURN 0
END
DEF SetControlFrameSize(CTL,W1,H1,W2,H2)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 VAR C=CTL AND 4095
 CTL_FW1[C]=W1
 CTL_FH1[C]=H1
 CTL_FW2[C]=W2
 CTL_FH2[C]=H2
 RETURN 0
END
DEF CIDNUCIDToCTL(CID,NUCID)
 RETURN CID<<12OR NUCID
END
'WINDOW
DEF WIDNUWIDToWND(WID,NUWID)
 RETURN WID<<12OR NUWID
END
DEF NUWIDToWND(NUWID)
 RETURN WIN_WID[NUWID]<<12OR NUWID
END
VAR WIN_ROOTWND
COMMON DEF GetRootWND()
 RETURN WIN_ROOTWND
END
COMMON DEF CheckWindow(WND)
 RETURN WIN_WID[WND AND NUWIDMASK]==WND>>WIDSHIFT
END
VAR WIN_TopLevelX
VAR WIN_TopLevelY
VAR OTW_TOPLEVELCNT
COMMON DEF WindowBackFlag()
 RETURN 1
END
COMMON DEF WindowFrontFlag()
 RETURN 2
END
COMMON DEF NewWindow CTL,NAME$,X,Y,WIDTH,HEIGHT,PARENT,FLG OUT WND,ERR
 IF!CheckControl(CTL)THEN
  WND=0
  ERR=CTL_INVALIDID
  RETURN
 ENDIF
 IF!WIN_FREE THEN
  WND=0
  ERR=WIN_NOALLOC
  RETURN
 ENDIF
 VAR NC=CTL AND 4095
 ERR=0
 INC WIN_WIDCNT
 VAR NUWID,WID
 VAR PNUWID=PARENT AND NUWIDMASK
 NUWID=WIN_FREE
 WIN_FREE=WIN_NEXT[WIN_FREE]
 WID=WIN_WIDCNT
 WND=WIDNUWIDToWND(WID,NUWID)
 WIN_WID[NUWID]=WID
 WIN_CTL[NUWID]=CTL
 WIN_NAME$[NUWID]=NAME$
 '
 WIN_X[NUWID]=X
 WIN_Y[NUWID]=Y
 
 WIN_AX[NUWID]=WIN_FX[PNUWID]+X
 WIN_AY[NUWID]=WIN_FY[PNUWID]+Y '
 WIN_FW1[NUWID]=CTL_FW1[NC]
 WIN_FH1[NUWID]=CTL_FH1[NC]
 WIN_FW2[NUWID]=CTL_FW1[NC]+CTL_FW2[NC]
 WIN_FH2[NUWID]=CTL_FH1[NC]+CTL_FH2[NC]
 WIN_WIDTH[NUWID]=WIDTH+WIN_FW2[NUWID]
 WIN_HEIGHT[NUWID]=HEIGHT+WIN_FH2[NUWID]
 WIN_AW[NUWID]=WIN_WIDTH[NUWID]
 WIN_AH[NUWID]=WIN_HEIGHT[NUWID]
 WIN_FX[NUWID]=WIN_AX[NUWID]+WIN_FW1[NUWID]
 WIN_FY[NUWID]=WIN_AY[NUWID]+WIN_FH1[NUWID]
 WIN_RFX[NUWID]=WIN_FX[NUWID]
 WIN_RFY[NUWID]=WIN_FY[NUWID]
 WIN_RX[NUWID]=WIN_AX[NUWID]
 WIN_RY[NUWID]=WIN_AY[NUWID]
 IF WIN_FX[PNUWID]>WIN_RX[NUWID]THEN
  WIN_RX[NUWID]=WIN_FX[PNUWID]
 ENDIF
 IF WIN_FY[PNUWID]>WIN_RY[NUWID]THEN
  WIN_RY[NUWID]=WIN_FY[PNUWID]
 ENDIF
 VAR E1=WIN_AX[NUWID]+WIDTH
 VAR E2=WIN_AX[PNUWID]+WIN_AW[PNUWID]
 IF E1>E2 THEN
  DEC WIN_AW[NUWID],E1-E2
  IF WIN_RFX[PNUWID]>WIN_RFX[NUWID]THEN
   WIN_RFX[NUWID]=WIN_RFX[PNUWID]
  ENDIF
 ENDIF
 E1=WIN_AY[NUWID]+HEIGHT
 E2=WIN_AY[PNUWID]+WIN_AH[PNUWID]
 IF E1>E2 THEN
  DEC WIN_AH[NUWID],E1-E2
  IF WIN_RFY[PNUWID]>WIN_RFY[NUWID]THEN
   WIN_RFY[NUWID]=WIN_RFY[PNUWID]
  ENDIF
 ENDIF
 WIN_NEXT[NUWID]=0
 WIN_PARENT[NUWID]=PARENT AND NUWIDMASK
 IF PNUWID THEN 
  IF FLG AND WindowFrontFlag()THEN
   IF WIN_CHILD[PNUWID]THEN
    VAR N
    WHILE 1
     IF!WIN_NEXT[N]THEN
      WIN_NEXT[N]=NUWID
      WIN_PREV[NUWID]=N
      BREAK
     ENDIF
     N=WIN_NEXT[N]
    WEND
   ELSE
    WIN_CHILD[PNUWID]=N
   ENDIF
   OTW_DrawMap NUWID
  ELSE
   N=WIN_CHILD[PNUWID]
   WIN_CHILD[PNUWID]=NUWID
   OTW_DrawMap NUWID
   IF N THEN
    WIN_NEXT[NUWID]=N
    WIN_PREV[N]=NUWID
    VAR B=NUWID
    WHILE B
     OTW_DrawMap B
     IF!WIN_NEXT[B]THEN
      WHILE B
       B=WIN_PARENT[B]
       IF B==PNUWID THEN BREAK
       IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
      WEND
      IF B==PNUWID THEN BREAK
     ENDIF
     IF WIN_CHILD[B]THEN
      B=WIN_CHILD[B]
      CONTINUE
     ENDIF
     B=WIN_NEXT[B]
     IF B==PNUWID THEN BREAK
    WEND
   ENDIF
  ENDIF
 ENDIF
 VOID RepaintWindow(WND)
END
COMMON DEF NewTopLevelWindow CTL,NAME$,WIDTH,HEIGHT OUT WND,ERR
 IF!CheckControl(CTL)THEN
  WND=0
  ERR=CTL_INVALIDID
  RETURN
 ENDIF
 IF!WIN_FREE THEN
  WND=0
  ERR=WIN_NOALLOC
  RETURN
 ENDIF
 ERR=0
 INC OTW_TOPLEVELCNT
 INC WIN_WIDCNT
 VAR NUWID,WID
 NUWID=WIN_FREE
 WIN_FREE=WIN_NEXT[WIN_FREE]
 WID=WIN_WIDCNT
 WND=WIDNUWIDToWND(WID,NUWID)
 WIN_WID[NUWID]=WID
 WIN_CTL[NUWID]=CTL
 WIN_NAME$[NUWID]=NAME$
 '
 WIN_X[NUWID]=0
 WIN_Y[NUWID]=0
 
 WIN_AX[NUWID]=0
 WIN_AY[NUWID]=0
 WIN_AX[NUWID]=WIN_TopLevelX
 WIN_AY[NUWID]=WIN_TOPLEVELY
 '
 VAR NUCID=CTL AND 4095
 WIN_WIDTH[NUWID]=WIDTH
 WIN_HEIGHT[NUWID]=HEIGHT
 WIN_FW2[NUWID]=CTL_FW1[NUCID]+CTL_FW2[NUCID]
 WIN_FH2[NUWID]=CTL_FH1[NUCID]+CTL_FH2[NUCID]
 WIN_NEXT[NUWID]=0
 GCLIP 1,0,240,400,480
 VOID RepaintWindow(WND)
 IF!WIN_ROOTWND THEN
  GFILL WIN_AX[NUWID],WIN_AY[NUWID]+240,WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID]+240,ShortToRGB(NUWID)
  GCLIP 1,0,0,400,240
  WIN_AW[NUWID]=WIDTH
  WIN_AH[NUWID]=HEIGHT
' SPSET SP,WIN_AX[NUWID],WIN_AY[NUWID],WIN_WIDTH[NUWID],WIN_HEIGHT[NUWID],1
' SPSHOW SP
' SPOFS SP,WIN_AX[NUWID],WIN_AY[NUWID],1023
  RETURN
 ENDIF
 
 VAR SP=OTW_TOPLEVELCNT+1
 WHILE SPVAR(SP,0)
  SP=(SP+1)MOD 255
 WEND
 WIN_SP[NUWID]=SP'OR FRAME<<10
 VAR ROOTNUWID=WIN_ROOTWND AND NUWIDMASK
 VAR C=WIN_CHILD[ROOTNUWID],N
 WIN_PARENT[NUWID]=ROOTNUWID
 IF!C THEN
  WIN_CHILD[ROOTNUWID]=NUWID
 ELSE
  N=C
  WHILE 1
   C=N
   N=WIN_NEXT[N]
   IF!N THEN
    WIN_NEXT[C]=NUWID
    WIN_PREV[NUWID]=C
    BREAK
   ENDIF
  WEND
 ENDIF
 WIN_FW1[NUWID]=CTL_FW1[NUCID]'WIN_TopLevelX
 WIN_FH1[NUWID]=CTL_FH1[NUCID]'WIN_TOPLEVELY
 WIN_AX[NUWID]=WIN_TopLevelX
 WIN_AY[NUWID]=WIN_TOPLEVELY
 INC WIN_TopLevelX,WIN_FHEIGHT1
 INC WIN_TopLevelY,WIN_FHEIGHT1
 WIN_RX[NUWID]=WIN_AX[NUWID]
 WIN_RY[NUWID]=WIN_AY[NUWID]
 WIN_FX[NUWID]=WIN_AX[NUWID]+WIN_FW1[NUWID]
 WIN_FY[NUWID]=WIN_AY[NUWID]+WIN_FH1[NUWID]
 WIN_RFX[NUWID]=WIN_AX[NUWID]+WIN_FW1[NUWID]
 WIN_RFY[NUWID]=WIN_AY[NUWID]+WIN_FH1[NUWID]
 WIN_RX[NUWID]=WIN_AX[NUWID]
 WIN_RY[NUWID]=WIN_AY[NUWID]
' WIN_WIDTH[NUWID]=WIDTH+WIN_FWIDTH+
' WIN_HEIGHT[NUWID]=HEIGHT
 
 WIN_HEIGHT[NUWID]=WIN_HEIGHT[NUWID]+WIN_FHEIGHT1
 WIN_AW[NUWID]=WIN_WIDTH[NUWID]
 WIN_AH[NUWID]=WIN_HEIGHT[NUWID]
 OTW_DrawMap NUWID
 GCLIP 1,0,0,400,240
' GFILL WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],RGB(255,255,255)
 SPSET SP,WIN_AX[NUWID],WIN_AY[NUWID],WIN_WIDTH[NUWID]+1,WIN_HEIGHT[NUWID]+1,1
 SPOFS SP,WIN_AX[NUWID],WIN_AY[NUWID],0
 SPSHOW SP
 SPVAR SP,0,WND
 OTW_SPSORT
END

COMMON DEF DeleteWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 RepaintAllWindow WIN_RX[NUWID],WIN_RY[NUWID],WIN_AW[NUWID],WIN_AH[NUWID]
 VAR E=DeleteWindowNUWID(NUWID)
 RETURN E
END
COMMON DEF DeleteWindowNUWID(NUWID)
 VAR E
 IF WIN_WID[NUWID]<=0THEN RETURN WIN_INVALIDID
 WIN_WID[NUWID]=0
 WIN_MSGS[NUWID]=0
 WIN_MSGE[NUWID]=0
 VAR I
 FOR I=0TO 7
  WIN_VAR[NUWID,I]=0
 NEXT
 FOR I=0TO 15
  WIN_MSGCNT[NUWID,I]=0
 NEXT
 VAR N=WIN_NEXT[NUWID]
 VAR P=WIN_PREV[NUWID]
 IF WIN_CHILD[WIN_PARENT[NUWID]]==NUWID THEN
  WIN_CHILD[WIN_PARENT[NUWID]]=N
 ENDIF
 IF WIN_CHILD[NUWID]THEN
  VAR C=WIN_CHILD[NUWID]
  VAR D
  WHILE C
   D=WIN_NEXT[C]
   E=DeleteWindowNUWID(C)
   C=D
  WEND
 ENDIF
 IF N THEN
  WIN_PREV[N]=P
 ENDIF
 IF P THEN
  WIN_NEXT[P]=N
 ENDIF
 IF WIN_SP[NUWID]THEN
  SPVAR WIN_SP[NUWID]AND 511,0,0
  SPCLR WIN_SP[NUWID]AND 511
  WIN_SP[NUWID]=0
 ENDIF
 WIN_NEXT[NUWID]=WIN_FREE
 WIN_PREV[NUWID]=0
 WIN_PARENT[NUWID]=0
 WIN_CHILD[NUWID]=0
 WIN_FREE=NUWID
 WIN_NAME$[NUWID]=""
 RETURN 0
END

DEF OTW_SPSORT
 VAR I,Z=0
 IF OTW_TOPLEVELCNT-1THEN Z=(1022+255)/(OTW_TOPLEVELCNT-1)
 VAR NUWID=WIN_CHILD[WIN_ROOTWND AND NUWIDMASK]
'IF!WIN_NEXT[NUWID]THEN I=
 I=1022+255
 WHILE NUWID
  I=I-Z
  SPOFS WIN_SP[NUWID]AND 511,,,-255+I
'  SPOFS (WIN_SP[NUWID]>>10),,,-255+I+1
  NUWID=WIN_NEXT[NUWID]
 WEND
END
DEF OTW_DrawMap NUWID
 GPAGE OTW_SP,OTW_DP
 GCLIP 1,0,240,400,480
 GFILL WIN_RX[NUWID],WIN_RY[NUWID]+240,WIN_RX[NUWID]+WIN_AW[NUWID],WIN_RY[NUWID]+WIN_AH[NUWID]+240,ShortToRGB(WIN_FRAMEFLG OR NUWID)
 GFILL WIN_RFX[NUWID],WIN_RFY[NUWID]+240,WIN_RFX[NUWID]+WIN_AW[NUWID]-WIN_FW2[NUWID],WIN_RFY[NUWID]+240+WIN_AH[NUWID]-WIN_FH2[NUWID],ShortToRGB(NUWID)
 GCLIP 1,0,0,400,240
END
COMMON DEF FrontWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF!WIN_NEXT[NUWID]THEN RETURN 0
 VAR N,C=WIN_NEXT[NUWID]
  N=C
  WHILE 1
   C=N
   N=WIN_NEXT[N]
   IF!N THEN
    VAR NUP=WIN_PREV[NUWID]
    VAR NUN=WIN_NEXT[NUWID]
    IF NUP THEN
     WIN_NEXT[NUP]=NUN
     WIN_PREV[NUN]=NUP
    ELSE
     WIN_CHILD[WIN_PARENT[NUWID]]=NUN
    ENDIF
    IF NUN THEN
     IF NUP THEN WIN_NEXT[NUP]=NUN
     WIN_PREV[NUN]=NUP
    ENDIF
    WIN_NEXT[C]=NUWID
    WIN_PREV[NUWID]=C
    WIN_NEXT[NUWID]=0
    IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK) THEN
     VAR Z,Z2,S
     SPOFS WIN_SP[NUWID]AND 511OUT S,S,Z
     SPOFS WIN_SP[C]AND 511OUT S,S,Z2
     SPOFS WIN_SP[NUWID]AND 511,,,Z2
     SPOFS WIN_SP[C]AND 511,,,Z
    ENDIF
    VOID RepaintWindow(WND)
    OTW_DrawMap NUWID
    IF WIN_CHILD[NUWID]THEN
     VAR B=WIN_CHILD[NUWID]
     WHILE B
      VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
      OTW_DrawMap B
      IF!WIN_NEXT[B]THEN
       WHILE B
        B=WIN_PARENT[B]
        IF B==NUWID THEN BREAK
        IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
       WEND
       IF B==NUWID THEN BREAK
      ENDIF
      IF WIN_CHILD[B]THEN
       B=WIN_CHILD[B]
       CONTINUE
      ENDIF
      B=WIN_NEXT[B]
      IF B==NUWID THEN BREAK
     WEND
    ENDIF
    BREAK
   ENDIF
  WEND
 RETURN 0
END

DEF RepaintAllWindow X,Y,W,H
 VAR NXT=WIN_ROOTWND AND NUWIDMASK
 VAR B=NXT
' WHILE NXT
'  VOID RepaintWindow(NXT OR(WIN_WID[NXT]<<WIDHIFT))
'  OTW_DrawMap NXT
'  IF WIN_CHILD[NXT]THEN
'   B=WIN_CHILD[NXT]
   WHILE B
   VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
    OTW_DrawMap B
    IF WIN_CHILD[B]THEN
     B=WIN_CHILD[B]
     CONTINUE
    ENDIF
    IF!WIN_NEXT[B]THEN
     WHILE B
      B=WIN_PARENT[B]
  '    IF B==NXT THEN BREAK
      IF WIN_NEXT[B]THEN BREAK
     WEND
     IF!B THEN RETURN
 '    IF B==NXT THEN BREAK
    ENDIF
    B=WIN_NEXT[B]
 '   IF B==NXT THEN BREAK
   WEND
'  ENDIF
'  NXT=WIN_NEXT[NXT]
' WEND
END
COMMON DEF MoveWindow(WND,X,Y)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 IF!X&&!Y THEN RETURN
 VAR NUWID=WND AND NUWIDMASK
 VAR MX=X-WIN_AX[NUWID],MY=Y-WIN_AY[NUWID]
 VAR NXT=WIN_CHILD[NUWID],B=NXT
 IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK)THEN
' GFILL WIN_RX[NUWID],WIN_RY[NUWID],WIN_RX[NUWID]+WIN_AW[NUWID],WIN_RY[NUWID]+WIN_AH[NUWID],0
 ENDIF
' GFILL WIN_AX[NUWID],WIN_AY[NUWID],WIN_AX[NUWID]+WIN_WIDTH[NUWID],WIN_AY[NUWID]+WIN_HEIGHT[NUWID],0
 WIN_AX[NUWID]=WIN_AX[NUWID]+MX
 WIN_AY[NUWID]=WIN_AY[NUWID]+MY
 WIN_FX[NUWID]=WIN_AX[NUWID]+WIN_FW1[NUWID]
 WIN_FY[NUWID]=WIN_AY[NUWID]+WIN_FH1[NUWID]
 WIN_RFX[NUWID]=WIN_FX[NUWID]
 WIN_RFY[NUWID]=WIN_FY[NUWID]
 WIN_RX[NUWID]=WIN_AX[NUWID]
 WIN_RY[NUWID]=WIN_AY[NUWID]
 VAR PNUWID=WIN_PARENT[NUWID]
 IF WIN_FX[PNUWID]>WIN_RX[NUWID]THEN
  WIN_RX[NUWID]=WIN_FX[PNUWID]
  IF WIN_RFX[PNUWID]>WIN_RFX[NUWID]THEN
   WIN_RFX[NUWID]=WIN_RFX[PNUWID]
  ENDIF
 ENDIF
 IF WIN_FY[PNUWID]>WIN_RY[NUWID]THEN
  WIN_RY[NUWID]=WIN_FY[PNUWID]
  IF WIN_RFY[PNUWID]>WIN_RFY[NUWID]THEN
   WIN_RFY[NUWID]=WIN_RFY[PNUWID]
  ENDIF
 ENDIF
 VAR E1=WIN_AX[NUWID]+WIN_WIDTH[NUWID]
 VAR E2=WIN_RX[PNUWID]+WIN_AW[PNUWID]

 WIN_AW[NUWID]=WIN_WIDTH[NUWID]
 IF E1>E2 THEN
 DEC WIN_AW[NUWID],E1-E2
 ENDIF
 IF WIN_AX[NUWID]<WIN_FX[PNUWID]THEN
 WIN_AW[NUWID]=WIN_WIDTH[NUWID]
  DEC WIN_AW[NUWID],WIN_FX[PNUWID]-WIN_AX[NUWID]
 ENDIF
 E1=WIN_RY[NUWID]+WIN_HEIGHT[NUWID]
 E2=WIN_RY[PNUWID]+WIN_AH[PNUWID]
 WIN_AH[NUWID]=WIN_HEIGHT[NUWID]

 IF E1>E2 THEN
  DEC WIN_AH[NUWID],E1-E2
 ENDIF
 IF WIN_AY[NUWID]<WIN_FY[PNUWID]THEN
 WIN_AH[NUWID]=WIN_HEIGHT[NUWID]
  DEC WIN_AH[NUWID],WIN_FY[PNUWID]-WIN_AY[NUWID]
 ENDIF
' STOP
' WIN_AH[NUWID]=WIN_HEIGHT[NUWID]
' IF WIN_AX[PNUWID]>WIN_RX[NUWID]THEN
' WIN_RX[NUWID]=WIN_AX[PNUWID]
'ENDIF
'IF WIN_AY[PNUWID]>WIN_RY[NUWID]THEN
' WIN_RY[NUWID]=WIN_AY[PNUWID]
'ENDIF
'IALOG STR$(WIN_FX[PNUWID]-WIN_AX[NUWID])
 IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK)THEN
' GFILL WIN_RX[NUWID],WIN_RY[NUWID],WIN_RX[NUWID]+WIN_AW[NUWID],WIN_RY[NUWID]+WIN_AH[NUWID],0
 ENDIF
 VAR E=FrontWindow(WND)
 IF E THEN RETURN E
 'WHILE 1
' 
'WEND
 NXT=WIN_CHILD[WIN_PARENT[NUWID]]
 VOID RepaintWindow(WIN_PARENT[NUWID]OR(WIN_WID[WIN_PARENT[NUWID]]<<WIDSHIFT))

 IF!NXT THEN RETURN'WIN_
 B=NXT
 IF WIN_PARENT[NUWID]==(WIN_ROOTWND AND NUWIDMASK) THEN
  IF WIN_SP[NUWID]THEN
   WIN_SP[NUWID]=WIN_SP[NUWID] OR 512
  ENDIF
 ENDIF
 OTW_DrawMap WIN_PARENT[NUWID]
 WHILE NXT
  VOID RepaintWindow(NXT OR(WIN_WID[NXT]<<WIDSHIFT))
  OTW_DrawMap NXT
  IF WIN_CHILD[NXT]THEN
   B=WIN_CHILD[NXT]
   VAR MVF=NUWID==NXT
   WHILE B
    IF MVF THEN
     WIN_AX[B]=WIN_AX[B]+MX
     WIN_AY[B]=WIN_AY[B]+MY
     WIN_FX[B]=WIN_FX[B]+MX
     WIN_FY[B]=WIN_FY[B]+MY
     WIN_RFX[B]=WIN_RFX[B]+MX
     WIN_RFY[B]=WIN_RFY[B]+MY
     WIN_RX[B]=WIN_RX[B]+MX
     WIN_RY[B]=WIN_RY[B]+MY
    ENDIF
    VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
    OTW_DrawMap B
    IF!WIN_NEXT[B]THEN
     WHILE B
      B=WIN_PARENT[B]
      IF B==NXT THEN BREAK
      IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
     WEND
     IF B==NXT THEN BREAK
    ENDIF
    IF WIN_CHILD[B]THEN
     B=WIN_CHILD[B]
     CONTINUE
    ENDIF
    B=WIN_NEXT[B]
    IF B==NXT THEN BREAK
   WEND
  ENDIF
  NXT=WIN_NEXT[NXT]
'  IF NXT==NUWID THEN BREAK
 WEND

RETURN 0
 NXT=WIN_CHILD[NUWID]:B=NXT
 VAR PAX2=WIN_X[NUWID]+WIN_AW[NUWID]
 VAR PAY2=WIN_Y[NUWID]+WIN_AH[NUWID]
 WHILE B
  VAR S=WIN_WIDTH[B]-WIN_AW[B]
  
  WIN_AX[B]=WIN_AX[B]+MX
  WIN_AY[B]=WIN_AY[B]+MY
  WIN_FX[B]=WIN_FX[B]+MX
  WIN_FY[B]=WIN_FY[B]+MY
  WIN_RFX[B]=WIN_RFX[B]+MX
  WIN_RFY[B]=WIN_RFY[B]+MY
  WIN_RX[B]=WIN_RX[B]+MX
  WIN_RY[B]=WIN_RY[B]+MY
  VOID RepaintWindow(B OR(WIN_WID[B]<<WIDSHIFT))
  OTW_DrawMap B
  IF WIN_CHILD[B]THEN
   B=WIN_CHILD[B]
   CONTINUE
  ENDIF
  IF!WIN_NEXT[B]THEN
   WHILE B
    B=WIN_PARENT[B]
    IF B==NUWID THEN BREAK
    IF WIN_NEXT[B]THEN B=WIN_NEXT[B]:BREAK
   WEND
   IF B==NUWID THEN BREAK
  ENDIF
  B=WIN_NEXT[B]
  IF B==NUWID THEN BREAK
 WEND

 RETURN 0
END
COMMON DEF SendWindowEvent(WND,TYPE,A1,A2)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF(WIN_MSGS[NUWID]+1)MOD WIN_MSGMAX==WIN_MSGE[NUWID] THEN RETURN WIN_EVENTERR
 IF!LEN(CTL_HANDLER$[WIN_CTL[NUWID]AND 4095,TYPE])THEN RETURN 0
 IF CTL_NDHNDLR[TYPE]THEN
  IF WIN_MSGCNT[NUWID,TYPE]THEN RETURN 0
  INC WIN_MSGCNT[NUWID,TYPE]
 ENDIF
 WIN_MSGBUF[NUWID,WIN_MSGS[NUWID],0]=TYPE
 WIN_MSGBUF[NUWID,WIN_MSGS[NUWID],1]=A1
 WIN_MSGBUF[NUWID,WIN_MSGS[NUWID],2]=A2
 INC WIN_MSGS[NUWID]
 IF WIN_MSGS[NUWID]>=WIN_MSGMAX THEN WIN_MSGS[NUWID]=0
 RETURN 0
END
COMMON DEF RepaintWindow(WND)
 RETURN SendWindowEvent(WND,CTL_PAINTHANDLER,0,0)
END
COMMON DEF SendNotificationWindow(WND,DAT,DAT2)
 RETURN SendWindowEvent(WND,CTL_NOTIFHANDLER,DAT,DAT2)
END
COMMON DEF SendKeyWindow(WND,KEY)
 RETURN SendWindowEvent(WND,CTL_KEYHANDLER,KEY,0)
END
COMMON DEF SendButtonWindow(WND,BTN)
 RETURN SendWindowEvent(WND,CTL_BTNHANDLER,BTN,0)
END
COMMON DEF SendChFocusWindow(WND,FLG)
 RETURN SendWindowEvent(WND,CTL_CHFOCUSHANDLER,FLG,0)
END
DEF MouseMoveWindow(NUWID)
 RETURN SendWindowEvent(NUWIDToWND(NUWID),CTL_MOUSEMVHANDLER,OTW_MOUSEX-WIN_AX[NUWID]-WIN_FW1[NUWID],OTW_MOUSEY-WIN_AY[NUWID]-WIN_FH1[NUWID])
END
DEF LMouseUpWindow(WND)
 VAR NUWID=WND AND NUWIDMASK
 RETURN SendWindowEvent(WND,CTL_LBTNUPHANDLER,OTW_MOUSEX-WIN_AX[NUWID]-WIN_FW1[NUWID],OTW_MOUSEY-WIN_AY[NUWID]-WIN_FH1[NUWID])
END
DEF LMouseDownWindow(WND)
 VAR NUWID=WND AND NUWIDMASK
 RETURN SendWindowEvent(WND,CTL_LBTNDWNHANDLER,OTW_MOUSEX-WIN_AX[NUWID]-WIN_FW1[NUWID],OTW_MOUSEY-WIN_AY[NUWID]-WIN_FH1[NUWID])
END
DEF LMouseDownWindowOnFrame(WND)
 VAR NUWID=WND AND NUWIDMASK
 RETURN SendWindowEvent(WND,CTL_FRMBTNHANDLER,CTL_LBTNFLG OR CTL_BTNDWNFLG,JoinInt(OTW_MOUSEX-WIN_AX[NUWID],OTW_MOUSEY-WIN_AY[NUWID]))
END
DEF LMouseUpWindowOnFrame(WND)
 VAR NUWID=WND AND NUWIDMASK
 RETURN SendWindowEvent(WND,CTL_FRMBTNHANDLER,CTL_LBTNFLG OR CTL_BTNUPFLG,JoinInt(OTW_MOUSEX-WIN_AX[NUWID],OTW_MOUSEY-WIN_AY[NUWID]))
END
COMMON DEF CallBaseControlHandler(WND,CTL,TYPE,A1,A2)
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID
 CTL=CTL_PARENTCTL[CTL AND 4095]
 IF!CheckControl(CTL)THEN RETURN CTL_INVALIDID 
 CALL CTL_HANDLER$[CTL AND 4095,TYPE],WND,CTL,TYPE,A1,A2
 RETURN 0
END
COMMON DEF PeekWindowEvent(WND)
 IF!CheckWindow(WND)THEN RETURN -1
 VAR NUWID=WND AND NUWIDMASK
 IF WIN_MSGS[NUWID]==WIN_MSGE[NUWID]THEN RETURN -1
 RETURN WIN_MSGBUF[NUWID,WIN_MSGE[NUWID],0]
END
COMMON DEF UpdateWindowOnly(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF WIN_MSGS[NUWID]==WIN_MSGE[NUWID]THEN RETURN 0
 VAR NUCID=WIN_CTL[NUWID] AND 4095
 VAR S=WIN_MSGE[NUWID]
 VAR TYPE=WIN_MSGBUF[NUWID,S,0]
 CALL CTL_HANDLER$[NUCID,TYPE],WND,WIN_CTL[NUWID],TYPE,WIN_MSGBUF[NUWID,S,1],WIN_MSGBUF[NUWID,S,2]
 IF WIN_WID[NUWID]<=0THEN RETURN WIN_INVALIDID
 INC WIN_MSGE[NUWID]
 IF WIN_MSGE[NUWID]>=WIN_MSGMAX THEN WIN_MSGE[NUWID]=0
 IF WIN_BEGIN[NUWID]THEN VOID GEndWindow(WND)
 IF CTL_NDHNDLR[TYPE]THEN
  DEC WIN_MSGCNT[NUWID,TYPE]
 ENDIF
 RETURN 0
END
COMMON DEF UpdateWindow(WND)
 VAR E=UpdateWindowOnly(WND)
 VAR NUWID=WND AND NUWIDMASK
 IF E THEN RETURN E
 @END
 VAR B=WIN_CHILD[NUWID]
 VAR DB=B,PB=NUWID
 WHILE B
  IF B==NUWID THEN BREAK
  E=UpdateWindowOnly(B OR WIN_WID[B]<<WIDSHIFT)
  IF E THEN B=DB
  IF!B THEN B=PB
  IF WIN_CHILD[B]THEN
   B=WIN_CHILD[B]
   CONTINUE
  ENDIF
  IF!WIN_NEXT[B]THEN
   WHILE B
    B=WIN_PARENT[B]
    IF B==NUWID THEN BREAK
    IF WIN_NEXT[B]THEN BREAK
   WEND
   IF!B THEN BREAK
   IF B==NUWID THEN BREAK
   PB=B
   B=WIN_NEXT[B]
   CONTINUE
  ENDIF
  DB=B
  B=WIN_NEXT[B]
 WEND 
 RETURN 0
END

DEF GetWindowFrameWidth(WND)
 RETURN WIN_WIDTH[WND AND NUWIDMASK]
END
DEF GetWindowFrameHeight(WND)
 RETURN WIN_FHEIGHT1
END
common def GetWindowName$(wnd)
 return win_name$[wnd and nuwidmask]
end
common def SetWindowName wnd,name$
 win_name$[wnd and nuwidmask]=name$
end
COMMON DEF GetWindowWidth(WND)
 IF!CheckWindow(WND)THEN RETURN -1
 RETURN WIN_WIDTH[WND AND NUWIDMASK]-WIN_FW2[WND AND NUWIDMASK]
END
COMMON DEF GetWindowHeight(WND)
 IF!CheckWindow(WND)THEN RETURN -1
 RETURN WIN_HEIGHT[WND AND NUWIDMASK]-WIN_FH2[WND AND NUWIDMASK]
END
COMMON DEF GetWindowVar(WND,I)
 RETURN WIN_VAR[WND AND NUWIDMASK,I]
END
COMMON DEF SetWindowVar WND,I,V
 WIN_VAR[WND AND NUWIDMASK,I]=V
END
COMMON DEF IsActiveWindow(WND)
 RETURN(WND AND NUWIDMASK)==WIN_ACTIVENUWID
END
VAR WIN_DRAGHANDLER$
VAR WIN_DRAGHANDLER_A1
VAR WIN_DRAGHANDLER_A2
VAR WIN_DRAGHANDLER_USE
VAR WIN_DRAGHANDLER_WND
VAR WIN_DRG_USE
VAR WIN_DRG_NUSE
DEF SetWindowDragHandler(NAME$,WND,A1,A2)
 IF WIN_DRAGHANDLER_USE&&CheckWindow(WIN_DRAGHANDLER_WND)THEN
  RETURN WIN_DRG_USE
 ENDIF
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 WIN_DRAGHANDLER_USE=TRUE
 WIN_DRAGHANDLER$=NAME$
 WIN_DRAGHANDLER_A1=A1
 WIN_DRAGHANDLER_A2=A2
 WIN_DRAGHANDLER_WND=WND
 RETURN 0
END
DEF ClearWindowDragHandler()
 IF!WIN_DRAGHANDLER_USE THEN RETURN WIN_DRG_NUSE
 WIN_DRAGHANDLER_USE=FALSE
 WIN_DRAGHANDLER$=""
 WIN_DRAGHANDLER_A1=0
 WIN_DRAGHANDLER_A2=0
 WIN_DRAGHANDLER_WND=0
 RETURN 0
END
VAR OTW_MOUSECLIPX
VAR OTW_MOUSECLIPY
VAR OTW_MOUSECLIPX2
VAR OTW_MOUSECLIPY2
DEF MouseClip X,Y,W,H
 OTW_MOUSECLIPX=X
 OTW_MOUSECLIPY=Y
 OTW_MOUSECLIPX2=W+X
 OTW_MOUSECLIPY2=H+Y
END
DEF MouseClipDef
 MouseClip 0,0,400,240
END
COMMON DEF GetTextWidth(STR$)
 RETURN LEN(STR$)*8
END
COMMON DEF GetParentWindow(WND)
 IF!CheckWindow(WND)THEN
  RETURN 0
 ENDIF
 RETURN NUWIDToWND(WIN_PARENT[WND AND NUWIDMASK])
END
''WINDOW GRAPHIC
COMMON DEF GBeginWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF WIN_BEGIN[NUWID]==1THEN RETURN WIN_EVENTERR
 IF WIN_BEGIN[NUWID]==2THEN RETURN 0
 WIN_BEGIN[NUWID]=TRUE
 VAR AX=WIN_RFX[NUWID]'WIN_FW1[NUWID]
 VAR AY=WIN_RFY[NUWID]'WIN_FH1[NUWID]
 VAR W=WIN_AW[NUWID]
 VAR H=WIN_AH[NUWID]
 GPAGE OTW_SP,OTW_BP
 GCLIP 1,AX,AY,AX+W,AY+H
 IF WIN_BEGIN[NUWID]==2THEN RETURN 0
 GCLS
 RETURN 0
END
DEF ReGBeginWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 INC WIN_BEGIN[NUWID]
 VAR AX=WIN_RFX[NUWID]'WIN_FW1[NUWID]
 VAR AY=WIN_RFY[NUWID]':IN_FH1[NUWID]
 VAR W=WIN_AW[NUWID]
 VAR H=WIN_AH[NUWID]
 GPAGE OTW_SP,OTW_BP
 GCLIP 1,AX,AY,AX+W,AY+H
 RETURN 0
END
DEF GBeginFrameWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF WIN_BEGIN[NUWID]THEN RETURN WIN_EVENTERR
 WIN_BEGIN[NUWID]=TRUE
 VAR AX=WIN_RX[NUWID]
 VAR AY=WIN_RY[NUWID]
 VAR W=WIN_WIDTH[NUWID]
 VAR H=WIN_HEIGHT[NUWID]
 GPAGE OTW_SP,OTW_BP
 GCLIP 1,AX,AY,AX+W,AY+H
 GCLS RGB(224,224,224)
 RETURN 0
END
COMMON DEF GEndWindow(WND)
 IF!CheckWindow(WND)THEN RETURN WIN_INVALIDID
 VAR NUWID=WND AND NUWIDMASK
 IF!WIN_BEGIN[NUWID]THEN RETURN WIN_EVENTERR
 'ごうせい
 WIN_PARENT[0]=0
 WIN_NEXT[0]=0
 WIN_BEGIN[NUWID]=FALSE
 VAR AX=WIN_RX[NUWID]
 VAR AY=WIN_RY[NUWID]
 VAR W=WIN_AW[NUWID]
 VAR H=WIN_AH[NUWID]
 GCLIP 1,AX,AY,AX+W,AY+H
 VAR PNUWID
 IF WIN_CHILD[NUWID]THEN
  PNUWID=WIN_CHILD[NUWID]
  WHILE PNUWID
   GCOPY OTW_DP,WIN_RX[PNUWID],WIN_RY[PNUWID],WIN_RX[PNUWID]+WIN_AW[PNUWID],WIN_RY[PNUWID]+WIN_AH[PNUWID],WIN_RX[PNUWID],WIN_RY[PNUWID],0

   PNUWID=WIN_NEXT[PNUWID]
  WEND
 ENDIF
 VAR _NUWID=NUWID
 PNUWID=WIN_NEXT[NUWID]
 WHILE TRUE
  IF!PNUWID THEN
   PNUWID=WIN_PARENT[_NUWID]
   IF!PNUWID THEN BREAK
   _NUWID=PNUWID
   PNUWID=WIN_NEXT[PNUWID]
   CONTINUE
  ENDIF
   GCOPY OTW_DP,WIN_RX[PNUWID],WIN_RY[PNUWID],WIN_RX[PNUWID]+WIN_AW[PNUWID],WIN_RY[PNUWID]+WIN_AH[PNUWID],WIN_RX[PNUWID],WIN_RY[PNUWID],0
  _NUWID=PNUWID
  PNUWID=WIN_NEXT[PNUWID]
 WEND
 GPAGE OTW_SP,OTW_DP
 GCLIP 1,0,0,400,240
 GCOPY OTW_BP,AX,AY,AX+W,AY+H,AX,AY,0
 IF WIN_SP[NUWID]AND 512THEN OTW_SPCHR NUWID
 RETURN 0
END
DEF OTW_SPCHR NUWID
 SPCHR WIN_SP[NUWID] AND 511,WIN_AX[NUWID],WIN_AY[NUWID],WIN_WIDTH[NUWID]+1,WIN_HEIGHT[NUWID]+1,1
 SPOFS WIN_SP[NUWID] AND 511,WIN_AX[NUWID],WIN_AY[NUWID]
END
COMMON DEF GPSETWindow WND,X,Y,COL
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 GPSET X+AX,Y+AY,COL
END
COMMON DEF GCLSWindow WND,COL
 GCLS COL
END
COMMON DEF GFILLWindow WND,X,Y,X2,Y2,COL
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 GFILL X+AX,Y+AY,X2+AX,Y2+AY,COL
END
COMMON DEF GBOXWindow WND,X,Y,X2,Y2,COL
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 GBOX X+AX,Y+AY,X2+AX,Y2+AY,COL
END
COMMON DEF GLINEWindow WND,X,Y,X2,Y2,COL
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 GLINE X+AX,Y+AY,X2+AX,Y2+AY,COL
END
COMMON DEF GCIRCLEWindow WND,X,Y,R,COL
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 GCIRCLE X+AX,Y+AY,R,COL
END
COMMON DEF GLOADWindow WND,X,Y,W,H,IMG[],FLG,MODE
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 GLOAD X+AX,Y+AY,W,H,IMG,FLG,MODE
END
COMMON DEF GPRINTWindowCC WND,X,Y,STR$,PAL
 GPRINTWindow WND,X,Y,STR$,OTW_CONSOLEPAL[PAL]
END
COMMON DEF GLINEArrayMemory PTR,W,H,X,Y,X2,Y2,COL
'COL=RGBToShort(COL)
 DIM M[0]
 M=GetRawMemory()
 VAR I
 VAR DX=ABS(X2-X)
 VAR DY=ABS(Y2-Y)
 VAR SX,SY
 IF X<X2 THEN SX=1 ELSE SX=-1
 IF Y<Y2 THEN SY=1 ELSE SY=-1
 VAR ERR=DX-DY
 VAR E2
 WHILE 1
  IF X<W&&Y<H&&X>=0&&Y>=0THEN M[PTR+X+Y*W]=COL
  IF X==X2&&Y==Y2 THEN RETURN
  E2=2*ERR
  IF E2>-DY THEN
   DEC ERR,DY
   INC X,SX
  ENDIF
  IF E2<DX THEN
   INC ERR,DX
   INC Y,SY
  ENDIF
 WEND
END
COMMON DEF GPRINTWindow WND,X,Y,STR$,COL
 VAR L=LEN(STR$)-1,A,I
 FOR I=0TO L
  A=ASC(STR$[I])
  GPUTCHRWindow WND,X,Y,A,COL
  INC X,8
 NEXT
END
DIM OTW_FNTTMP[0]
COMMON DEF GPUTCHRWindow WND,X,Y,A,COL
 VAR AX=WIN_FX[WND AND NUWIDMASK]
 VAR AY=WIN_FY[WND AND NUWIDMASK]
 X=X+AX:Y=Y+AY
 OTW_FNTPAL[0]=0
 OTW_FNTPAL[1]=COL
 COPY OTW_FNTTMP,0,OTW_FNT,64*OTW_FNTTBL[A],64
 VAR I
 GLOAD X,Y,8,8,OTW_FNTTMP,OTW_FNTPAL,0
END
DEF DesktopPainter WND,CTL,TYPE,A1,A2
RETURN
 VAR E=GBEGINWindow(WND)
 IF E THEN RETURN
 GFILLWindow WND,0,0,32,32,RGB(255,0,0)
 E=GENDWindow(WND)
END
DEF WindowPainter WND,CTL,TYPE,A1,A2
 VAR E=GBeginFrameWindow(WND)
 IF E THEN RETURN
 GFILLWindow WND,0,-GetWindowFrameHeight(WND),GetWindowFrameWidth(WND),-1,RGB(0,0,255)
 GPRINTWindowCC WND,1,-GetWindowFrameHeight(WND)+1,GetWindowName$(WND),15
 VAR H=GetWindowFrameHeight(WND)
 VAR W=GetWindowFrameWidth(WND)
 VAR C=RGB(224,224,224)
 GFILLWindow WND,W-09,-H,W,-1,RGB(224,0,0)
 GLINEWindow WND,W-08,-H+2,W-2,-2,C
 GLINEWindow WND,W-7,-H+2,W-1,-2,C
 GLINEWindow WND,W-2,-H+2,W-8,-2,C
 GLINEWindow WND,W-1,-H+2,W-7,-2,C
 E=ReGBeginWindow(WND)
' E=GEndWindow(WND)
END
DEF WindowLMouseUP WND,CTL,TYPE,A1,A2
 VAR E=FrontWindow(WND)
END
DEF WindowClickFrame WND,CTL,TYPE,BTN,POS
 VAR X,Y
 SplitInt POS OUT X,Y
 VAR W=GetWindowFrameWidth(WND)
 IF X>=W-9THEN
  IF BTN AND CTL_BTNUPFLG THEN
   VAR E=DeleteWindow(WND)
  ENDIF
  RETURN
 ENDIF
 IF BTN AND CTL_LBTNFLG THEN
  VAR NUWID=WND AND NUWIDMASK
  IF BTN AND CTL_BTNDWNFLG THEN
   VAR AX=WIN_AX[NUWID]
   VAR AY=WIN_AY[NUWID]
   INC X,AX
   INC Y,AY
   IF SetWindowDragHandler("WindowDragFrame",WND,AX-X,AY-Y)THEN RETURN
   SPSHOW OTW_MOVWINSP
   SPSCALE OTW_MOVWINSP,WIN_WIDTH[NUWID]+1,WIN_HEIGHT[NUWID]+1
   SPCOLOR OTW_MOVWINSP,RGB(128,80,208,255)
   SPOFS OTW_MOVWINSP,AX-X,AY-Y,-256
   SPLINK OTW_MOVWINSP,OTW_MOUSESP
   SPVAR OTW_MOVWINSP,1,NUWID
   SPVAR OTW_MOVWINSP,2,AX-X
   SPVAR OTW_MOVWINSP,3,AY-Y
   VAR PNUWID=WIN_PARENT[NUWID]
   MouseClip WIN_FX[PNUWID],WIN_FY[PNUWID],WIN_WIDTH[PNUWID]-WIN_FW2[PNUWID],WIN_HEIGHT[PNUWID]-WIN_FH2[PNUWID]
  ENDIF
 ENDIF
END
DEF WindowDragFrame WND,MX,MY,A1X,A2Y
 'VAR NUWID=WND AND NUWIDMASK
 VAR X=MX+A1X
 VAR Y=MY+A2Y
 VAR E=MoveWindow(WND,X,Y)
 SPHIDE OTW_MOVWINSP
 SPUNLINK OTW_MOVWINSP
 MouseClipDef
END
DEF ButtonPainter W,C,T,A1,A2
 VAR E=GBeginWindow(W)
 IF E THEN RETURN
 VAR HE=GetWindowHeight(W)
 VAR WI=GetWindowWidth(W)
 VAR NA$=GetWindowName$(W)
 GFILLWindow W,0,0,WI,HE,RGB(192,192,192)
 GBOXWindow W,0,0,WI,HE,RGB(0,0,0)
 GPRINTWindow W,(WI-GetTextWidth(NA$))/2,(HE-6)/2,NA$,RGB(0,0,0)
 E=GEndWindow(W)
END
DEF ButtonLMouseUP W,C,T,X,Y
 VAR E=SendNotificationWindow(GetParentWindow(W),W,GetWindowVar(W,0))
END
'PlainTextBox
DEF TextBoxPainter W,C,T,A1,A2
 VAR E=GBeginWindow(W)
 IF E THEN RETURN
 VAR HE=GetWindowHeight(W)
 VAR WI=GetWindowWidth(W)
 VAR NA$=GetWindowName$(W)
 VAR CX=GetWindowVar(W,1)
 GFILLWindow W,0,0,WI,HE,-1
 GPRINTWindow W,1,1,NA$,RGB(0,0,0)
 IF IsActiveWindow(W)THEN
  GFILLWindow W,CX*8,6,CX*8+8,7,RGB(0,0,0)
 ENDIF
 GBOXWindow W,0,0,WI,HE,RGB(0,0,0)
 E=GEndWindow(W)
END
DEF TextBoxLMouseDown W,C,T,X,Y
END
DEF TextBoxChFocus W,C,T,X,Y
 TextBoxPainter W,C,T,0,0
END
DEF TextBoxKey W,C,T,KEY,A2
 VAR K$=CHR$(KEY)
 VAR CX=GetWindowVar(W,1)
 VAR T$=GetWindowName$(W)
 IF K$==BS$()THEN
  IF CX THEN
   SetWindowName W,RemoveStr$(T$,CX-1,1)
   SetWindowVar W,1,CX-1
  ENDIF
 ELSE
  SetWindowName W,InsertStr$(T$,CX,K$)
  SetWindowVar W,1,CX+1
 ENDIF
 TextBoxPainter W,C,T,0,0
END
DEF TextBoxButton W,C,T,B,A2
 VAR F=GetWindowVar(W,2)
 VAR M=MAINCNT
 IF M-F>10THEN
  SetWindowVar W,2,M
  VAR CX=GetWindowVar(W,1)
  IF B AND 4&&CX THEN
   SetWindowVar W,1,CX-1
   TextBoxPainter W,C,T,0,0
  ENDIF
  IF B AND 8THEN
   IF LEN(GetWindowName$(W))>CX THEN
    SetWindowVar W,1,CX+1
    TextBoxPainter W,C,T,0,0
   ENDIF
  ENDIF
 ENDIF
 
' BEEP
END
VAR OTW_MOUSESIZE
DEF OTW_INITSP
 GPSET 408,0,-1
 SPDEF 0,408,0,1,1,1
 VAR FORE=RGB(0,0,0)
 VAR BACK=RGB(255,255,255)
 GCOLOR FORE
 VAR SC#=1,B=416
 GFILL B,0,B+10*SC#,18*SC#,0
 GLINE B,0*SC#,B,14*SC#
 GLINE B,0*SC#,B+10*SC#,10*SC#
 GLINE B,14*SC#,B+3*SC#,11*SC#
 GLINE B+6*SC#,16*SC#,B+3*SC#,11*SC#
 GLINE B+10*SC#,10*SC#,B+6*SC#,10*SC#
'GLINE B+6*SC#,10*SC#,B+8*SC#,15*SC#
 GLINE B+6*SC#,10*SC#,B+8*SC#,15*SC#
 GLINE B+6*SC#,16*SC#,B+7*SC#,16*SC#'7,16
 GPAINT B+1*SC#,2*SC#,BACK,FORE
 SPDEF 290,B,0,10*SC#,17*SC#
END
VAR WIN_ROOTCTL
VAR TSTWND,TSTCTL
VAR TSTWND2
VAR TSTWND3

VAR OTW_MOUSELBTN
VAR OTW_MOUSERBTN
VAR OTW_LMOUSEDWN
VAR OTW_LMOUSEUP
VAR OTW_RMOUSEDWN
VAR OTW_RMOUSEUP
VAR OTW_CNT,OTW_FPS,OTW_FPSCNT
VAR OTW_FCNT,OTW_FPF#,OTW_FPFCNT
VAR OTW_KX
VAR OTW_KY
VAR OTW_KX2
VAR OTW_KY2
VAR OTW_USEBTN
COMMON DEF I_OTW
 IF!OTW_INIT THEN
  VAR FM=FREEMEM
  PrintConsole "====================="+LF$()
  PrintConsole "OTYA 3D WINDOW SYSTEM"+LF$()
  PrintConsole "====================="+LF$()
  PrintConsole "Ver 5.0-B"+LF$()
  BEEP 94,-1000
  PrintConsole "Loading font..."+LF$()
  OTW_LOADFONT
  PrintConsole "Init..........."+LF$()
  OTWRunning=TRUE
  OTW_USEBTN=&B11001111
  OTW_FPS=1
  OTW_FPSCNT=1
  OTW_FPF#=1
  OTW_FPFCNT=1
  'ACLS
  OTW_DP=4
  OTW_SP=0
  OTW_BP=1
  OTW_GP=2
  MouseClipDef
  GPAGE OTW_SP,OTW_SP
  GPRIO 1023
  GCLS
  GCLS RGB(0,192,0)
  GCLS 
  VAR I,J
' FOR J=0TO 2
'  FOR I=0TO 240/4
'  GLINE 0,I+60*J,400,I+60*J,&HFF000000 OR(I*8<<J*8)XOR &HFFFFFF'RGB(0,I*4,0)
'    GLINE 0,I+60*J,400,I+60*J,RGB(0,I*4,I*4) '
 ' NEXT
' NEXT
  GCLS 
  FOR I=-400TO 400 STEP 2
   GLINE I,0,I+400,400,RGB(0,255,0)'RGB(255,255,255)
  NEXT
  GPAGE OTW_SP,OTW_DP
  GPRIO 1023
  GCLS RGB(0,192,128)
' GCLS RGB(0,0,255)
GCLS 
  OTW_INITSP
  GPRIO 1023
  GOTO @_
  XSCREEN 2,512,2
  DISPLAY 1
  CLS
  VISIBLE 1,0,1,0
  LOCATE 0,25
  ?":LEFT CLICK"
  ?":RIGHT CLICK(UNUSED)"
  ?"TOUCH:CURSOR
  BGSCREEN 0,25,15
  BGSCALE 0,19.5/25,19.5/25'1
  GCLS 'RGB(255,0,0)
  BACKCOLOR RGB(0,192,128)
  VAR X,Y
  I=0
  FOR Y=0TO 14
   FOR X=0TO 24
    BGPUT 0,X,Y,I
    INC I
   NEXT
  I=I+7
  NEXT
  BGPAGE OTW_DP
  VAR K$="KEYBOARD"
  OTW_KX=39*8
  OTW_KY=0
  OTW_KX2=40*8
  OTW_KY2=LEN(K$)*8
  ATTR 1
  FOR I=0TO LEN(K$)-1
   COLOR 15,8
   LOCATE 39,I
   ?K$[I];
  NEXT
  COLOR 15,0
  ATTR 0
  DISPLAY 0
  @_
  OTW_INIT=TRUE
  OTW_WIN_INITARRAY
  OTW_CTL_INITARRAY
  OTW_INIT_ERR
  VAR E
  NewControl "DESKTOP" OUT WIN_ROOTCTL,E
  E=SetControlPainter(WIN_ROOTCTL,"DesktopPainter")
  NewTopLevelWindow WIN_ROOTCTL,"DESKTOP",400,240 OUT WIN_ROOTWND,E
  ExtendControl "HELLO",GetWindowControl() OUT TSTCTL,E
' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND,E
' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND2,E
' NewTopLevelWindow TSTCTL,"HELLO",64,64 OUT TSTWND3,E
  E=SetControlPainter(TSTCTL,"HELLOPainter")
  GCLIP 1,0,0,400,240
  VISIBLE 1,1,1,1
  OTW_MOUSEX=(400-16)/2
  OTW_MOUSEY=(240-16)/2
  OTW_MOUSEX#=(400-16)/2
  OTW_MOUSEY#=(240-16)/2
  
  OTW_MOUSELBTN=32OR 256
  OTW_MOUSERBTN=16OR 512
  OTW_LMOUSEDWN=1
  OTW_LMOUSEUP =2
  OTW_RMOUSEDWN=4
  OTW_RMOUSEUP =8
  
  '290
  SPSET OTW_MOUSESP,290
  SPVAR 0,0,1
  SPOFS OTW_MOUSESP,OTW_MOUSEX,OTW_MOUSEY,-256
  SPHOME OTW_MOUSESP,0,0
  SPCOL 0,0,0,1,1
  OTW_MOVWINSP=1
  SPSET OTW_MOVWINSP,290
  SPLINK OTW_MOVWINSP,OTW_MOUSESP
  SPOFS OTW_MOVWINSP,-2,2,-00
  SPCOLOR OTW_MOVWINSP,RGB(128,0,0,0)
  SPVAR OTW_MOVWINSP,0,1
  OTW_MOVWINSP=2
  SPSET OTW_MOVWINSP,0
  SPHIDE OTW_MOVWINSP
  SPVAR OTW_MOVWINSP,0,1
  CLS
  LOCATE 0,29
  NewProcess"LAUNCHER","" OUT E,E,E
  DEC FM,FREEMEM
  PrintConsole FORMAT$("UsingMemory8192KB/%DKB",FM/1024)+LF$()
 ENDIF
RETURN
END
COMMON DEF HELLOPainter WND,CTL,TYPE,A1,A2
 VAR E=CallBaseControlHandler(WND,CTL,TYPE,A1,A2)
 E=GBEGINWindow(WND)
 IF E THEN RETURN
 GFILLWindow WND,0,0,64,64,RGB(224,224,224)'RGB(0,0,0)
 VAR S$="HELLOWORLD",I
 FOR I=0TO LEN(S$)-1
  GPRINTWindowCC WND,6+I*8,1,S$[I],I
 NEXT
 E=GENDWindow(WND)
END
VAR OTW_OLDMOUSEX
VAR OTW_OLDMOUSEY
DEF OTWGetOvMouseNUWID()
 RETURN RGBToShort(GSPOIT(OTW_MOUSEX,OTW_MOUSEY+240))
END
VAR OTW_OLDLMOUSE
VAR OTW_OLDRMOUSE
VAR OTW_FDIFF
VAR OTW_OLDBTN
VAR OTW_OLDBTNF
COMMON DEF L_OTW
 VAR MOVEMOUSE
 UpdateMouse
 IF OTW_MOUSEX!=OTW_OLDMOUSEX THEN MOVEMOUSE=1
 IF OTW_MOUSEY!=OTW_OLDMOUSEY THEN MOVEMOUSE=1
 VAR NUWID,E
 VAR BTN=UpdateButton()
 IF MOVEMOUSE||BTN THEN
  NUWID=OTWGetOvMouseNUWID()
 ENDIF
 IF BTN THEN
  IF BTN AND OTW_LMOUSEDWN THEN
   VAR OA=WIN_ACTIVENUWID
   WIN_ACTIVENUWID=NUWID
   IF NUWID AND WIN_FRAMEFLG THEN
    E=LMouseDownWindowOnFrame(NUWIDToWND(NUWID AND 32767))
    
    WIN_ACTIVENUWID=NUWID AND 32767
   ELSE
    E=LMouseDownWindow(NUWIDToWND(NUWID))
   ENDIF
   IF WIN_ACTIVENUWID!=OA THEN
    E=SendChFocusWindow(NUWIDToWND(OA),FALSE)
    E=SendChFocusWindow(NUWIDToWND(WIN_ACTIVENUWID),TRUE)
   ENDIF
  ENDIF
  IF BTN AND OTW_LMOUSEUP THEN
   IF WIN_DRAGHANDLER_USE THEN
    CALL WIN_DRAGHANDLER$,WIN_DRAGHANDLER_WND,OTW_MOUSEX,OTW_MOUSEY,WIN_DRAGHANDLER_A1,WIN_DRAGHANDLER_A2
    E=ClearWindowDragHandler()
   ELSE
    IF NUWID AND WIN_FRAMEFLG THEN
     E=LMouseUpWindowOnFrame(NUWIDToWND(WIN_ACTIVENUWID))
    ELSE
     E=LMouseUpWindow(NUWIDToWND(WIN_ACTIVENUWID))
    ENDIF
   ENDIF
  ENDIF
 ENDIF
 IF MOVEMOUSE THEN
  IF!(NUWID AND WIN_FRAMEFLG)THEN
   E=MouseMoveWindow(NUWID)
  ENDIF
 ENDIF
' IF BUTTON()AND 64THEN DUMP_WND
 OTW_OLDMOUSEX=OTW_MOUSEX
 OTW_OLDMOUSEY=OTW_MOUSEY
 VAR K$=INKEY$()
 IF LEN(K$)THEN
  E=SendKeyWindow(NUWIDToWND(WIN_ACTIVENUWID),ASC(K$))
 ENDIF
 VOID UpdateWindowOnly(WIN_ROOTWND)
'E=UpdateWindow(TSTWND2)
'E=UpdateWindow(TSTWND)
'E=UpdateWindow(TSTWND3)
 OTW_FDIFF=MAINCNT-OTW_FCNT
 IF OTW_FDIFF>1 THEN
  OTW_FPF#=OTW_FPFCNT
  IF!OTW_FPFCNT THEN
   OTW_FPF#=1.0/OTW_FDIFF
   IF OTW_FPF#<0.3THEN OTW_FPF#=0.333
  ENDIF
  OTW_FPFCNT=0
  OTW_FCNT=MAINCNT
 ELSE
  INC OTW_FPFCNT
 ENDIF
 OTW_FDIFF=MAINCNT-OTW_CNT
 IF OTW_FDIFF>60 THEN
  OTW_FPS=OTW_FPSCNT
  OTW_FPSCNT=0
  '?OTW_FPS
  OTW_CNT=MAINCNT
 ELSE
  INC OTW_FPSCNT
 ENDIF
 BTN=BUTTON()AND OTW_USEBTN
 IF BTN||OTW_OLDBTN THEN
  IF MAINCNT-OTW_OLDBTNF||OTW_OLDBTN THEN
   E=SendButtonWindow(NUWIDToWND(WIN_ACTIVENUWID),BTN)
   OTW_OLDBTNF=MAINCNT
   OTW_OLDBTN=BTN
  ENDIF
 ENDIF
' ExitProcess 1
RETURN
END
VAR RUNCTL
COMMON DEF I_RUN
 IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
  PrintConsole "Require OTW"+LF$()
  ExitProcess 1
  RETURN
 ENDIF
 VAR E
 ExtendControl "RUN",GetWindowControl() OUT RUNCTL,E
 VAR WND
 NewTopLevelWindow RUNCTL,"RUN",64,32 OUT WND,E
 IF E THEN BEEP:ExitProcess 1
 E=SetControlNotificationHandler(RUNCTL,"RunNotificationHandler")
 SetProcessVar WND
 VAR TW
 NewWindow GetButtonControl(),"RUN",0,10,32,10,WND,0OUT TW,E
 NewWindow GetTextBoxControl(),"",0,0,64,8,WND,0OUT TW,E
END
COMMON DEF L_RUN
 VAR E=UpdateWindow(GetProcessVar())
 IF E THEN ExitProcess 0
END
VAR ABOUTCTL
COMMON DEF I_ABOUT
 IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
  PrintConsole "Require OTW"+LF$()
  ExitProcess 1
  RETURN
 ENDIF
 VAR E
 ExtendControl "ABOUT",GetWindowControl() OUT ABOUTCTL,E
 VAR WND
 NewTopLevelWindow ABOUTCTL,"OTW",128,32 OUT WND,E
 IF E THEN BEEP:ExitProcess 1
 SetProcessVar WND
 E=SetControlPainter(ABOUTCTL,"AboutPainter")
END
COMMON DEF AboutPainter WND,CTL,TYPE,A1,A2
 VAR E=CallBaseControlHandler(WND,CTL,TYPE,A1,A2)
' E=GBeginWindow(WND)
 IF E THEN RETURN
 GPRINTWindow WND,0,0," otya 3D window ",RGB(0,0,0)
 GPRINTWindow WND,0,8,"   system 5.0   ",RGB(0,0,0)
 E=GEndWindow(WND)
END
COMMON DEF L_ABOUT
 VAR E=UpdateWindow(GetProcessVar())
 IF E THEN ExitProcess 1
END
VAR LAUNCHERCTL
DIM LAUNCHERITEM$[0]
DIM LAUNCHERLEN
COMMON DEF LauncherPainter WND,CTL,T,A1,A2
 VAR E=CallBaseControlHandler(WND,CTL,T,A1,A2)
 VAR I
 FOR I=0TO LAUNCHERLEN-1
  GPRINTWindow WND,0,I*8,LAUNCHERITEM$[I],RGB(0,0,0)
 NEXT
 E=GEndWindow(WND)
END
COMMON DEF LauncherLMouseUP WND,CTL,T,X,Y
 VAR E=CallBaseControlHandler(WND,CTL,T,X,Y)
 VAR ITEM=Y/8
 IF ITEM>=LAUNCHERLEN||ITEM<0THEN
  RETURN
 ENDIF
 NewProcess LAUNCHERITEM$[ITEM],"" OUT E,E,E
END
COMMON DEF I_LAUNCHER
 IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
  PrintConsole "Require window system"+LF$()
  ExitProcess 1
  RETURN
 ENDIF
 IF LAUNCHERCTL THEN
  VAR WND,E
  NewTopLevelWindow LAUNCHERCTL,"LAUNCHER",80,LAUNCHERLEN*8 OUT WND,E
  SetProcessVar WND
  E=SetControlPainter(LAUNCHERCTL,"LauncherPainter")
  E=SetControlLMouseUpHandler(LAUNCHERCTL,"LauncherLMouseUP")
 ELSE
  LAUNCHERLEN=7
  LAUNCHERITEM$=NewArray$(LAUNCHERLEN)
  LAUNCHERITEM$[0]="WCLOCK"
  LAUNCHERITEM$[1]="RUN"
  LAUNCHERITEM$[2]="ABOUT"
  LAUNCHERITEM$[3]="LAUNCHER"
  LAUNCHERITEM$[4]="PAINT"
  LAUNCHERITEM$[5]="TXTED"
  LAUNCHERITEM$[6]="PRGED"
  ExtendControl "LAUNCHER",GetWindowControl() OUT LAUNCHERCTL,E
  I_LAUNCHER
 ENDIF
END
COMMON DEF L_LAUNCHER
 VAR E=UpdateWindow(GetProcessVar())
 IF E THEN ExitProcess 1
END

VAR WCLOCKWND
VAR WCLOCKCTL
VAR WCLOCKBC
VAR WCLOCKBC2
VAR WCLOCKTIM
COMMON DEF GetChildWindow(WND)
 IF!CheckWindow(WND)THEN RETURN 0
 RETURN NUWIDToWND(WIN_CHILD[WND AND NUWIDMASK])
END
COMMON DEF RunNotificationHandler W,C,T,V,A2
 VAR PID,NUPID,E
 NewProcess GetWindowName$(GetChildWindow(GetParentWindow(V))),"" OUT PID,NUPID,E
 IF E THEN BEEP
END
COMMON DEF I_WCLOCK
 IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
  PrintConsole "Require OTW"+LF$()
  ExitProcess 1
  RETURN
 ENDIF
 VAR E
 ExtendControl "WCLOCK",GetWindowControl() OUT WCLOCKCTL,E
 E=SetControlPainter(WCLOCKCTL,"WCLOCKPainter")
 NewTopLevelWindow WCLOCKCTL,"CLOCK",64,64 OUT WCLOCKWND,E
 WCLOCKTIM=MAINCNT/60
 WCLOCKTIM=WCLOCKTIM*60
 'NewWindow GetButtonControl()
 NewWindow TSTCTL,"TEST",8,8,32,32,WCLOCKWND,0 OUT WCLOCKBC,E
 NewWindow GetTextBoxControl(),"TEST",0,16,48,8,WCLOCKWND,0OUT WCLOCKBC2,E
'NewWindow GetButtonControl(),"TEST",16,16,32,32,WCLOCKWND,0 OUT WCLOCKBC2,E
 E=SetControlNotificationHandler(WCLOCKCTL,"WCLOCKNotif")
 SetProcessVar WCLOCKWND
END
COMMON DEF WCLOCKNotif W,C,T,WND,V
 BEEP 
END
COMMON DEF WCLOCKPainter W,C,T,A,B
 VAR E=CallBaseControlHandler(W,C,T,A,B)
 WCLOCK_RP
END
COMMON DEF L_WCLOCK
 VAR E
 WCLOCKWND=GetProcessVar()
' E=UpdateWindow(WCLOCKBC)
 E=PeekWindowEvent(WCLOCKWND)
' IF E==RepaintControlEvent()THEN
'  E=UpdateWindow(WCLOCKWND)
'  WCLOCK_RP
'  RETURN
' ENDIF
 E=UpdateWindow(WCLOCKWND)
 IF E THEN ExitProcess 1
 IF MAINCNT-WCLOCKTIM>=60 THEN
  WCLOCKTIM=MAINCNT/60
  WCLOCKTIM=WCLOCKTIM*60
  WCLOCK_RP
 ENDIF
' E=UpdateWindow(WCLOCKBC2)
 
END
 DEF WCLOCK_RP
  VAR E
  E=GBeginWindow(WCLOCKWND)
  IF E THEN RETURN
  GFILLWindow WCLOCKWND,0,0,64,64,RGB(255,160,16)
  GPRINTWindowCC WCLOCKWND,0,0,TIME$,1
  GPRINTWindowCC WCLOCKWND,0,8,TIME$,1
  GPRINTWindowCC WCLOCKWND,0,56,TIME$,1
  E=GEndWindow(WCLOCKWND)
 END
DEF DUMP_WND
 DUMP_WND2 WIN_ROOTWND AND NUWIDMASK,""
END
DEF DUMP_WND2 NUW,I$
 IF!NUW THEN RETURN
 ?I$;WIN_NAME$[NUW],NUW,WIN_WID[NUW],CTL_NAME$[WIN_CTL[NUW]AND 4095],WIN_CTL[NUW]AND 4095
' IF CSRY==29 THEN VAR II$INPUT "";II$
 IF LEN(I$) THEN
  VAR NM$=""
  IF WIN_NEXT[NUW] THEN
   NM$=""
  ELSE
   NM$=""
  ENDIF
  IF WIN_NEXT[WIN_PARENT[NUW]]THEN
   NM$=""+NM$
  ELSE
   NM$=" "+NM$
  ENDIF
  DUMP_WND2 WIN_CHILD[NUW],MID$(I$,0,LEN(I$)-1)+NM$
 ELSE
  IF WIN_CHILD[NUW]THEN
   DUMP_WND2 WIN_CHILD[NUW],""
  ELSE
   DUMP_WND2 WIN_CHILD[NUW],""
  ENDIF
 ENDIF
 DUMP_WND2 WIN_NEXT[NUW],I$
END
DEF UpdateButton()
 VAR B=BUTTON()
 VAR RET=0
 IF B AND OTW_MOUSELBTN THEN
  IF!OTW_OLDLMOUSE THEN RET=OTW_LMOUSEDWN
  OTW_OLDLMOUSE=1
 ELSE
  IF OTW_OLDLMOUSE THEN RET=OTW_LMOUSEUP
  OTW_OLDLMOUSE=0
 ENDIF
 IF B AND OTW_MOUSERBTN THEN
  IF!OTW_OLDRMOUSE THEN RET=RET OR OTW_RMOUSEDWN
  OTW_OLDRMOUSE=1
 ELSE
  IF OTW_OLDRMOUSE THEN RET=RET OR OTW_RMOUSEUP
  OTW_OLDRMOUSE=0
 ENDIF
 RETURN RET
END
VAR OTW_MOUSEOLDX,OTW_MOUSEOLDY
VAR OTW_MOUSEOLDST
COMMON DEF UpdateMouse
 VAR S,X,Y
 TOUCH OUT S,X,Y
 IF OTW_MOUSEOLDST&&S THEN
  OTW_MOUSEX=OTW_MOUSEX+X-OTW_MOUSEOLDX
  OTW_MOUSEY=OTW_MOUSEY+Y-OTW_MOUSEOLDY
   IF OTW_MOUSEX<OTW_MOUSECLIPX THEN OTW_MOUSEX=OTW_MOUSECLIPX
   IF OTW_MOUSEY<OTW_MOUSECLIPY THEN OTW_MOUSEY=OTW_MOUSECLIPY
   IF OTW_MOUSEX>=OTW_MOUSECLIPX2 THEN OTW_MOUSEX=OTW_MOUSECLIPX2-1
   IF OTW_MOUSEY>=OTW_MOUSECLIPY2 THEN OTW_MOUSEY=OTW_MOUSECLIPY2
  SPOFS OTW_MOUSESP,OTW_MOUSEX,OTW_MOUSEY
   OTW_MOUSEX#=OTW_MOUSEX
   OTW_MOUSEY#=OTW_MOUSEY
 ELSE
  IF S&&X>=OTW_KX&&X<OTW_KX2&&Y>=OTW_KY&&Y<OTW_KY2 THEN
   BEEP 
   VAR K$
   XSCREEN 0,512,2
   VISIBLE 1,1,1,1
   
   OTW_SP=OTW_DP
   GPAGE OTW_DP,OTW_DP
   KEY 1,"
  ENDIF
 ENDIF
 OTW_MOUSEOLDX=X
 OTW_MOUSEOLDY=Y
 OTW_MOUSEOLDST=S
 IF!S THEN
  VAR X#,Y#
  STICK OUT X#,Y#
  IF X#!=0 OR Y#!=0 THEN
   OTW_MOUSEX#=OTW_MOUSEX#+X#*(4/OTW_FPF#)'0.2'/2
   OTW_MOUSEY#=OTW_MOUSEY#-Y#*(4/OTW_FPF#)'0.2'/2
   IF OTW_MOUSEX#<OTW_MOUSECLIPX THEN OTW_MOUSEX#=OTW_MOUSECLIPX
   IF OTW_MOUSEY#<OTW_MOUSECLIPY THEN OTW_MOUSEY#=OTW_MOUSECLIPY
   IF OTW_MOUSEX#>=OTW_MOUSECLIPX2 THEN OTW_MOUSEX#=OTW_MOUSECLIPX2-1
   IF OTW_MOUSEY#>=OTW_MOUSECLIPY2 THEN OTW_MOUSEY#=OTW_MOUSECLIPY2
   SPANIM OTW_MOUSESP,"XY",-1,OTW_MOUSEX#,OTW_MOUSEY#
'   SPOFS OTW_MOUSESP,OTW_MOUSEX#,OTW_MOUSEY#
   OTW_MOUSEX=OTW_MOUSEX#
   OTW_MOUSEY=OTW_MOUSEY#
  ENDIF
 ENDIF
END
COMMON DEF OTWSAVE VER$
 SAVE"PRG1:OTW"+VER$
END
'DEF OTW_LOADMOUSE
' 
'END
COMMON DEF I_CREATEOTW
 ?"OTW Develop Tool"
 VAR K$
 INC K$,"VAR _1CTL"+LF$()
 INC K$,"COMMON DEF I__1"+LF$()
 INC K$, "IF!CHKCALL(_QIsWinRunning_Q)||!IsWinRunning()THEN"+LF$()
 INC K$,"  PrintConsole _QRequire window system_Q+LF$()"+LF$()
 INC K$,"  ExitProcess 1"+LF$()
 INC K$,"  RETURN"+LF$()
 INC K$," ENDIF"+LF$()
 INC K$," VAR WND,E"+LF$()
 INC K$," IF!_1CTL THEN"+LF$()
 INC K$,"  ExtendControl _Q_2_Q,GetWindowControl() OUT _1CTL,E"+LF$()
 INC K$," ENDIF"+LF$()
 INC K$," NewTopLevelWindow _1CTL,_Q_2_Q,_W,_H OUT WND,E"+LF$()
 INC K$,"SetProcessVar WND"+LF$()
 INC K$,"END"+LF$()
 INC K$,"COMMON DEF L__1"+LF$()
 INC K$,"IF UpdateWindow(GetProcessVar())THEN ExitProcess 1"+LF$()
 INC K$,"END
 VAR _1$
 VAR _2$,_W,_H
 VAR _Q$=CHR$(34)
 LINPUT "ProcessName?";_1$
 LINPUT "WindowName?";_2$
 INPUT "Width";_W
 INPUT "Height";_H
 K$=ReplaceStr$(K$,"_1",_1$)
 K$=ReplaceStr$(K$,"_2",_2$)
 K$=ReplaceStr$(K$,"_W",STR$(_W))
 K$=ReplaceStr$(K$,"_H",STR$(_H))
 K$=ReplaceStr$(K$,"_Q",_Q$)
 VAR SLOT=3
 INPUT "InsertSlot";SLOT
 PRGEDIT SLOT
 PRGINS K$
 ExitProcess 0
END
COMMON DEF L_CREATEOTW
END

VAR PAINTCTL
COMMON DEF PaintRepaint WND,CTL,T,A1,A2
 IF CallBaseControlHandler(WND,CTL,T,A1,A2)THEN RETURN
 DIM A[64*64]
 ReadArray GetWindowVar(WND,2),A,0,LEN(A)
 GLOADWindow WND,0,0,64,64,A,0,0
 VAR E=GEndWindow(WND)
END
COMMON DEF PaintLDWN WND,CTL,T,X,Y
 SetWindowVar WND,3,1
 SetWindowVar WND,0,X
 SetWindowVar WND,1,Y
END
COMMON DEF PaintLUP WND,CTL,T,X,Y
 SetWindowVar WND,3,0
END
COMMON DEF PaintCF WND,CTL,T,F,A2
'IF CallBaseControlHandler(WND,CTL,T,F,A2)THEN 
 IF!F THEN SetWindowVar WND,3,0
END

COMMON DEF PaintMouseMove WND,CTL,T,X,Y
 IF!GetWindowVar(WND,3)THEN RETURN
 VAR OX=GetWindowVar(WND,0)
 VAR OY=GetWindowVar(WND,1)
 VAR E=GBeginWindow(WND)
 GLINEWindow WND,X,Y,OX,OY,RGB(0,0,0)
 GLINEArrayMemory GetWindowVar(WND,2),64,64,X,Y,OX,OY,RGB(0,0,0)
 E=GEndWindow(WND)
 SetWindowVar WND,0,X
 SetWindowVar WND,1,Y
END
COMMON DEF I_PAINT
 IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
  PrintConsole "Require window system"+LF$()
  ExitProcess 1
  RETURN
 ENDIF
 VAR PTR=malloc(64*64)
 IF!PTR THEN BEEP:ExitProcess 1RETURN
 VAR WND,E
 IF!PAINTCTL THEN
  ExtendControl "PAINT",GetWindowControl() OUT PAINTCTL,E
  E=SetControlMouseMoveHandler(PAINTCTL,"PaintMouseMove")
  E=SetControlPainter(PAINTCTL,"PaintRepaint")
  E=SetControlLMouseDownHandler(PAINTCTL,"PaintLDWN")
  E=SetControlLMouseUpHandler(PAINTCTL,"PaintLUP")
  E=SetControlChFocusHandler(PAINTCTL,"PaintCF")
 ENDIF
 NewTopLevelWindow PAINTCTL,"PAINT",64,64 OUT WND,E  SetProcessVar WND
 SetWindowVar WND,2,PTR
END
COMMON DEF L_PAINT
IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
END
'===Text editor===
VAR TXTEDCTL
VAR TXTBOXEXCTL
VAR TXTBOXEX_LINESIZ
VAR TXTBOXEX_FREE
DIM TXTBOXEX_VAL$[0]
DIM TXTBOXEX_LINE[0]
DIM TXTBOXEX_NEXT[0]
DIM TXTBOXEX_PREV[0]
COMMON DEF GetTextBoxExControl()
 RETURN TXTBOXEXCTL
END
COMMON DEF SetTextBoxExPRGMode WND,FLG
 SetWindowVar WND,7,!!FLG
END
COMMON DEF INIT_TXTBOXEX
 VAR E
 IF!TXTEDCTL THEN
  NewControl "TextBoxEx" OUT TXTBOXEXCTL,E
  E=SetControlPainter(TXTBOXEXCTL,"TextBoxExPainter")
  E=SetControlKeyHandler(TXTBOXEXCTL,"TextBoxExKey")
  E=SetControlButtonHandler(TXTBOXEXCTL,"TextBoxExButton")
  E=SetControlChFocusHandler(TXTBOXEXCTL,"TextBoxExChFocus")
  TXTBOXEX_LINESIZ=1024
  TXTBOXEX_VAL$=NewArray$(TXTBOXEX_LINESIZ)
  TXTBOXEX_LINE=NewArray(TXTBOXEX_LINESIZ)
  TXTBOXEX_NEXT=NewArray(TXTBOXEX_LINESIZ)
  TXTBOXEX_PREV=NewArray(TXTBOXEX_LINESIZ)
  TXTBOXEX_FREE=1
  VAR I
  FOR I=1TO TXTBOXEX_LINESIZ-2
   TXTBOXEX_NEXT[I]=I+1
  NEXT
 ENDIF
END
DEF TXTED_NewLINE(V$,P)
 VAR R=TXTBOXEX_FREE
 TXTBOXEX_FREE=TXTBOXEX_NEXT[TXTBOXEX_FREE]
 IF P THEN
  TXTBOXEX_LINE[R]=TXTBOXEX_LINE[P]+1
 ELSE
  TXTBOXEX_LINE[R]=1
 ENDIF
 VAR N
 IF P THEN
  N=TXTBOXEX_NEXT[P]
  TXTBOXEX_NEXT[P]=R
 ENDIF
 TXTBOXEX_VAL$[R]=V$
 TXTBOXEX_NEXT[R]=N
 TXTBOXEX_PREV[R]=P
 IF N THEN
  TXTBOXEX_PREV[N]=R
 ENDIF
 RETURN R
END
DEF TXTED_DeleteLine(L)
 IF!L THEN RETURN 0
 VAR N=TXTBOXEX_NEXT[L]
 VAR P=TXTBOXEX_PREV[L]
 IF N THEN
  TXTBOXEX_PREV[N]=P
 ENDIF
 IF P THEN
  TXTBOXEX_NEXT[P]=N
 ENDIF
 TXTBOXEX_NEXT[L]=TXTBOXEX_FREE
 TXTBOXEX_FREE=L
 IF P THEN RETURN P
 IF N THEN RETURN N
 RETURN 0
END

COMMON DEF TextBoxExPainter WND,CTL,T,_,__
 TextBoxExRepaint WND
END
COMMON DEF TextBoxExChFocus WND,CTL,T,_,__
 TextBoxExRepaint WND
END
COMMON DEF TextBoxExRepaint WND
 VAR E=GBeginWindow(WND)
 GCLSWindow WND,RGB(255,255,255)
 VAR W=GetWindowWidth(WND)
 VAR H=GetWindowHeight(WND)
 GBOXWindow WND,0,0,W,H,RGB(0,0,0)
 VAR L=GetWindowVar(WND,1)
 VAR C=GetWindowVar(WND,2)
 VAR V$=TXTBOXEX_VAL$[C]
 VAR CX=GetWindowVar(WND,3)
 VAR L$=LF$()
 IF LEN(V$)<=CX THEN
  CX=LEN(V$)
  IF LEN(V$)&&V$[LEN(V$)-1]==L$THEN DEC CX
  SetWindowVar WND,3,CX
 ENDIF
 VAR TC=RGB(0,0,0)
 VAR Y=1,X=1,PL,LC
 WHILE 1
  V$=TXTBOXEX_VAL$[L]
  IF GetWindowVar(WND,7)THEN
   TXTED_PRGPRINT WND,X,Y,V$
  ELSE
   GPRINTWindow WND,X,Y,V$,TC
  ENDIF
  PL=L
  IF L==C&&IsActiveWindow(WND)THEN
   GFILLWindow WND,X+CX*8,Y+7,X+8+CX*8,Y+6,TC
  ENDIF
  L=TXTBOXEX_NEXT[L]
  INC Y,8
  IF Y>=H THEN BREAK
  IF!L THEN
   IF!LEN(V$)||V$[LEN(V$)-1]!=L$THEN
    GPRINTWindow WND,LEN(V$)*8,Y-8,"[EOF]",RGB(80,208,255)
    IF PL==C&&IsActiveWindow(WND)THEN
     GFILLWindow WND,CX*8,Y-1,8+CX*8,Y-2,TC
    ENDIF
   ELSE
    GPRINTWindow WND,X,Y,"[EOF]",RGB(80,208,255)
    IF PL==C&&IsActiveWindow(WND)THEN
     GFILLWindow WND,CX*8,Y+7,8+CX*8,Y+6,TC
    ENDIF
   ENDIF
   PL=0
   BREAK
  ENDIF
 WEND
 E=GEndWindow(WND)
 SetWindowVar WND,6,PL
END
DEF TXTED_UpCursor(WND)
  VAR C=GetWindowVar(WND,2)
  IF TXTBOXEX_PREV[C]THEN
   VAR L=TXTBOXEX_PREV[GetWindowVar(WND,1)]
   C=TXTBOXEX_PREV[C]
   IF L==C THEN
     SetWindowVar WND,1,L
   ENDIF
   SetWindowVar WND,2,C
   RETURN 1
  ENDIF
  RETURN 0
END
DEF TXTED_DownCursor(WND)
  VAR C=GetWindowVar(WND,2)
  IF TXTBOXEX_NEXT[C]THEN
   IF GetWindowVar(WND,6)==C THEN
    VAR L=TXTBOXEX_NEXT[GetWindowVar(WND,1)]
    IF L THEN
     SetWindowVar WND,1,L
    ENDIF
   ENDIF
   C=TXTBOXEX_NEXT[C]
   SetWindowVar WND,2,C
   RETURN 1
  ENDIF
  RETURN 0
END
COMMON DEF TextBoxExButton WND,CTL,T,BTN,_
 VAR F=GetWindowVar(WND,4),U,R=GetWindowVar(WND,5)
 IF!BTN THEN SetWindowVar WND,5,0RETURN
 IF MAINCNT-F<R THEN RETURN

 IF BTN AND 1 THEN
  IF TXTED_UpCursor(WND)THEN
   TextBoxExRepaint WND
  ENDIF
  U=1
 ENDIF
 IF BTN AND 2 THEN
  IF TXTED_DownCursor(WND)THEN
   TextBoxExRepaint WND
  ENDIF
  U=1
 ENDIF
 IF BTN AND 4THEN
  VAR CX=GetWindowVar(WND,3)
  IF CX THEN
   SetWindowVar WND,3,CX-1
   TextBoxExRepaint WND
  ELSE
   IF TXTED_UpCursor(WND)THEN
    VAR C=GetWindowVar(WND,2)
    SetWindowVar WND,3,LEN(TXTBOXEX_VAL$[C])
    TextBoxExRepaint WND
   ENDIF
  ENDIF
  U=1
 ENDIF
 IF BTN AND 8THEN
  CX=GetWindowVar(WND,3)
  C=GetWindowVar(WND,2)
  SetWindowVar WND,3,CX+1
  VAR V$=TXTBOXEX_VAL$[C]
  IF LEN(V$)<=CX||LEN(V$)-1==CX&&V$[CX]==LF$()THEN
   IF TXTED_DownCursor(WND)THEN
    SetWindowVar WND,3,0
    TextBoxExRepaint WND
   ENDIF
  ENDIF
  TextBoxExRepaint WND
  U=1
 ENDIF
 IF U THEN
  IF R==0 THEN
   SetWindowVar WND,5,20
  ELSE
   SetWindowVar WND,5,3
  ENDIF
  SetWindowVar WND,4,MAINCNT
 ENDIF
END
COMMON DEF TextBoxExKey WND,CTL,T,KEY,_
 VAR C=GetWindowVar(WND,2)
 IF!C THEN
  C=TXTED_NewLINE("",0)
  SetWindowVar WND,1,C
  SetWindowVar WND,2,C
 ENDIF
 VAR X=GetWindowVar(WND,3)
 VAR K$=CHR$(KEY)
 IF K$==CR$()THEN K$=LF$()
 IF K$==BS$()THEN
  IF X>0THEN
   TXTBOXEX_VAL$[C]=RemoveStr$(TXTBOXEX_VAL$[C],X-1,1)
   SetWindowVar WND,3,X-1
  ELSE
   VAR P=TXTBOXEX_PREV[C]
   IF P THEN
    VAR L=GetWindowVar(WND,1)
    VAR V$=TXTBOXEX_VAL$[C]
    SetWindowVar WND,2,TXTED_DeleteLine(C)
    L=GetWindowVar(WND,2)
    TXTBOXEX_VAL$[L]=LEFT$(TXTBOXEX_VAL$[L],LEN(TXTBOXEX_VAL$[L])-1)
    SetWindowVar WND,3,LEN(TXTBOXEX_VAL$[L])
    INC TXTBOXEX_VAL$[L],MID$(V$,X,LEN(V$)-X)
    L=GetWindowVar(WND,1)
    IF L==C THEN
     SetWindowVar WND,1,GetWindowVar(WND,2)
    ENDIF
   ENDIF
  ENDIF
 ELSE
  IF K$==LF$()THEN
   SetWindowVar WND,2,TXTED_NewLine(MID$(TXTBOXEX_VAL$[C],X,LEN(TXTBOXEX_VAL$[C])-X),C)
   SetWindowVar WND,3,0
   TXTBOXEX_VAL$[C]=MID$(TXTBOXEX_VAL$[C],0,X)+K$
   IF GetWindowVar(WND,6)==C THEN
    L=TXTBOXEX_NEXT[GetWindowVar(WND,1)]
    IF L THEN
     SetWindowVar WND,1,L
    ENDIF
   ENDIF
  ELSE
   TXTBOXEX_VAL$[C]=InsertStr$(TXTBOXEX_VAL$[C],X,K$)
   SetWindowVar WND,3,X+1
  ENDIF
 ENDIF
 TextBoxExRepaint WND
END
'===syntax highlighting===
'HashSet
VAR RTXTEDVAR
VAR RTXTEDDIM
VAR RTXTEDFOR
VAR RTXTEDNEXT
VAR RTXTEDBREAK
VAR RTXTEDCONTINUE
VAR RTXTEDREPEAT
VAR RTXTEDDATA
VAR RTXTEDREAD
VAR RTXTEDCOMMON
VAR RTXTEDDEF
VAR RTXTEDOUT
VAR RTXTEDEND
VAR RTXTEDRETURN
VAR RTXTEDIF
VAR RTXTEDTHEN
VAR RTXTEDELSE
VAR RTXTEDENDIF
VAR RTXTEDPRINT
VAR RTXTEDREM
VAR RTXTEDINC
VAR RTXTEDDEC
VAR RTXTEDGOTO
VAR RTXTEDGOSUB
VAR RTXTEDRESTORE
VAR RTXTEDAND
VAR RTXTEDOR
VAR RTXTEDXOR
VAR RTXTEDNOT
VAR RTXTEDMOD
VAR RTXTEDDIV
VAR RTXTEDCALL
COMMON DEF TXTED_PRGPRINT WND,X,Y,P$
 VAR L=LEN(P$)-1,I,A
 VAR _0=ASC("0"),_9=ASC("9"),_Q=34
 VAR _S=ASC("'"),_A=ASC("A"),_Z=ASC("Z")
 VAR _LA=ASC("a"),_LZ=ASC("z"),__=ASC("_")
 VAR _AT=ASC("@"),_AND=ASC("&"),_B=ASC("B")
 VAR _H=ASC("H"),_1=ASC("1"),_F=ASC("F")
 VAR _LF=10
 VAR S
 FOR I=0TO L
  A=ASC(P$[I])
  IF A>=_A&&A<=_Z||A>=_LA&&A<=_LZ||A==__ THEN 
   S=I
   FOR I=I+1 TO L
    A=ASC(P$[I])
    IF A>=_A&&A<=_Z||A>=_LA&&A<=_LZ||A==__ THEN CONTINUE
    IF A>=_0&&A<=_9 THEN CONTINUE
    BREAK
   NEXT
   VAR I$=MID$(P$,S,I-S)
   IF CHKVAR("RTXTED"+I$)THEN
    GPRINTWindow WND,X,Y,I$,RGB(0,198,247)
   ELSE
    GPRINTWindow WND,X,Y,I$,RGB(0,0,0)
   ENDIF
   INC X,LEN(I$)*8
   DEC I
   CONTINUE
  ENDIF
  IF A==_Q THEN
   GPUTCHRWindow WND,X,Y,A,RGB(99,132,247)
   INC X,8
   FOR I=I+1 TO L
    A=ASC(P$[I])
    IF A==_LF THEN GPUTCHRWindow WND,X,Y,A,RGB(0,184,255)BREAK
    GPUTCHRWindow WND,X,Y,A,RGB(99,132,247)
    INC X,8
    IF A==_Q THEN BREAK
   NEXT
   IF A!=_Q THEN BREAK
   IF I==L THEN BREAK
   CONTINUE
  ENDIF
  IF A==_S THEN
   FOR I=I TO L
    A=ASC(P$[I])
    IF A==_LF THEN GPUTCHRWindow WND,X,Y,A,RGB(0,184,255)BREAK
    GPUTCHRWindow WND,X,Y,A,RGB(33,247,16)
    INC X,8
   NEXT
   BREAK
  ENDIF
  IF A==_AT THEN
   FOR I=I TO L
    A=ASC(P$[I])
    IF!(A>=_A&&A<=_Z||A>=_LA&&A<=_LZ||A==__||A>=_0&&A<=_9||A==_AT)THEN DEC I:BREAK
    GPUTCHRWindow WND,X,Y,A,RGB(247,167,0)
    INC X,8
   NEXT
   CONTINUE
  ENDIF
  IF A==_AND THEN
   S=ASC(P$[I])
   FOR I=I+1 TO L
    A=ASC(P$[I])
    INC X,8
    IF A==_B THEN
     GPUTCHRWindow WND,X-8,Y,S,RGB(247,69,149)
     GPUTCHRWindow WND,X,Y,A,RGB(247,69,149)
     INC X,8
     S=0
     FOR I=I+1 TO L
      A=ASC(P$[I])
      IF A>_1&&A<=_9 THEN
       GPUTCHRWindow WND,X,Y,A,RGB(0,0,0)
       INC X,8
       S=1
       CONTINUE
      ENDIF
      IF A!=_0&&A!=_1||S THEN DEC I:BREAK
      GPUTCHRWindow WND,X,Y,A,RGB(247,69,149)
      INC X,8
     NEXT
     DEC I
     BREAK
    ENDIF
    IF A==_H THEN
     GPUTCHRWindow WND,X-8,Y,S,RGB(247,69,149)
     GPUTCHRWindow WND,X,Y,A,RGB(247,69,149)
     INC X,8
     FOR I=I+1 TO L
      A=ASC(P$[I])
      IF!(A>=_0&&A<=_9||A>=_A&&A<=_F)THEN DEC I:BREAK
      GPUTCHRWindow WND,X,Y,A,RGB(247,69,149)
      INC X,8
     NEXT
     BREAK
    ENDIF
    DEC X,8
    BREAK
   NEXT
   CONTINUE
  ENDIF
  IF A>=_0&&A<=_9 THEN
   GPUTCHRWindow WND,X,Y,A,RGB(247,69,149)
  ELSE
   IF A==_LF THEN GPUTCHRWindow WND,X,Y,A,RGB(0,184,255)BREAK
   GPUTCHRWindow WND,X,Y,A,RGB(0,0,0)
  ENDIF
  INC X,8
 NEXT
END
'===End text editor===
COMMON DEF I_TXTED
 IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
  PrintConsole "Require window system"+LF$()
  ExitProcess 1
  RETURN
 ENDIF
 VAR WND,E
 IF!TXTEDCTL THEN
  ExtendControl "TXTED",GetWindowControl() OUT TXTEDCTL,E
 ENDIF
 NewTopLevelWindow TXTEDCTL,"TXTED",128,64 OUT WND,E
 SetProcessVar WND
 NewWindow GetTextBoxExControl(),"",0,0,128,64,WND,0 OUT WND,E
'SetTextBoxExPRGMode WND,TRUE
END
COMMON DEF L_TXTED
 IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
END
VAR PRGEDCTL
COMMON DEF I_PRGED
 IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
  PrintConsole "Require window system"+LF$()
  ExitProcess 1
  RETURN
 ENDIF
 VAR WND,E
 IF!PRGEDCTL THEN
  ExtendControl "PRGED",GetWindowControl() OUT PRGEDCTL,E
 ENDIF
 NewTopLevelWindow PRGEDCTL,"PRGED",128,64 OUT WND,E
 SetProcessVar WND
 NewWindow GetTextBoxExControl(),"",0,0,128,64,WND,0 OUT WND,E
 SetTextBoxExPRGMode WND,TRUE
END
COMMON DEF L_PRGED
 IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
END
'===OTYA DOCUMENT EDITOR===
VAR OTYDOCCTL
COMMON DEF I_OTYDOC
 IF!CHKCALL("IsWinRunning")||!IsWinRunning()THEN
  PrintConsole "Require window system"+LF$()
  ExitProcess 1
  RETURN
 ENDIF
 VAR WND,E
 IF!OTYDOCCTL THEN
  ExtendControl "OTYDOC",GetWindowControl() OUT OTYDOCCTL,E
 ENDIF
 NewTopLevelWindow OTYDOCCTL,"OTYDOC",128,128 OUT WND,E
 SetProcessVar WND
END
COMMON DEF L_OTYDOC
 IF UpdateWindow(GetProcessVar())THEN ExitProcess 1
END
'===OTYA DOCUMENT EDITOR===

DEF OTW_LOADFONT
 'LOAD FONT-1
 VAR C$
 VAR X,Y,I,J
 RESTORE @FONT
 VAR C,_$,K
 DIM PAL[16]
 OTW_CONSOLEPAL=PAL
 FOR I=0TO 15
  READ PAL[I]
 NEXT
 IF!CHKFILE("DAT:FONT")THEN
  SAVE "GRPF:FONT"
  IF RESULT==-1THEN SAVE "GRPF:FONT"
  '2かいもやめたならしかたない
 ENDIF
 LOAD"GRP1:FONT",0
 VAR L
 OTW_FNT=NewArray2(1024,64)
 OTW_FNTTMP=NewArray(64)
 OTW_FNTPAL=NewArray(2)
 OTW_FNTTBL=NewArray(65536)
 GPAGE 0,1
 FOR I=0TO 1023
  X=I*8
  Y=X/512
  Y=Y*8
  X=X MOD 512
  VAR X2=X+7,Y2=Y+7,M=0
  FOR K=Y TO Y2
   FOR J=X TO X2
    IF(GSPOIT(J,K)AND&HFF000000)THEN
     OTW_FNT[I,M]=1
    ENDIF
    INC M
   NEXT
  NEXT
 NEXT
 OTW_FNTTBL[10]=13
 GPAGE 0,0
 OTW_LOADFNTTBL
@FONT
RETURN
COLOR
'      AARRGGBB
DATA &H00000000
DATA &HFF000000
DATA &HFF7F0000
DATA &HFFFF0000
DATA &HFF007F00
DATA &HFF00FF00
DATA &HFF7F7F00
DATA &HFFFFFF00
DATA &HFF00007F
DATA &HFF0000FF
DATA &HFF7F007F
DATA &HFFFF00FF
DATA &HFF007F7F
DATA &HFF00FFFF
DATA &HFF7F7F7F
DATA &HFFFFFFFF
DATA "0"
DATA &B00111000'"00FFF000"
DATA &B01000100
DATA &B01001100
DATA &B01010100
DATA &B01100100
DATA &B01000100
DATA &B00111000
DATA &B00000000
DATA "END"
END
DEF OTW_LOADFNTTBL
 RESTORE@RANGE
 VAR I
 WHILE 1
  VAR R1,R2,C1,C2
  READ R1
  IF R1==-1THEN BREAK
  READ C1,R2,C2
  FOR I=R1 TO R2
   OTW_FNTTBL[I]=C1
   INC C1
  NEXT
 WEND
 RESTORE @GRPFTABLE
 WHILE 1
  READ R1
  IF R1==-1THEN BREAK
  READ C1
  OTW_FNTTBL[R1]=C1
 WEND
@RANGE
DATA &H20,&H20,&H7F,&H7F
DATA 57857,1,57883,27
DATA 65280,32,65371,123
DATA 57984,128,58015,159
DATA -1,"A"
@GRPFTABLE

'=REMOVED(DIFF)=

DATA -1
END
